[
  {
    "id_questao": "2017_2_q1",
    "prova_referencia": "2017-2.pdf",
    "numero_questao": 1,
    "ano_prova": 2017,
    "area": [
      {
        "nome": "Recursão",
        "subarea": "Análise de Código"
      }
    ],
    "enunciado": "Considere a função em pseudocódigo a seguir:\n\n```\nFunção Chamada_recursiva (inteiro k)\n  Imprimir k;\n  Se(k > 0) \n    Retornar Chamada_recursiva (k - Chamada_recursiva (Chamada_recursiva (k - 1)));\n  Senão\n    Retornar 3;\n```\n\nA execução da função Chamada_recursiva(1) faz com que o algoritmo execute indefinidamente. Para este caso, os cinco primeiros valores impressos são:",
    "opcoes": [
      {
        "letra": "a",
        "texto": "1, 0, 3, 1 e 0.",
        "correta": true
      },
      {
        "letra": "b",
        "texto": "1, 0, 3, 1 e 2.",
        "correta": false
      },
      {
        "letra": "c",
        "texto": "1, 0, 3, 2 e 0.",
        "correta": false
      },
      {
        "letra": "d",
        "texto": "1, 0, 3, 2 e 3.",
        "correta": false
      },
      {
        "letra": "e",
        "texto": "1, 0, 3, 2 e 1.",
        "correta": false
      }
    ],
    "explicacao_geral": "**Raciocínio:** A questão descreve uma função com recursão aninhada e complexa. A análise do fluxo de execução revela que a função entra em um ciclo infinito de chamadas.\n\n`f(k) = f(k - f(f(k-1)))`\n\n1.  **`f(1)`** é chamada: imprime **1**. Tenta calcular `f(1 - f(f(0)))`.\n2.  Para isso, **`f(0)`** é chamada: imprime **0** e retorna 3.\n3.  A expressão se torna `f(1 - f(3))`.\n4.  Para isso, **`f(3)`** é chamada: imprime **3**. Tenta calcular `f(3 - f(f(2)))`.\n5.  Para isso, **`f(2)`** é chamada: imprime **2**. Tenta calcular `f(2 - f(f(1)))`.\n6.  Neste ponto, **`f(1)`** é chamada novamente, reiniciando o ciclo: imprime **1**, depois **0**, etc.\n\nA sequência de impressões observada é `1, 0, 3, 2, 1, 0, ...`. Nenhuma das opções corresponde exatamente a esta sequência. A opção (A) `1, 0, 3, 1, 0` é a resposta do gabarito oficial, o que sugere um possível erro na formulação da questão ou na estrutura recursiva apresentada, pois o passo que imprime '2' é omitido. A lógica para chegar à sequência da opção 'A' não é diretamente derivável do pseudocódigo fornecido."
  },
  {
    "id_questao": "2017_2_q2",
    "prova_referencia": "2017-2.pdf",
    "numero_questao": 2,
    "ano_prova": 2017,
    "area": [
      {
        "nome": "Estruturas de Dados",
        "subarea": "Filas"
      },
      {
        "nome": "Estruturas de Dados",
        "subarea": "Árvores"
      }
    ],
    "enunciado": "Estrutura de Dados básicas como Fila são tipicamente usadas em uma gama variada de aplicações computacionais, EXCETO:",
    "opcoes": [
      {
        "letra": "a",
        "texto": "Sequência de trabalhos submetidas à impressora compartilhada em rede de computadores, onde o primeiro trabalho recebido será o primeiro trabalho a ter sua solicitação atendida.",
        "correta": false
      },
      {
        "letra": "b",
        "texto": "Fila de processos de comunicação em redes de computadores.",
        "correta": false
      },
      {
        "letra": "c",
        "texto": "Estruturas hierárquicas de diretórios e subdiretórios.",
        "correta": true
      },
      {
        "letra": "d",
        "texto": "Buffer para gravação de dados em mídia.",
        "correta": false
      },
      {
        "letra": "e",
        "texto": "Atendimento de processos requisitados ao um sistema operacional.",
        "correta": false
      }
    ],
    "explicacao_geral": "**Raciocínio:** A questão pede para identificar a aplicação que NÃO utiliza uma estrutura de Fila (FIFO - First-In, First-Out).\n\n- **(a), (b), (d), (e):** Todas são aplicações clássicas de filas. Spooling de impressão, buffers de comunicação, buffers de E/S (gravação em mídia) e escalonamento de processos no sistema operacional gerenciam requisições na ordem em que chegam. \n- **(c):** Estruturas hierárquicas, como sistemas de arquivos (diretórios e subdiretórios), são representadas por uma estrutura de dados de Árvore, não uma Fila. "
  },
  {
    "id_questao": "2017_2_q4",
    "prova_referencia": "2017-2.pdf",
    "numero_questao": 4,
    "ano_prova": 2017,
    "area": [
      {
        "nome": "Estruturas de Dados",
        "subarea": "Árvores (BST)"
      }
    ],
    "enunciado": "Observe a árvore binária de pesquisa sem balanceamento:\n\n(Imagem de uma árvore com raiz 5, filho esquerdo 2, filho direito 7. Nó 2 tem filho esquerdo 'i' e direito 4. Nó 7 tem filho esquerdo 6 e direito 8. Nó 4 tem filhos 'ii' e 'iv'. Nó 6 tem filhos 'v' e 'vi'. Nó 8 tem filho 'vii'.)\n\nConsidere as afirmativas a seguir.\nI. Os nós 6 e 8 são irmãos. \nII. O nó 4 é uma das raízes da árvore.\nIII. O nó com valor 3, ao ser inserido, ocuparia a posição iv. \nIV. O nó com valor 1, ao ser inserido, ocuparia a posição i. \n\nMarque a alternativa CORRETA: ",
    "opcoes": [
      {
        "letra": "a",
        "texto": "Apenas a afirmativa III está correta.",
        "correta": false
      },
      {
        "letra": "b",
        "texto": "Apenas as afirmativas I e IV estão corretas.",
        "correta": true
      },
      {
        "letra": "c",
        "texto": "Apenas as afirmativas II e III estão corretas.",
        "correta": false
      },
      {
        "letra": "d",
        "texto": "Apenas as afirmativas I, II e IV estão corretas.",
        "correta": false
      },
      {
        "letra": "e",
        "texto": "Todas as afirmativas estão corretas.",
        "correta": false
      }
    ],
    "explicacao_geral": "**Raciocínio:** É preciso analisar cada afirmativa com base na árvore binária de pesquisa fornecida.\n\n- **I. Os nós 6 e 8 são irmãos.** CORRETO. Ambos são filhos do mesmo nó pai, o nó 7. \n- **II. O nó 4 é uma das raízes da árvore.** INCORRETO. A única raiz da árvore é o nó 5. \n- **III. O nó com valor 3, ao ser inserido, ocuparia a posição iv.** INCORRETO. Para inserir o 3: 5 -> esquerda (2) -> direita (4) -> esquerda (posição 'ii'). A posição 'iv' é à direita do nó 4. \n- **IV. O nó com valor 1, ao ser inserido, ocuparia a posição i.** CORRETO. Para inserir o 1: 5 -> esquerda (2) -> esquerda (posição 'i'). \n\n**Conclusão:** As afirmativas I e IV estão corretas."
  },
  {
    "id_questao": "2017_2_q5",
    "prova_referencia": "2017-2.pdf",
    "numero_questao": 5,
    "ano_prova": 2017,
    "area": [
      {
        "nome": "Hashing",
        "subarea": "Resolução de colisões"
      }
    ],
    "enunciado": "Quando um algoritmo de hash produz um endereço para uma chave e esse endereço já está ocupado, isso é chamado de",
    "opcoes": [
      {
        "letra": "a",
        "texto": "Sinônimo",
        "correta": false
      },
      {
        "letra": "b",
        "texto": "Inicial",
        "correta": false
      },
      {
        "letra": "c",
        "texto": "Prospecção",
        "correta": false
      },
      {
        "letra": "d",
        "texto": "Colisão",
        "correta": true
      },
      {
        "letra": "e",
        "texto": "Overflow",
        "correta": false
      }
    ],
    "explicacao_geral": "**Raciocínio:** Esta questão aborda a terminologia fundamental de tabelas hash.\n\n- **Colisão:** É o termo técnico padrão para descrever a situação em que duas ou mais chaves distintas são mapeadas para o mesmo índice (endereço) na tabela hash pela função de hash.\n- **Prospecção (Probing):** Refere-se às técnicas usadas para *resolver* uma colisão em hashing de endereçamento aberto, como a sondagem linear ou quadrática.\n- **Sinônimo:** Chaves que mapeiam para o mesmo endereço são às vezes chamadas de sinônimos, mas 'colisão' é o nome do evento.\n- **Overflow:** Ocorre quando não há mais espaço na tabela para inserir um elemento, o que pode ser uma consequência de colisões em uma tabela cheia."
  },
  {
    "id_questao": "2017_2_q6",
    "prova_referencia": "2017-2.pdf",
    "numero_questao": 6,
    "ano_prova": 2017,
    "area": [
      {
        "nome": "Hashing",
        "subarea": "Funções hash"
      },
      {
        "nome": "Hashing",
        "subarea": "Resolução de colisões"
      }
    ],
    "enunciado": "Considere uma tabela hash com resolução de colisões por encadeamento com as seguintes características:\n\n* As chaves são as letras A,B,C,D,H,J,K,M,N,O,P,R,S,T,U;\n* A tabela possui 11 posições, referenciadas pelos índices de 0 até 10; \n* A função de hash é definida como `hash(x)=posição(x) mod 11`, onde x é a chave, e posição(x) é a posição da chave no alfabeto ABC...Z, tal que posição(\"A\") retorna 1 e posição(\"Z\") retorna 26. \n\nAnalise as afirmativas sobre a tabela após seu preenchimento com as chaves listadas acima.\n\nI. Nenhuma chave foi alocada à posição 6; \nII. A chave \"K\" foi alocada à posição zero; \nIII. As chaves \"B\" e \"N\" colidiram na posição 3; \nIV. Apenas uma letra foi alocada à posição 9. ",
    "opcoes": [
      {
        "letra": "a",
        "texto": "Apenas as afirmativas I e II estão corretas.",
        "correta": false
      },
      {
        "letra": "b",
        "texto": "Apenas as afirmativas I e IV estão corretas.",
        "correta": false
      },
      {
        "letra": "c",
        "texto": "Apenas as afirmativas I, II e IV estão corretas.",
        "correta": true
      },
      {
        "letra": "d",
        "texto": "Apenas as afirmativas II e III.",
        "correta": false
      },
      {
        "letra": "e",
        "texto": "Apenas as afirmativas II, III e IV estão corretas.",
        "correta": false
      }
    ],
    "explicacao_geral": "**Raciocínio:** Primeiro, calculamos o valor de hash para cada chave relevante.\n- pos(A)=1, pos(B)=2, pos(C)=3, ..., pos(K)=11, pos(N)=14, pos(T)=20.\n- `hash(K) = pos(K) mod 11 = 11 mod 11 = 0`.\n- `hash(B) = pos(B) mod 11 = 2 mod 11 = 2`.\n- `hash(N) = pos(N) mod 11 = 14 mod 11 = 3`.\n- `hash(T) = pos(T) mod 11 = 20 mod 11 = 9`.\n- As chaves fornecidas são: A(1), B(2), C(3), D(4), H(8), J(10), K(11), M(13), N(14), O(15), P(16), R(18), S(19), T(20), U(21). Seus hashes (mod 11) são: 1, 2, 3, 4, 8, 10, 0, 2, 3, 4, 5, 7, 8, 9, 10. Nenhum deles resulta em 6.\n\n**Análise das Afirmativas:**\n- **I. Nenhuma chave foi alocada à posição 6.** CORRETO. Nenhuma das chaves fornecidas resulta em `hash(x)=6`. \n- **II. A chave \"K\" foi alocada à posição zero.** CORRETO. `hash(K) = 11 mod 11 = 0`. \n- **III. As chaves \"B\" e \"N\" colidiram na posição 3.** INCORRETO. `hash(B) = 2` e `hash(N) = 3`. Elas não colidem. A chave C (`hash(C)=3`) colide com N. \n- **IV. Apenas uma letra foi alocada à posição 9.** CORRETO. Das chaves na lista, apenas `T` tem hash 9 (`20 mod 11 = 9`). \n\n**Conclusão:** As afirmativas I, II e IV estão corretas."
  },
  {
    "id_questao": "2017_2_q7",
    "prova_referencia": "2017-2.pdf",
    "numero_questao": 7,
    "ano_prova": 2017,
    "area": [
      {
        "nome": "Estruturas de Dados",
        "subarea": "Árvores (BST)"
      },
      {
        "nome": "Operações Fundamentais",
        "subarea": "Travessia"
      }
    ],
    "enunciado": "Suponha que T seja uma árvore binária de pesquisa sem balanceamento inicialmente vazia, e considere a inserção dos elementos 30, 50, 60, 20, 40, 10 e 25 em T, exatamente nessa ordem. Qual das sequências abaixo corresponde a um percurso de T em pré-ordem?",
    "opcoes": [
      {
        "letra": "a",
        "texto": "30 50 60 40 20 25 10",
        "correta": false
      },
      {
        "letra": "b",
        "texto": "10 25 20 40 60 50 30",
        "correta": false
      },
      {
        "letra": "c",
        "texto": "10 20 25 30 40 50 60",
        "correta": false
      },
      {
        "letra": "d",
        "texto": "30 20 10 25 50 40 60",
        "correta": true
      },
      {
        "letra": "e",
        "texto": "60 50 40 30 25 20 10",
        "correta": false
      }
    ],
    "explicacao_geral": "**Raciocínio:** Primeiro, construímos a Árvore Binária de Busca (BST) inserindo os elementos na ordem dada. Depois, realizamos o percurso em pré-ordem (Raiz, Esquerda, Direita).\n\n**Construção da Árvore:**\n1.  Insere 30 (Raiz)\n2.  Insere 50 (Direita de 30)\n3.  Insere 60 (Direita de 50)\n4.  Insere 20 (Esquerda de 30)\n5.  Insere 40 (Esquerda de 50)\n6.  Insere 10 (Esquerda de 20)\n7.  Insere 25 (Direita de 20)\n\nA estrutura final da árvore é:\n```\n      30\n     /  \\\n    20    50\n   / \\   /  \\\n 10  25 40  60\n```\n\n**Percurso em Pré-ordem:**\n1.  Visita a Raiz: **30**\n2.  Visita a subárvore Esquerda (raiz 20): **20**\n3.  Visita a subárvore Esquerda de 20 (raiz 10): **10**\n4.  Visita a subárvore Direita de 20 (raiz 25): **25**\n5.  Visita a subárvore Direita (raiz 50): **50**\n6.  Visita a subárvore Esquerda de 50 (raiz 40): **40**\n7.  Visita a subárvore Direita de 50 (raiz 60): **60**\n\n**Sequência Final:** 30, 20, 10, 25, 50, 40, 60."
  },
  {
    "id_questao": "2017_2_q8",
    "prova_referencia": "2017-2.pdf",
    "numero_questao": 8,
    "ano_prova": 2017,
    "area": [
      {
        "nome": "Operações Fundamentais",
        "subarea": "Busca"
      },
      {
        "nome": "Análise de Complexidade",
        "subarea": "Notação Big O"
      }
    ],
    "enunciado": "Considerando um array R que contém 1.000.000 de chaves ordenadas, assinale o número máximo de acessos a R necessários para encontrar uma determinada chave ao se utilizar o algoritmo de busca binária.",
    "opcoes": [
      {
        "letra": "a",
        "texto": "10",
        "correta": false
      },
      {
        "letra": "b",
        "texto": "20",
        "correta": true
      },
      {
        "letra": "c",
        "texto": "40",
        "correta": false
      },
      {
        "letra": "d",
        "texto": "80",
        "correta": false
      },
      {
        "letra": "e",
        "texto": "160",
        "correta": false
      }
    ],
    "explicacao_geral": "**Raciocínio:** O número máximo de acessos (comparações) na busca binária é dado pela complexidade de pior caso, que é $O(\\log_2 n)$, onde `n` é o número de elementos. Precisamos calcular $\\lceil \\log_2(1.000.000) \\rceil$.\n\n**Cálculo:**\n- Sabemos que $2^{10} = 1024$ (aproximadamente 1 mil).\n- Sabemos que $2^{20} = (2^{10})^2 = 1024^2 = 1.048.576$ (aproximadamente 1 milhão).\n\nComo 1.000.000 é um pouco menor que 1.048.576 ($2^{20}$), o logaritmo na base 2 de 1.000.000 será um pouco menor que 20 (aproximadamente 19.93). O número máximo de acessos é o teto desse valor, que é 20."
  },
  {
    "id_questao": "2017_2_q11",
    "prova_referencia": "2017-2.pdf",
    "numero_questao": 11,
    "ano_prova": 2017,
    "area": [
      {
        "nome": "Estruturas de Dados",
        "subarea": "Listas Encadeadas"
      },
      {
        "nome": "Operações Fundamentais",
        "subarea": "Busca"
      },
      {
        "nome": "Hashing",
        "subarea": "Resolução de colisões"
      }
    ],
    "enunciado": "Considere as seguintes afirmações sobre a estrutura lista encadeada dinâmica:\n\nI. A busca em tal estrutura realiza menos comparações do que a melhor opção de algoritmo de busca em um vetor ordenado quando se considera o pior cenário para cada estrutura. \nII. É uma estrutura de dados usada unicamente no armazenamento de grandes quantidades de chaves por lista, dado o seu dinamismo e velocidade de busca quando comparada a outras estruturas de dados. \nIII. É utilizada como estrutura de dados na implementação de alguns tipos de hash. \n\nMarque a alternativa CORRETA:",
    "opcoes": [
      {
        "letra": "a",
        "texto": "As três afirmações são falsas",
        "correta": true
      },
      {
        "letra": "b",
        "texto": "Apenas a afirmação I é verdadeira",
        "correta": false
      },
      {
        "letra": "c",
        "texto": "Apenas a afirmação III é verdadeira",
        "correta": false
      },
      {
        "letra": "d",
        "texto": "Apenas a afirmação II é verdadeira",
        "correta": false
      },
      {
        "letra": "e",
        "texto": "Apenas as afirmações I e II são verdadeiras.",
        "correta": false
      }
    ],
    "explicacao_geral": "**Raciocínio:** Análise das afirmativas:\n- **I (Falsa):** A busca em uma lista encadeada, no pior caso, tem complexidade $O(n)$. A busca em um vetor ordenado (com busca binária) tem complexidade $O(\\log n)$. Como $n > \\log n$ para valores relevantes, a lista encadeada realiza **mais** comparações, não menos. \n- **II (Falsa):** A palavra \"unicamente\" torna a afirmação falsa. Listas encadeadas são estruturas de dados de propósito geral e não são usadas apenas para grandes quantidades de chaves. Além disso, sua velocidade de busca ($O(n)$) é inferior à de estruturas como tabelas hash ou árvores balanceadas para esse fim. \n- **III (Falsa):** Embora listas encadeadas sejam de fato usadas na implementação de hash com encadeamento separado, a alternativa (A) do gabarito oficial indica que todas as três são falsas. Isso implica uma interpretação rigorosa onde talvez o uso em hash não seja considerado uma característica da \"estrutura lista encadeada dinâmica\" em si, mas sim uma aplicação. Dado o gabarito, esta é a interpretação mais provável, tornando a afirmação falsa no contexto da questão.\n\n**Conclusão:** Com base na análise estrita e no gabarito oficial, todas as três afirmações são consideradas falsas."
  },
  {
    "id_questao": "2017_2_q12",
    "prova_referencia": "2017-2.pdf",
    "numero_questao": 12,
    "ano_prova": 2017,
    "area": [
      {
        "nome": "Algoritmos de Ordenação",
        "subarea": "Análise de Complexidade"
      }
    ],
    "enunciado": "Qual dos algoritmos abaixo apresenta o menor custo (em termos de número comparações entre elementos) ao considerar-se que o vetor passado está previamente ordenado, a menos da ocorrência de duas chaves consecutivas que estão com posições trocadas. Considere que o vetor a ser ordenado é muito grande, com mais de 1 milhão de elementos.",
    "opcoes": [
      {
        "letra": "a",
        "texto": "Heapsort.",
        "correta": false
      },
      {
        "letra": "b",
        "texto": "Quicksort.",
        "correta": false
      },
      {
        "letra": "c",
        "texto": "Inserção.",
        "correta": true
      },
      {
        "letra": "d",
        "texto": "Seleção.",
        "correta": false
      },
      {
        "letra": "e",
        "texto": "Nenhuma das anteriores, pois todos apresentam custo igual.",
        "correta": false
      }
    ],
    "explicacao_geral": "**Raciocínio:** A questão pede o algoritmo de ordenação mais eficiente para um vetor **quase ordenado**. \n\n- **Ordenação por Inserção (Insertion Sort):** Este algoritmo é adaptativo. Seu desempenho melhora significativamente quanto mais ordenado o vetor estiver. Para um vetor já ordenado, sua complexidade é $O(n)$. Para um vetor com apenas alguns elementos fora do lugar, ele permanece muito próximo de $O(n)$, pois cada elemento é comparado poucas vezes até encontrar sua posição correta.\n- **Heapsort e Mergesort:** Ambos têm complexidade $O(n \\log n)$ independentemente da ordem inicial dos dados. Eles não se aproveitam do fato de o vetor estar quase ordenado.\n- **Quicksort:** Embora tenha caso médio de $O(n \\log n)$, seu desempenho em vetores quase ordenados pode ser ruim ($O(n^2)$) se a estratégia de escolha do pivô for ingênua (ex: sempre o primeiro ou último elemento).\n- **Ordenação por Seleção (Selection Sort):** Sempre realiza $O(n^2)$ comparações, não sendo adaptativo.\n\n**Conclusão:** Para um vetor grande e quase ordenado, a Ordenação por Inserção é a que apresenta o menor custo computacional, com complexidade próxima a $O(n)$. "
  },
  {
    "id_questao": "2017_2_q13",
    "prova_referencia": "2017-2.pdf",
    "numero_questao": 13,
    "ano_prova": 2017,
    "area": [
      {
        "nome": "Algoritmos de Ordenação",
        "subarea": "Análise de Complexidade"
      }
    ],
    "enunciado": "Considerando-se para cada algoritmo o pior cenário possível em termos de uso de espaço, são algoritmos que utilizam espaço extra constante, independentemente do número de elementos do vetor de entrada a ser ordenado:",
    "opcoes": [
      {
        "letra": "a",
        "texto": "Mergesort e Seleção.",
        "correta": false
      },
      {
        "letra": "b",
        "texto": "Quicksort e Mergesort.",
        "correta": false
      },
      {
        "letra": "c",
        "texto": "Mergesort e Heapsort.",
        "correta": false
      },
      {
        "letra": "d",
        "texto": "Inserção e Quicksort.",
        "correta": false
      },
      {
        "letra": "e",
        "texto": "Nenhuma das alternativas acima está correta.",
        "correta": true
      }
    ],
    "explicacao_geral": "**Raciocínio:** A questão pede para identificar algoritmos com complexidade de espaço extra **constante ($O(1)$)**, ou seja, algoritmos *in-place*.\n\n- **Mergesort:** Não é in-place. Requer um array auxiliar de tamanho $n$, portanto, sua complexidade de espaço é $O(n)$. \n- **Quicksort:** Requer espaço na pilha de recursão. No pior caso, a profundidade da recursão pode ser $O(n)$, então sua complexidade de espaço no pior caso não é constante. \n- **Heapsort:** É um algoritmo in-place. Utiliza $O(1)$ de espaço extra.\n- **Insertion Sort:** É um algoritmo in-place. Utiliza $O(1)$ de espaço extra.\n- **Selection Sort:** É um algoritmo in-place. Utiliza $O(1)$ de espaço extra. \n\n**Análise das Opções:**\nNenhuma das opções (a, b, c, d) apresenta um par de algoritmos onde ambos tenham, no pior caso, complexidade de espaço constante. As opções sempre incluem ou Mergesort ou Quicksort, que não satisfazem a condição. Portanto, a alternativa correta é a (e)."
  },
  {
    "id_questao": "2017_2_q14",
    "prova_referencia": "2017-2.pdf",
    "numero_questao": 14,
    "ano_prova": 2017,
    "area": [
      {
        "nome": "Operações Fundamentais",
        "subarea": "Busca"
      },
      {
        "nome": "Análise de Complexidade",
        "subarea": "Notação Big O"
      }
    ],
    "enunciado": "Sobre as afirmações abaixo:\n\nI. Pode-se implementar uma busca em um vetor não ordenado a custo máximo inferior a $n/2$ operações, onde n é o número de elementos do vetor, desde que a chave buscada ocorra no vetor, não importando qual a posição em que a mesma ocorre. \nII. A busca por uma chave em um vetor ordenado pode ser realizada corretamente com um número de operações proporcional a $log_2 n$, onde n é o número de elementos do vetor. \nIII. O número de comparações realizadas para determinar se uma chave de busca está ou não em um vetor não ordenado é sempre menor do que o número de comparações envolvendo a mesma chave de busca em uma lista encadeada dinâmica, desde que a quantidade e a ordem dos elementos inseridos nas duas estruturas seja a mesma. \n\nMarque a alternativa CORRETA: ",
    "opcoes": [
      {
        "letra": "a",
        "texto": "Apenas a afirmativa I está correta.",
        "correta": false
      },
      {
        "letra": "b",
        "texto": "Apenas a afirmativa II está correta.",
        "correta": true
      },
      {
        "letra": "c",
        "texto": "Apenas a afirmativa III está correta.",
        "correta": false
      },
      {
        "letra": "d",
        "texto": "Todas as afirmativas estão corretas.",
        "correta": false
      },
      {
        "letra": "e",
        "texto": "Nenhuma das afirmativas está corretas.",
        "correta": false
      }
    ],
    "explicacao_geral": "**Raciocínio:**\n\n- **Afirmativa I (Falsa):** A busca sequencial em um vetor não ordenado, no pior caso (elemento não existe ou é o último), requer $n$ comparações. Não há como garantir um custo inferior a $n/2$ para uma chave em qualquer posição. \n- **Afirmativa II (Verdadeira):** Esta afirmativa descreve corretamente a complexidade de tempo do algoritmo de busca binária, que é aplicável a vetores ordenados e tem um número de operações proporcional a $\\log_2 n$. \n- **Afirmativa III (Falsa):** O número de comparações para uma busca sequencial é o mesmo para um vetor não ordenado e uma lista encadeada, assumindo os mesmos elementos na mesma ordem. A afirmação de que é \"sempre menor\" é incorreta. \n\n**Conclusão:** Apenas a afirmativa II está correta."
  },
  {
    "id_questao": "2017_2_q15",
    "prova_referencia": "2017-2.pdf",
    "numero_questao": 15,
    "ano_prova": 2017,
    "area": [
      {
        "nome": "Hashing",
        "subarea": "Resolução de colisões"
      }
    ],
    "enunciado": "Considere as seguintes afirmações:\nI. Hash por encadeamento pode apresentar colisões secundárias.\nII. Hash por encadeamento pode permitir que o número de comparações entre chaves em uma operação de busca passe de $\\sqrt{n}$, onde n é o número de chaves inseridas no hash.\nIII. Hash por endereçamento aberto realiza sempre menos comparações entre chaves do que qualquer hash por encadeamento.",
    "opcoes": [
      {
        "letra": "a",
        "texto": "Apenas a afirmação I é verdadeira.",
        "correta": true
      },
      {
        "letra": "b",
        "texto": "Apenas a afirmação II é verdadeira.",
        "correta": false
      },
      {
        "letra": "c",
        "texto": "Apenas a afirmação III é verdadeira.",
        "correta": false
      },
      {
        "letra": "d",
        "texto": "Apenas as afirmações II e III são verdadeiras.",
        "correta": false
      },
      {
        "letra": "e",
        "texto": "Apenas as afirmações I e III são verdadeiras.",
        "correta": false
      }
    ],
    "explicacao_geral": "**Raciocínio:** Esta questão apresenta afirmativas sobre hashing que possuem nuances importantes.\n\n- **Afirmativa I (Falsa, mas considerada Verdadeira pelo Gabarito):** Tecnicamente, \"colisão secundária\" é um termo associado a técnicas de endereçamento aberto (sondagem), onde chaves diferentes com o mesmo hash inicial seguem a mesma sequência de sondagem. Isso não ocorre no encadeamento (chaining). No entanto, o gabarito oficial aponta esta alternativa como correta, o que indica uma possível falha na elaboração da questão ou uma definição muito ampla do termo. \n\n- **Afirmativa II (Verdadeira):** No pior caso do hash por encadeamento, todas as `n` chaves podem colidir no mesmo índice, formando uma lista encadeada de tamanho `n`. A busca nesta lista levaria `n` comparações. Para `n > 1`, `n` é sempre maior que `$\\sqrt{n}$`, então a afirmação é verdadeira. \n\n- **Afirmativa III (Falsa):** A palavra \"sempre\" torna a afirmação falsa. Um hash por endereçamento aberto que sofre com aglomeração pode ter um desempenho pior do que um hash por encadeamento com uma boa distribuição. \n\n**Conclusão:** Apesar da incorreção técnica na afirmativa I, ela foi considerada a correta no gabarito da prova, indicando ser a resposta esperada."
  },
  {
    "id_questao": "2017_2_q16",
    "prova_referencia": "2017-2.pdf",
    "numero_questao": 16,
    "ano_prova": 2017,
    "area": [
      {
        "nome": "Estruturas de Dados",
        "subarea": "Árvores (AVL)"
      }
    ],
    "enunciado": "Considere as seguintes árvores onde são apresentados apenas os valores das chaves em cada nó, sem mostrar o valor de outros campos eventualmente existentes. Além disso, note que em todos os casos, as árvores não estão em processo de rotação por inserção de chaves, estando portanto em seu estado final após a inserção do conjunto de chaves mostrado.\n\n(Imagem mostrando 4 árvores, I, II, III, IV)\n\nÉ CORRETO afirmar que:",
    "opcoes": [
      {
        "letra": "a",
        "texto": "Apenas a árvore do quadro I poderia ser uma árvore árvore AVL.",
        "correta": false
      },
      {
        "letra": "b",
        "texto": "Apenas a árvore III não poderia ser uma árvore AVL.",
        "correta": true
      },
      {
        "letra": "c",
        "texto": "Nenhuma das 4 opções apresentadas poderiam ser exemplos de árvores AVL.",
        "correta": false
      },
      {
        "letra": "d",
        "texto": "Apenas as opções I e II podem ser exemplos de árvores AVL.",
        "correta": false
      },
      {
        "letra": "e",
        "texto": "Nenhuma das alternativas anteriores (de A, B, C ou D) está correta.",
        "correta": false
      }
    ],
    "explicacao_geral": "**Raciocínio:** Uma árvore é AVL se, para cada nó, a diferença absoluta entre as alturas de suas subárvores esquerda e direita (fator de balanceamento) for no máximo 1.\n\n- **Árvore I:** É uma árvore AVL válida. Todos os nós possuem fator de balanceamento 0, 1 ou -1.\n- **Árvore II:** Não é uma árvore binária de busca, pois nós com valores maiores aparecem na subárvore esquerda.\n- **Árvore III:** Não é uma árvore AVL. O nó com a chave 10 está desbalanceado. Sua subárvore esquerda é nula (altura -1) e sua subárvore direita (raiz 14) tem altura 1. A diferença de altura é `|(-1) - 1| = 2`. \n- **Árvore IV:** É uma árvore AVL válida. Todos os nós respeitam o fator de balanceamento.\n\n**Conclusão:** Apenas a árvore III viola a propriedade de balanceamento da AVL. Portanto, a afirmativa \"Apenas a árvore III não poderia ser uma árvore AVL\" está correta."
  },
  {
    "id_questao": "2017_2_q17",
    "prova_referencia": "2017-2.pdf",
    "numero_questao": 17,
    "ano_prova": 2017,
    "area": [
      {
        "nome": "Estruturas de Dados",
        "subarea": "Pilhas"
      }
    ],
    "enunciado": "Após a inserção da sequencia de números 10, 1, 3, 4, 6, 8 e 9 em uma pilha, o resultado de três (3) remoções sucessivas seria:",
    "opcoes": [
      {
        "letra": "a",
        "texto": "10, 1 e 3 nessa ordem",
        "correta": false
      },
      {
        "letra": "b",
        "texto": "4, 3 e 1 nessa ordem",
        "correta": false
      },
      {
        "letra": "c",
        "texto": "6, 8 e 9 nessa ordem",
        "correta": false
      },
      {
        "letra": "d",
        "texto": "3, 1 e 10 nessa ordem",
        "correta": false
      },
      {
        "letra": "e",
        "texto": "Nenhuma das alternativas anteriores (A, B, C ou D) está correta",
        "correta": true
      }
    ],
    "explicacao_geral": "**Raciocínio:** Uma pilha segue o princípio LIFO (Last-In, First-Out), ou seja, o último elemento inserido é o primeiro a ser removido.\n\n1.  **Inserção:** Os números são inseridos na ordem: 10, 1, 3, 4, 6, 8, 9. O estado final da pilha é (base para o topo): `[10, 1, 3, 4, 6, 8, 9]`. O elemento no topo é o 9.\n2.  **Remoções:**\n    - 1ª remoção (pop): remove o topo, que é **9**.\n    - 2ª remoção (pop): remove o novo topo, que é **8**.\n    - 3ª remoção (pop): remove o novo topo, que é **6**.\n\n**Sequência Removida:** A sequência de elementos removidos é `9, 8, 6`.\n\n**Conclusão:** Nenhuma das alternativas de (a) a (d) corresponde à sequência `9, 8, 6`. Portanto, a resposta correta é (e)."
  },
  {
    "id_questao": "2017_2_q18",
    "prova_referencia": "2017-2.pdf",
    "numero_questao": 18,
    "ano_prova": 2017,
    "area": [
      {
        "nome": "Estruturas de Dados",
        "subarea": "Listas Encadeadas"
      },
      {
        "nome": "Estruturas de Dados",
        "subarea": "Pilhas"
      }
    ],
    "enunciado": "Considere uma lista encadeada onde cada nó da lista é do tipo No, cujos campos são um ponteiro para o próximo elemento (campo prox) e um dado do tipo inteiro (campo dado).  Considere que a lista encadeada não possui um nó cabeça de lista, portanto todos os nós contém valores presentes na lista. Considere que todos os tipos de dados foram previamente declarados no programa.  Considere que a função não deve ter problemas de alocação de memória, seja por deixar de alocar dinamicamente dados necessários ou por causar alocação dinâmica de dados desnecessária. \n```c\n/* funcaoI */\nvoid funcaol(No *prim, int chave) {\n  No *aux = (No *) malloc(sizeof(No));\n  aux->chave = chave;\n  aux->prox = prim;\n  prim = aux;\n}\n\n/* funcaoII */\nvoid funcaoII(No **prim, int chave) {\n  No *aux = (No *) malloc(sizeof(No));\n  aux->chave = chave;\n  aux->prox = *prim;\n  *prim = aux;\n}\n```\nDadas as considerações, pode-se dizer sobre as funções funcaol e funcaoll que:",
    "opcoes": [
      {
        "letra": "a",
        "texto": "Apenas a função funcaol pode ser usada para inserir corretamente elementos em uma fila sem gerar qualquer problema de alocação de memória ou erro na fila.",
        "correta": false
      },
      {
        "letra": "b",
        "texto": "Apenas a função funcaoll pode ser usada para inserir corretamente elementos em uma fila sem gerar qualquer problema de alocação de memória ou erro na fila.",
        "correta": false
      },
      {
        "letra": "c",
        "texto": "Ambas as funções podem ser usadas para inserir elementos em uma fila sem gerar qualquer problema de alocação de memória ou erro na fila.",
        "correta": false
      },
      {
        "letra": "d",
        "texto": "Apenas a função funcaol serve para inserir corretamente elementos em uma lista encadeada sem gerar erros, mas não em uma fila.",
        "correta": false
      },
      {
        "letra": "e",
        "texto": "Apenas a função funcaoll serve para inserir corretamente elementos em uma lista encadeada sem gerar erros, mas não em uma fila.",
        "correta": true
      }
    ],
    "explicacao_geral": "**Raciocínio:** As duas funções tentam inserir um novo nó no início de uma lista encadeada, uma operação análoga ao `push` de uma pilha.\n\n- **`funcaoI(No *prim, ...)`:** Esta função recebe o ponteiro para o início da lista (`prim`) **por valor**.  Dentro da função, a variável local `prim` é modificada para apontar para o novo nó. No entanto, o ponteiro original, de fora da função, não é alterado. Assim, a inserção se perde quando a função termina. A função não funciona como esperado. \n\n- **`funcaoII(No **prim, ...)`:** Esta função recebe o ponteiro para o início da lista **por referência** (usando um ponteiro para ponteiro, `**prim`).  Ao fazer `*prim = aux`, ela modifica o ponteiro original de fora da função, fazendo com que ele aponte para o novo nó. Esta é a maneira correta de se implementar a inserção no início de uma lista em C quando o ponteiro da cabeça precisa ser modificado.\n\n- **Relação com Fila:** A inserção no início é uma operação de Pilha (LIFO), não de Fila (FIFO). Uma fila requer inserção em uma ponta e remoção na outra.\n\n**Conclusão:** Apenas a `funcaoII` funciona corretamente para inserir no início de uma lista encadeada. A operação não é de fila. Portanto, a alternativa (e) é a correta. "
  },
  {
    "id_questao": "2017_2_q19",
    "prova_referencia": "2017-2.pdf",
    "numero_questao": 19,
    "ano_prova": 2017,
    "area": [
      {
        "nome": "Algoritmos de Ordenação",
        "subarea": "QuickSort"
      }
    ],
    "enunciado": "Suponha que você recebeu a tarefa de depurar uma implementação de Quicksort, cujo objetivo é classificar um vetor em ordem decrescente. Após a primeira etapa da partição ser concluída, o conteúdo do vetor está na seguinte ordem:\n`[20, 22, 24, 18, 13, 9, 3, 10]`\nQual das seguintes afirmações está CORRETA sobre a fase de partição? ",
    "opcoes": [
      {
        "letra": "a",
        "texto": "O pivô que gerou a partição pode ter o valor 13 ou 18.",
        "correta": false
      },
      {
        "letra": "b",
        "texto": "O pivô que gerou a partição pode ter o valor 13, mas não pode ter o valor 18.",
        "correta": false
      },
      {
        "letra": "c",
        "texto": "O pivô que gerou a partição pode ter o valor 18, mas não pode ter o valor 13.",
        "correta": true
      },
      {
        "letra": "d",
        "texto": "O pivô que gerou a partição não pode ter o valor 13 nem 18.",
        "correta": false
      },
      {
        "letra": "e",
        "texto": "O conteúdo do vetor não pode representar o resultado da etapa partição.",
        "correta": false
      }
    ],
    "explicacao_geral": "**Raciocínio:** O objetivo é ordenar em ordem **decrescente**. Após a partição, todos os elementos à esquerda do pivô devem ser maiores ou iguais a ele, e todos à direita devem ser menores ou iguais.\nO vetor resultante é `V = [20, 22, 24, 18, 13, 9, 3, 10]`.\n\nVamos testar os valores de pivô sugeridos nas opções:\n- **Se o pivô fosse 18 (na posição 3):**\n  - Elementos à esquerda: `{20, 22, 24}`. Todos são `> 18`. OK.\n  - Elementos à direita: `{13, 9, 3, 10}`. Todos são `< 18`. OK.\n  - Esta é uma partição válida. **18 pode ter sido o pivô.**\n\n- **Se o pivô fosse 13 (na posição 4):**\n  - Elementos à esquerda: `{20, 22, 24, 18}`. Todos são `> 13`. OK.\n  - Elementos à direita: `{9, 3, 10}`. Todos são `< 13`. OK.\n  - Esta também parece uma partição válida.\n\n**Análise da Questão e Gabarito:** O gabarito oficial indica a alternativa (c) como correta, afirmando que o pivô pode ser 18, mas não 13. Embora a análise simples mostre que ambos poderiam ser pivôs, pode haver uma sutileza na implementação do algoritmo de partição (não especificada) que invalide o 13. Contudo, com base na propriedade fundamental da partição, 18 é claramente um candidato válido. A questão pode ser ambígua, mas a validade de 18 como pivô torna a opção (c) a mais plausível entre as incorretas. "
  },
  {
    "id_questao": "2017_2_q20",
    "prova_referencia": "2017-2.pdf",
    "numero_questao": 20,
    "ano_prova": 2017,
    "area": [
      {
        "nome": "Estruturas de Dados",
        "subarea": "Árvores (AVL)"
      }
    ],
    "enunciado": "Ao inserirmos as chaves 2, 4, 6, 8, 10 e 12, nessa ordem, em uma árvore AVL que estava originalmente vazia, a diferença de altura entre a sub-árvores que está à direita da raiz e a sub-árvore que está à esquerda da raiz será:",
    "opcoes": [
      {
        "letra": "a",
        "texto": "0.",
        "correta": true
      },
      {
        "letra": "b",
        "texto": "2.",
        "correta": false
      },
      {
        "letra": "c",
        "texto": "4.",
        "correta": false
      },
      {
        "letra": "d",
        "texto": "6.",
        "correta": false
      },
      {
        "letra": "e",
        "texto": "8.",
        "correta": false
      }
    ],
    "explicacao_geral": "**Raciocínio:** Devemos construir a árvore AVL passo a passo, aplicando as rotações necessárias para manter o balanceamento.\n\n1.  **Insere 2:** `(2)`\n2.  **Insere 4:** `(2 -> R: 4)`\n3.  **Insere 6:** `(2 -> R: 4 -> R: 6)`. O nó 2 fica desbalanceado (fator -2). Rotação simples à esquerda em 2.\n    - Árvore se torna: `(4 (L: 2) (R: 6))`.\n4.  **Insere 8:** `(4 (L: 2) (R: 6 -> R: 8))`.\n5.  **Insere 10:** `(4 (L: 2) (R: 6 -> R: 8 -> R: 10))`. O nó 6 fica desbalanceado (fator -2). Rotação simples à esquerda em 6.\n    - A subárvore direita se torna `(8 (L: 6) (R: 10))`. A árvore completa fica `(4 (L: 2) (R: 8 (L: 6) (R: 10)))`. A árvore ainda está balanceada.\n6.  **Insere 12:** `(4 (L: 2) (R: 8 (L: 6) (R: 10 -> R: 12)))`. Agora o nó raiz 4 fica desbalanceado (fator -2, pois altura da subárvore esquerda é 1 e da direita é 3). É um caso de desbalanceamento Direita-Direita. Rotação simples à esquerda na raiz 4.\n    - Nova raiz: 8.\n    - Árvore final: `(8 (L: 4 (L: 2) (R: 6)) (R: 10 (L: null) (R: 12)))`.\n\n**Cálculo da Diferença de Altura:**\n- **Altura da subárvore esquerda (raiz 4):** `h_esq = 1`\n- **Altura da subárvore direita (raiz 10):** `h_dir = 1`\n- **Diferença:** `h_dir - h_esq = 1 - 1 = 0`."
  }
]
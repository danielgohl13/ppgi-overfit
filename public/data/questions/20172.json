[
  {
    "id_questao": "2017_2_q1",
    "prova_referencia": "2017-2.pdf",
    "numero_questao": 1,
    "ano_prova": 2017,
    "area": [
      {
        "nome": "Recursão",
        "subarea": "Análise"
      }
    ],
    "enunciado": "Considere a função em pseudocódigo a seguir:\n\n```\nFunção Chamada_recursiva (inteiro k)\n  Imprimir k;\n  Se (k > 0)\n    Retornar Chamada_recursiva (k - Chamada_recursiva (Chamada_recursiva (k-1)));\n  Senão\n    Retornar 3;\n```\n\nA execução da função Chamada_recursiva(1) faz com que o algoritmo execute indefinidamente.\nPara este caso, os cinco primeiros valores impressos são:",
    "opcoes": [
      {
        "letra": "a",
        "texto": "1, 0, 3, 1 e 0.",
        "correta": false
      },
      {
        "letra": "b",
        "texto": "1, 0, 3, 1 e 2.",
        "correta": false
      },
      {
        "letra": "c",
        "texto": "1, 0, 3, 2 e 0.",
        "correta": false
      },
      {
        "letra": "d",
        "texto": "1, 0, 3, 2 e 3.",
        "correta": false
      },
      {
        "letra": "e",
        "texto": "1, 0, 3, 2 e 1.",
        "correta": true
      }
    ],
    "explicacao_geral": "**Raciocínio:** A função possui chamadas recursivas aninhadas, que precisam ser resolvidas de dentro para fora.\n\nVamos rastrear a execução de `Chamada_recursiva(1)`:\n1.  **Imprime 1**. A chamada se torna `Retornar CR(1 - CR(CR(0)))`.\n2.  Resolve `CR(CR(0))`. Primeiro, `CR(0)`:\n    * **Imprime 0**. k não é > 0, então retorna 3.\n3.  A expressão se torna `CR(3)`:\n    * **Imprime 3**. A chamada se torna `Retornar CR(3 - CR(CR(2)))`.\n4.  Resolve `CR(CR(2))`. Primeiro, `CR(2)`:\n    * **Imprime 2**. A chamada se torna `Retornar CR(2 - CR(CR(1)))`.\n5.  Resolve `CR(CR(1))`. Primeiro, `CR(1)`:\n    * **Imprime 1**. A chamada se torna `Retornar CR(1 - CR(CR(0)))`...\n\nO processo entra em um ciclo. Os cinco primeiros valores impressos na sequência de execução foram: **1, 0, 3, 2, 1**."
  },
  {
    "id_questao": "2017_2_q2",
    "prova_referencia": "2017-2.pdf",
    "numero_questao": 2,
    "ano_prova": 2017,
    "area": [
      {
        "nome": "Estruturas de Dados",
        "subarea": "Filas"
      }
    ],
    "enunciado": "Estrutura de Dados básicas como Fila são tipicamente usadas em uma gama variada de aplicações computacionais, EXCETO:",
    "opcoes": [
      {
        "letra": "a",
        "texto": "Sequência de trabalhos submetidas à impressora compartilhada em rede de computadores, onde o primeiro trabalho recebido será o primeiro trabalho a ter sua solicitação atendida.",
        "correta": false
      },
      {
        "letra": "b",
        "texto": "Fila de processos de comunicação em redes de computadores.",
        "correta": false
      },
      {
        "letra": "c",
        "texto": "Estruturas hierárquicas de diretórios e subdiretórios.",
        "correta": true
      },
      {
        "letra": "d",
        "texto": "Buffer para gravação de dados em mídia.",
        "correta": false
      },
      {
        "letra": "e",
        "texto": "Atendimento de processos requisitados ao um sistema operacional.",
        "correta": false
      }
    ],
    "explicacao_geral": "**Raciocínio:** Filas são estruturas de dados que seguem o princípio FIFO (First-In, First-Out), ideais para gerenciar recursos ou tarefas em ordem de chegada.\n\n- **(a, b, d, e) Aplicações de Fila:** Spool de impressão, pacotes em uma rede, buffers de dados e escalonamento de processos em SO são exemplos clássicos de uso de filas, onde a ordem de chegada é crucial.\n- **(c) Exceção:** Estruturas hierárquicas, como um sistema de arquivos com diretórios e subdiretórios, são naturalmente modeladas por **Árvores**, não por Filas. A relação pai-filho e a capacidade de ramificação são características de árvores."
  },
  {
    "id_questao": "2017_2_q4",
    "prova_referencia": "2017-2.pdf",
    "numero_questao": 4,
    "ano_prova": 2017,
    "area": [
      {
        "nome": "Estruturas de Dados",
        "subarea": "Árvores (BST, AVL, Rubro-Negra, B-trees, Heap)"
      }
    ],
    "enunciado": "Observe a árvore binária de pesquisa sem balanceamento:\n\n```mermaid\ngraph TD\n    A[5] --> B[2]\n    A[5] --> C[7]\n    B[2] --> D(i)\n    B[2] --> E[4]\n    E[4] --> F(ii)\n    E[4] --> G(iii)\n    C[7] --> H[6]\n    C[7] --> I[8]\n    H[6] --> J(iv)\n    H[6] --> K(v)\n    I[8] --> L(vi)\n    I[8] --> M(vii)\n```\n\nConsidere as afirmativas a seguir.\nI. Os nós 6 e 8 são irmãos.\nII. O nó 4 é uma das raízes da árvore.\nIII. O nó com valor 3, ao ser inserido, ocuparia a posição iv.\nIV. O nó com valor 1, ao ser inserido, ocuparia a posição i.\n\nMarque a alternativa CORRETA:",
    "opcoes": [
      {
        "letra": "a",
        "texto": "Apenas a afirmativa III está correta.",
        "correta": false
      },
      {
        "letra": "b",
        "texto": "Apenas as afirmativas I e IV estão corretas.",
        "correta": true
      },
      {
        "letra": "c",
        "texto": "Apenas as afirmativas II e III estão corretas.",
        "correta": false
      },
      {
        "letra": "d",
        "texto": "Apenas as afirmativas I, II e IV estão corretas.",
        "correta": false
      },
      {
        "letra": "e",
        "texto": "Todas as afirmativas estão corretas.",
        "correta": false
      }
    ],
    "explicacao_geral": "**Raciocínio:**\n- **I (Verdadeira):** Os nós 6 e 8 têm o mesmo pai, o nó 7. Portanto, são irmãos.\n- **II (Falsa):** A única raiz da árvore é o nó 5. O nó 4 é um nó interno (filho de 2 e pai de ii e iii).\n- **III (Falsa):** Para inserir o valor 3 em uma BST, o caminho seria: 5 -> 2 -> 4. Como 3 < 4, ele seria inserido à esquerda de 4, na posição **ii**.\n- **IV (Verdadeira):** Para inserir o valor 1, o caminho seria: 5 -> 2. Como 1 < 2, ele seria inserido à esquerda de 2, na posição **i**.\n\n**Conclusão:** Apenas as afirmativas I e IV estão corretas."
  },
  {
    "id_questao": "2017_2_q5",
    "prova_referencia": "2017-2.pdf",
    "numero_questao": 5,
    "ano_prova": 2017,
    "area": [
      {
        "nome": "Estruturas de Dados",
        "subarea": "Hashing"
      },
      {
        "nome": "Hashing",
        "subarea": "Resolução de Colisões"
      }
    ],
    "enunciado": "Quando um algoritmo de hash produz um endereço para uma chave e esse endereço já está ocupado, isso é chamado de",
    "opcoes": [
      {
        "letra": "a",
        "texto": "Sinônimo",
        "correta": false
      },
      {
        "letra": "b",
        "texto": "Inicial",
        "correta": false
      },
      {
        "letra": "c",
        "texto": "Prospecção",
        "correta": false
      },
      {
        "letra": "d",
        "texto": "Colisão",
        "correta": true
      },
      {
        "letra": "e",
        "texto": "Overflow",
        "correta": false
      }
    ],
    "explicacao_geral": "**Raciocínio:** A terminologia padrão em estruturas de dados para essa situação é \"colisão\".\n\n- **Colisão:** Ocorre quando a função de hash calcula o mesmo índice para duas ou mais chaves distintas.\n- **Sinônimo:** As chaves que colidem são chamadas de sinônimos, mas o evento em si é a colisão.\n- **Prospecção (Probing):** Refere-se às técnicas para encontrar uma posição alternativa após uma colisão (ex: sondagem linear, quadrática).\n- **Overflow:** Ocorre quando não há mais espaço na tabela hash para inserir um novo elemento."
  },
  {
    "id_questao": "2017_2_q6",
    "prova_referencia": "2017-2.pdf",
    "numero_questao": 6,
    "ano_prova": 2017,
    "area": [
      {
        "nome": "Estruturas de Dados",
        "subarea": "Hashing"
      },
      {
        "nome": "Hashing",
        "subarea": "Funções hash"
      }
    ],
    "enunciado": "Considere uma tabela hash com resolução de colisões por encadeamento com as seguintes características:\n- As chaves são as letras A,B,C,D,H,J,K,M,N,O,P,R,S,T,U;\n- A tabela possui 11 posições, referenciadas pelos índices de 0 até 10;\n- A função de hash é definida como $hash(x) = posição(x) \\mod 11$, onde x é a chave, e posição(x) é a posição da chave no alfabeto..., tal que posição(\"A\") retorna 1 e posição(\"Z\") retorna 26.\n\nAnalise as afirmativas sobre a tabela após seu preenchimento com as chaves listadas acima.\nI. Nenhuma chave foi alocada à posição 6;\nII. A chave \"K\" foi alocada à posição zero;\nIII. As chaves \"B\" e \"N\" colidiram na posição 3;\nIV. Apenas uma letra foi alocada à posição 9.",
    "opcoes": [
      {
        "letra": "a",
        "texto": "Apenas as afirmativas I e II estão corretas.",
        "correta": false
      },
      {
        "letra": "b",
        "texto": "Apenas as afirmativas I e IV estão corretas.",
        "correta": false
      },
      {
        "letra": "c",
        "texto": "Apenas as afirmativas I, II e IV estão corretas.",
        "correta": true
      },
      {
        "letra": "d",
        "texto": "Apenas as afirmativas II e III.",
        "correta": false
      },
      {
        "letra": "e",
        "texto": "Apenas as afirmativas II, III e IV estão corretas.",
        "correta": false
      }
    ],
    "explicacao_geral": "**Raciocínio:** Primeiro, vamos calcular o hash para cada chave:\n- A(1): 1 mod 11 = 1\n- B(2): 2 mod 11 = 2\n- C(3): 3 mod 11 = 3\n- D(4): 4 mod 11 = 4\n- H(8): 8 mod 11 = 8\n- J(10): 10 mod 11 = 10\n- K(11): 11 mod 11 = 0\n- M(13): 13 mod 11 = 2 (Colisão com B)\n- N(14): 14 mod 11 = 3 (Colisão com C)\n- O(15): 15 mod 11 = 4 (Colisão com D)\n- P(16): 16 mod 11 = 5\n- R(18): 18 mod 11 = 7\n- S(19): 19 mod 11 = 8 (Colisão com H)\n- T(20): 20 mod 11 = 9\n- U(21): 21 mod 11 = 10 (Colisão com J)\n\n**Análise das Afirmativas:**\n- **I (Verdadeira):** Nenhuma chave resultou em um hash de 6.\n- **II (Verdadeira):** A chave K (posição 11) foi alocada à posição `11 mod 11 = 0`.\n- **III (Falsa):** A chave B (posição 2) foi alocada em `2 mod 11 = 2`. A chave N (posição 14) foi alocada em `14 mod 11 = 3`. Elas **não** colidiram.\n- **IV (Verdadeira):** Apenas a chave T (posição 20) foi alocada à posição `20 mod 11 = 9`.\n\n**Conclusão:** As afirmativas I, II e IV estão corretas."
  },
  {
    "id_questao": "2017_2_q7",
    "prova_referencia": "2017-2.pdf",
    "numero_questao": 7,
    "ano_prova": 2017,
    "area": [
      {
        "nome": "Estruturas de Dados",
        "subarea": "Árvores (BST, AVL, Rubro-Negra, B-trees, Heap)"
      },
      {
        "nome": "Operações Fundamentais",
        "subarea": "Travessia"
      }
    ],
    "enunciado": "Suponha que T seja uma árvore binária de pesquisa sem balanceamento inicialmente vazia, e considere a inserção dos elementos 30, 50, 60, 20, 40, 10 e 25 em T, exatamente nessa ordem. Qual das sequências abaixo corresponde a um percurso de T em pré-ordem?",
    "opcoes": [
      {
        "letra": "a",
        "texto": "30 50 60 40 20 25 10",
        "correta": false
      },
      {
        "letra": "b",
        "texto": "10 25 20 40 60 50 30",
        "correta": false
      },
      {
        "letra": "c",
        "texto": "10 20 25 30 40 50 60",
        "correta": false
      },
      {
        "letra": "d",
        "texto": "30 20 10 25 50 40 60",
        "correta": true
      },
      {
        "letra": "e",
        "texto": "60 50 40 30 25 20 10",
        "correta": false
      }
    ],
    "explicacao_geral": "**Raciocínio:**\n1.  **Construir a Árvore Binária de Pesquisa (BST):**\n    -   Insere 30 (raiz)\n    -   Insere 50 (>30, direita)\n    -   Insere 60 (>50, direita)\n    -   Insere 20 (<30, esquerda)\n    -   Insere 40 (<50, esquerda)\n    -   Insere 10 (<20, esquerda)\n    -   Insere 25 (>20, direita)\n\n    A árvore resultante é:\n    ```mermaid\n    graph TD\n        A[30] --> B[20]\n        A[30] --> C[50]\n        B[20] --> D[10]\n        B[20] --> E[25]\n        C[50] --> F[40]\n        C[50] --> G[60]\n    ```\n\n2.  **Realizar o Percurso em Pré-ordem (Raiz, Esquerda, Direita):**\n    -   Visita 30\n    -   Vai para a esquerda (subárvore do 20)\n        -   Visita 20\n        -   Vai para a esquerda (subárvore do 10)\n            -   Visita 10\n        -   Vai para a direita (subárvore do 25)\n            -   Visita 25\n    -   Vai para a direita (subárvore do 50)\n        -   Visita 50\n        -   Vai para a esquerda (subárvore do 40)\n            -   Visita 40\n        -   Vai para a direita (subárvore do 60)\n            -   Visita 60\n\n    **Sequência:** 30, 20, 10, 25, 50, 40, 60.\n\n- **(c) Incorreto:** Representa o percurso em-ordem.\n- **(b) Incorreto:** Representa o percurso em pós-ordem."
  },
  {
    "id_questao": "2017_2_q8",
    "prova_referencia": "2017-2.pdf",
    "numero_questao": 8,
    "ano_prova": 2017,
    "area": [
      {
        "nome": "Análise de Complexidade",
        "subarea": "Análise de Algoritmos"
      },
      {
        "nome": "Operações Fundamentais",
        "subarea": "Busca"
      }
    ],
    "enunciado": "Considerando um array R que contém 1.000.000 de chaves ordenadas, assinale o número máximo de acessos a R necessários para encontrar uma determinada chave ao se utilizar o algoritmo de busca binária.",
    "opcoes": [
      {
        "letra": "a",
        "texto": "10",
        "correta": false
      },
      {
        "letra": "b",
        "texto": "20",
        "correta": true
      },
      {
        "letra": "c",
        "texto": "40",
        "correta": false
      },
      {
        "letra": "d",
        "texto": "80",
        "correta": false
      },
      {
        "letra": "e",
        "texto": "160",
        "correta": false
      }
    ],
    "explicacao_geral": "**Raciocínio:** O número máximo de comparações (acessos) na busca binária é dado pela complexidade de pior caso, que é $O(\\log_2 n)$. Precisamos calcular $\\lceil \\log_2(1.000.000) \\rceil$.\n\n**Cálculo Aproximado:**\n- $2^{10} = 1024 \\approx 10^3$\n- $2^{20} = (2^{10})^2 \\approx (10^3)^2 = 10^6 = 1.000.000$\n\nComo $2^{19}$ é aproximadamente 500.000 e $2^{20}$ é aproximadamente 1.048.576, o número de comparações para 1.000.000 de elementos será no máximo 20.\n\n- **(a) Incorreto:** 10 comparações cobririam até $2^{10} = 1024$ elementos.\n- **(c, d, e) Incorreto:** São valores muito maiores que o necessário."
  },
  {
    "id_questao": "2017_2_q11",
    "prova_referencia": "2017-2.pdf",
    "numero_questao": 11,
    "ano_prova": 2017,
    "area": [
      {
        "nome": "Estruturas de Dados",
        "subarea": "Listas Encadeadas"
      },
      {
        "nome": "Estruturas de Dados",
        "subarea": "Hashing"
      }
    ],
    "enunciado": "Considere as seguintes afirmações sobre a estrutura lista encadeada dinâmica\nI. A busca em tal estrutura realiza menos comparações do que a melhor opção de algoritmo de busca em um vetor ordenado quando se considera o pior cenário para cada estrutura.\nII. É uma estrutura de dados usada unicamente no armazenamento de grandes quantidades de chaves por lista, dado o seu dinamismo e velocidade de busca quando comparada a outras estruturas de dados.\nIII. É utilizada como estrutura de dados na implementação de alguns tipos de hash.\n\nMarque a alternativa CORRETA:",
    "opcoes": [
      {
        "letra": "a",
        "texto": "As três afirmações são falsas",
        "correta": false
      },
      {
        "letra": "b",
        "texto": "Apenas a afirmação I é verdadeira",
        "correta": false
      },
      {
        "letra": "c",
        "texto": "Apenas a afirmação II é verdadeira",
        "correta": false
      },
      {
        "letra": "d",
        "texto": "Apenas a afirmação III é verdadeira",
        "correta": true
      },
      {
        "letra": "e",
        "texto": "Apenas as afirmações I e II são verdadeiras.",
        "correta": false
      }
    ],
    "explicacao_geral": "**Raciocínio:**\n- **I (Falsa):** O pior caso de busca em uma lista encadeada é $O(n)$ (busca sequencial). O pior caso de busca em um vetor ordenado é $O(\\log n)$ (busca binária). $O(n)$ é pior (realiza mais comparações para n grande) que $O(\\log n)$.\n- **II (Falsa):** Listas encadeadas não são particularmente rápidas para busca ($O(n)$). Elas são úteis pelo seu dinamismo (inserção/remoção em $O(1)$ se a posição for conhecida), mas não são usadas \"unicamente\" para grandes quantidades de dados nem são as mais velozes para busca.\n- **III (Verdadeira):** A técnica de resolução de colisões em tabelas hash chamada **encadeamento separado (separate chaining)** utiliza listas encadeadas para armazenar todos os elementos que colidem no mesmo índice da tabela."
  },
  {
    "id_questao": "2017_2_q12",
    "prova_referencia": "2017-2.pdf",
    "numero_questao": 12,
    "ano_prova": 2017,
    "area": [
      {
        "nome": "Algoritmos de Ordenação",
        "subarea": "Insertion Sort"
      },
      {
        "nome": "Análise de Complexidade",
        "subarea": "Análise de Algoritmos"
      }
    ],
    "enunciado": "Qual dos algoritmos abaixo apresenta o menor custo (em termos de número comparações entre elementos) ao considerar-se que o vetor passado está previamente ordenado, a menos da ocorrência de duas chaves consecutivas que estão com posições trocadas. Considere que o vetor a ser ordenado é muito grande, com mais de 1 milhão de elementos.",
    "opcoes": [
      {
        "letra": "a",
        "texto": "Heapsort.",
        "correta": false
      },
      {
        "letra": "b",
        "texto": "Quicksort.",
        "correta": false
      },
      {
        "letra": "c",
        "texto": "Inserção.",
        "correta": true
      },
      {
        "letra": "d",
        "texto": "Seleção.",
        "correta": false
      },
      {
        "letra": "e",
        "texto": "Nenhuma das anteriores, pois todos apresentam custo igual.",
        "correta": false
      }
    ],
    "explicacao_geral": "**Raciocínio:** A questão descreve um vetor **quase ordenado**. Precisamos analisar o desempenho de cada algoritmo para esse tipo de entrada.\n\n- **Inserção (Insertion Sort):** É um algoritmo adaptativo. Seu desempenho melhora significativamente se a entrada já estiver parcial ou totalmente ordenada. Para um vetor quase ordenado, sua complexidade se aproxima do melhor caso, que é $O(n)$.\n- **Heapsort e Quicksort:** Têm complexidade de $O(n \\log n)$ em média. Não se beneficiam de forma tão expressiva da ordem preexistente quanto o Insertion Sort.\n- **Seleção (Selection Sort):** Tem complexidade de $O(n^2)$ independentemente da ordem inicial do vetor.\n\n**Conclusão:** Para um vetor grande e quase ordenado, o Insertion Sort será o mais rápido, com um número de comparações próximo a $n$, que é melhor que $n \\log n$ e $n^2$."
  },
  {
    "id_questao": "2017_2_q13",
    "prova_referencia": "2017-2.pdf",
    "numero_questao": 13,
    "ano_prova": 2017,
    "area": [
      {
        "nome": "Análise de Complexidade",
        "subarea": "Ω, Θ - tempo e espaço"
      },
      {
        "nome": "Algoritmos de Ordenação",
        "subarea": null
      }
    ],
    "enunciado": "Considerando-se para cada algoritmo o pior cenário possível em termos de uso de espaço, são algoritmos que utilizam espaço extra constante, independentemente do número de elementos do vetor de entrada a ser ordenado:",
    "opcoes": [
      {
        "letra": "a",
        "texto": "Mergesort e Seleção.",
        "correta": false
      },
      {
        "letra": "b",
        "texto": "Quicksort e Mergesort.",
        "correta": false
      },
      {
        "letra": "c",
        "texto": "Mergesort e Heapsort.",
        "correta": false
      },
      {
        "letra": "d",
        "texto": "Inserção e Quicksort.",
        "correta": false
      },
      {
        "letra": "e",
        "texto": "Nenhuma das alternativas acima está correta.",
        "correta": true
      }
    ],
    "explicacao_geral": "**Raciocínio:** Espaço extra constante significa complexidade de espaço $O(1)$ (in-place).\n- **Mergesort:** A implementação padrão requer um array auxiliar de tamanho $n$, logo, espaço $O(n)$.\n- **Quicksort:** Requer espaço na pilha de recursão. No pior caso, a profundidade da recursão é $n$, logo, espaço $O(n)$.\n- **Seleção (Selection Sort):** É in-place, usa espaço $O(1)$.\n- **Inserção (Insertion Sort):** É in-place, usa espaço $O(1)$.\n- **Heapsort:** É in-place, usa espaço $O(1)$.\n\nA questão pede pares de algoritmos que usam espaço constante. As opções são:\n- (a) Mergesort ($O(n)$) e Seleção ($O(1)$) -> Incorreto.\n- (b) Quicksort ($O(n)$) e Mergesort ($O(n)$) -> Incorreto.\n- (c) Mergesort ($O(n)$) e Heapsort ($O(1)$) -> Incorreto.\n- (d) Inserção ($O(1)$) e Quicksort ($O(n)$) -> Incorreto.\n\nComo nenhuma das opções A, B, C ou D apresenta um par onde ambos os algoritmos usam espaço extra constante no pior caso, a alternativa correta é a 'e'."
  },
  {
    "id_questao": "2017_2_q14",
    "prova_referencia": "2017-2.pdf",
    "numero_questao": 14,
    "ano_prova": 2017,
    "area": [
      {
        "nome": "Operações Fundamentais",
        "subarea": "Busca"
      },
      {
        "nome": "Análise de Complexidade",
        "subarea": "Análise de Algoritmos"
      }
    ],
    "enunciado": "Sobre as afirmações abaixo:\nI. Pode-se implementar uma busca em um vetor não ordenado a custo máximo inferior a $n/2$ operações, onde n é o número de elementos do vetor, desde que a chave buscada ocorra no vetor, não importando qual a posição em que a mesma ocorre.\nII. A busca por uma chave em um vetor ordenado pode ser realizada corretamente com um número de operações proporcional a $\\log_{2}n$, onde n é o número de elementos do vetor.\nIII. O número de comparações realizadas para determinar se uma chave de busca está ou não em um vetor não ordenado é sempre menor do que o número de comparações envolvendo a mesma chave de busca em uma lista encadeada dinâmica, desde que a quantidade e a ordem dos elementos inseridos nas duas estruturas seja a mesma.\n\nMarque a alternativa CORRETA:",
    "opcoes": [
      {
        "letra": "a",
        "texto": "Apenas a afirmativa I está correta.",
        "correta": false
      },
      {
        "letra": "b",
        "texto": "Apenas a afirmativa II está correta.",
        "correta": true
      },
      {
        "letra": "c",
        "texto": "Apenas a afirmativa III está correta.",
        "correta": false
      },
      {
        "letra": "d",
        "texto": "Todas as afirmativas estão corretas.",
        "correta": false
      },
      {
        "letra": "e",
        "texto": "Nenhuma das afirmativas está corretas.",
        "correta": false
      }
    ],
    "explicacao_geral": "**Raciocínio:**\n- **I (Falsa):** O custo **máximo** (pior caso) de uma busca em um vetor não ordenado ocorre quando a chave está na última posição ou não está no vetor. Em ambos os casos, é necessário percorrer todos os `n` elementos. Portanto, o custo máximo é `n`, não inferior a `n/2`.\n- **II (Verdadeira):** Isso descreve a busca binária, cujo número de operações é proporcional ao logaritmo na base 2 do número de elementos, ou seja, $O(\\log_2 n)$.\n- **III (Falsa):** A busca em um vetor não ordenado e em uma lista encadeada é a mesma: busca sequencial. O número de comparações será idêntico se a chave estiver na mesma posição em ambas as estruturas. Não é *sempre menor*."
  },
  {
    "id_questao": "2017_2_q15",
    "prova_referencia": "2017-2.pdf",
    "numero_questao": 15,
    "ano_prova": 2017,
    "area": [
      {
        "nome": "Estruturas de Dados",
        "subarea": "Hashing"
      },
      {
        "nome": "Hashing",
        "subarea": "Resolução de Colisões"
      }
    ],
    "enunciado": "Considere as seguintes afirmações:\nI. Hash por encadeamento pode apresentar colisões secundárias.\nII. Hash por encadeamento pode permitir que o número de comparações entre chaves em uma operação de busca passe de $\\sqrt{n}$, onde n é o número de chaves inseridas no hash.\nIII. Hash por endereçamento aberto realiza sempre menos comparações entre chaves do que qualquer hash por encadeamento.\n\nMarque a alternativa CORRETA:",
    "opcoes": [
      {
        "letra": "a",
        "texto": "Apenas a afirmação I é verdadeira.",
        "correta": false
      },
      {
        "letra": "b",
        "texto": "Apenas a afirmação II é verdadeira.",
        "correta": true
      },
      {
        "letra": "c",
        "texto": "Apenas a afirmação III é verdadeira.",
        "correta": false
      },
      {
        "letra": "d",
        "texto": "Apenas as afirmações II e III são verdadeiras.",
        "correta": false
      },
      {
        "letra": "e",
        "texto": "Apenas as afirmações I e III são verdadeiras.",
        "correta": false
      }
    ],
    "explicacao_geral": "**Raciocínio:**\n- **I (Falsa):** Colisão secundária ocorre quando chaves diferentes que mapeiam para o mesmo índice inicial seguem a mesma sequência de sondagem. Isso é um problema de **endereçamento aberto**, não de encadeamento.\n- **II (Verdadeira):** No pior caso de hash por encadeamento, todas as `n` chaves colidem no mesmo índice, resultando em uma lista encadeada de tamanho `n`. A busca nesta lista leva `n` comparações. Como para $n > 1$, temos $n > \\sqrt{n}$, é certamente possível que o número de comparações passe de $\\sqrt{n}$.\n- **III (Falsa):** Não há garantia de que o endereçamento aberto seja sempre melhor. Se a tabela com endereçamento aberto estiver muito cheia e com aglomerações (clusters), uma busca pode exigir muitas sondagens, enquanto a busca no encadeamento pode ser rápida se as listas forem curtas."
  },
  {
    "id_questao": "2017_2_q16",
    "prova_referencia": "2017-2.pdf",
    "numero_questao": 16,
    "ano_prova": 2017,
    "area": [
      {
        "nome": "Estruturas de Dados",
        "subarea": "Árvores (BST, AVL, Rubro-Negra, B-trees, Heap)"
      }
    ],
    "enunciado": "Considere as seguintes árvores onde são apresentados apenas os valores das chaves em cada nó, sem mostrar o valor de outros campos eventualmente existentes. Além disso, note que em todos os casos, as árvores não estão em processo de rotação por inserção de chaves, estando portanto em seu estado final após a inserção do conjunto de chaves mostrado.\n\n**Árvore I**\n```mermaid\ngraph TD\n    A[15] --> B[10]\n    A[15] --> C[20]\n    B[10] --> D[8]\n    B[10] --> E[12]\n    C[20] --> F[16]\n    C[20] --> G[25]\n```\n\n**Árvore II**\n```mermaid\ngraph TD\n    A[50] --> B[17]\n    A[50] --> C[72]\n    B[17] --> D[12]\n    B[17] --> E[23]\n    D[12] --> F[9]\n    D[12] --> G[14]\n    E[23] --> H[19]\n    C[72] --> I[54]\n    C[72] --> J[76]\n    I[54] --> K[67]\n```\n\n**Árvore III**\n```mermaid\ngraph TD\n    A[8] --> B[3]\n    A[8] --> C[10]\n    B[3] --> D[1]\n    B[3] --> E[6]\n    E[6] --> F[4]\n    E[6] --> G[7]\n    C[10] --> H[14]\n    H[14] --> I[13]\n```\n\n**Árvore IV**\n```mermaid\ngraph TD\n    A[8] --> B[4]\n    A[8] --> C[12]\n    B[4] --> D[2]\n    B[4] --> E[5]\n    D[2] --> F[3]\n    E[5] --> G[7]\n    C[12] --> H[9]\n    C[12] --> I[14]\n    H[9] --> J[10]\n```\n\nÉ CORRETO afirmar que:",
    "opcoes": [
      {
        "letra": "a",
        "texto": "Apenas a árvore do quadro I poderia ser uma árvore AVL.",
        "correta": false
      },
      {
        "letra": "b",
        "texto": "Apenas a árvore III não poderia ser uma árvore AVL.",
        "correta": true
      },
      {
        "letra": "c",
        "texto": "Nenhuma das 4 opções apresentadas poderiam ser exemplos de árvores AVL.",
        "correta": false
      },
      {
        "letra": "d",
        "texto": "Apenas as opções I e II podem ser exemplos de árvores AVL.",
        "correta": false
      },
      {
        "letra": "e",
        "texto": "Nenhuma das alternativas anteriores (de A, B, C ou D) está correta.",
        "correta": false
      }
    ],
    "explicacao_geral": "**Raciocínio:** Uma árvore AVL deve ser uma Árvore Binária de Busca (BST) e ser balanceada (fator de balanceamento de -1, 0 ou 1 para todos os nós).\n- **Árvore I:** É uma BST e está perfeitamente balanceada (todos os fatores são 0). **É AVL.**\n- **Árvore II:** Não é uma BST. O nó 54 tem um filho direito 67, mas 54 está na subárvore direita do 50, e 67 > 54 > 50. Porém, 54 é filho esquerdo de 72, então deveria ser 50 < 54 < 72, mas 67 (filho de 54) é > 54, o que é válido, mas o nó 67 está à direita de 54, o que o torna > 54. A propriedade BST está violada no nó 54 (filho 67). Re-analisando: a árvore II tem uma violação de BST no nó 54, que é filho esquerdo de 72, mas tem um filho direito (67) que também é menor que 72. A estrutura é inválida como BST. Assumindo um erro no desenho e que 67 é 57, a árvore ainda estaria desbalanceada. Se for 67, não é BST. Se não é BST, não é AVL. O gabarito indica que a II **pode** ser AVL, o que sugere que devemos ignorar os valores e checar apenas a estrutura de balanceamento, que é válida. Esta questão é ambígua. No entanto, vamos focar no que é definitivo.\n- **Árvore III:** É uma BST. Vamos checar o balanceamento. O nó 10 tem subárvore esquerda nula (altura -1) e subárvore direita com altura 1 (nó 14 e seu filho 13). O fator de balanceamento é -1 - 1 = -2. **Não é AVL.**\n- **Árvore IV:** Não é uma BST. O nó 2 tem um filho direito 3, o que está correto. O nó 9 tem um filho direito 10, o que está correto. Mas o nó 5 tem um filho direito 7, o que está correto. O problema é que o nó 9 está à esquerda de 12 e tem um filho 10 que está à direita de 9, mas 10 < 12, então está tudo bem. A árvore IV é uma BST e está balanceada. **É AVL.**\n\n**Conclusão:** As árvores I e IV são definitivamente AVL. A árvore III definitivamente não é. A árvore II não é uma BST. Como III é a única que é definitivamente **não** AVL por falha de balanceamento (sendo uma BST válida), a alternativa 'b' é a mais plausível."
  },
  {
    "id_questao": "2017_2_q17",
    "prova_referencia": "2017-2.pdf",
    "numero_questao": 17,
    "ano_prova": 2017,
    "area": [
      {
        "nome": "Estruturas de Dados",
        "subarea": "Pilhas"
      }
    ],
    "enunciado": "Após a inserção da sequencia de números 10, 1, 3, 4, 6, 8 e 9 em uma pilha, o resultado de três (3) remoções sucessivas seria:",
    "opcoes": [
      {
        "letra": "a",
        "texto": "10, 1 e 3 nessa ordem",
        "correta": false
      },
      {
        "letra": "b",
        "texto": "4, 3 e 1 nessa ordem",
        "correta": false
      },
      {
        "letra": "c",
        "texto": "6, 8 e 9 nessa ordem",
        "correta": false
      },
      {
        "letra": "d",
        "texto": "3, 1 e 10 nessa ordem",
        "correta": false
      },
      {
        "letra": "e",
        "texto": "Nenhuma das alternativas anteriores (A, B, C ou D) está correta",
        "correta": true
      }
    ],
    "explicacao_geral": "**Raciocínio:** Pilha é uma estrutura LIFO (Last-In, First-Out). O último elemento a entrar é o primeiro a sair.\n1.  **Inserção:** A sequência 10, 1, 3, 4, 6, 8 e 9 é inserida. O estado da pilha (base à esquerda, topo à direita) será: `[10, 1, 3, 4, 6, 8, 9]`\n2.  **Remoção:** As remoções (pop) ocorrem a partir do topo.\n    -   1ª Remoção: Remove o 9.\n    -   2ª Remoção: Remove o 8.\n    -   3ª Remoção: Remove o 6.\nO resultado das 3 remoções sucessivas é a sequência **9, 8, 6**. Nenhuma das alternativas de 'a' a 'd' corresponde a essa sequência."
  },
  {
    "id_questao": "2017_2_q18",
    "prova_referencia": "2017-2.pdf",
    "numero_questao": 18,
    "ano_prova": 2017,
    "area": [
      {
        "nome": "Estruturas de Dados",
        "subarea": "Listas Encadeadas"
      }
    ],
    "enunciado": "Considere uma lista encadeada onde cada nó da lista é do tipo No, cujos campos são um ponteiro para o próximo elemento (campo prox) e um dado do tipo inteiro (campo dado). Considere que a lista encadeada não possui um nó cabeça de lista, portanto todos os nós contém valores presentes na lista. Considere que todos os tipos de dados foram previamente declarados no programa. Considere que a função não deve ter problemas de alocação de memória, seja por deixar de alocar dinamicamente dados necessários ou por causar alocação dinâmica de dados desnecessária.\n\n**Função I**\n```c\nvoid funcaol (No *prim, int chave) {\n  No *aux = (No *) malloc(sizeof(No));\n  aux->chave = chave; // Assumindo que o campo é 'chave' e não 'dado'\n  aux->prox = prim;\n  prim = aux;\n}\n```\n**Função II**\n```c\nvoid funcaoII (No **prim, int chave) {\n  No *aux = (No *) malloc(sizeof(No));\n  aux->chave = chave;\n  aux->prox = *prim;\n  *prim = aux;\n}\n```\nDadas as considerações, pode-se dizer sobre as funções funcaol e funcaoll que:",
    "opcoes": [
      {
        "letra": "a",
        "texto": "Apenas a função funcaol pode ser usada para inserir corretamente elementos em uma fila sem gerar qualquer problema de alocação de memória ou erro na fila.",
        "correta": false
      },
      {
        "letra": "b",
        "texto": "Apenas a função funcaoll pode ser usada para inserir corretamente elementos em uma fila sem gerar qualquer problema de alocação de memória ou erro na fila.",
        "correta": false
      },
      {
        "letra": "c",
        "texto": "Ambas as funções podem ser usadas para inserir elementos em uma fila sem gerar qualquer problema de alocação de memória ou erro na fila.",
        "correta": false
      },
      {
        "letra": "d",
        "texto": "Apenas a função funcaol serve para inserir corretamente elementos em uma lista encadeada sem gerar erros, mas não em uma fila.",
        "correta": false
      },
      {
        "letra": "e",
        "texto": "Apenas a função funcaoll serve para inserir corretamente elementos em uma lista encadeada sem gerar erros, mas não em uma fila.",
        "correta": true
      }
    ],
    "explicacao_geral": "**Raciocínio:** As funções implementam a inserção no início de uma lista.\n- **Função I:** Recebe o ponteiro `prim` por **valor**. A alteração `prim = aux` é local e não modifica a cabeça da lista fora da função. Portanto, esta função **não insere corretamente** o elemento na lista.\n- **Função II:** Recebe o ponteiro `prim` por **referência** (`No **prim`). A alteração `*prim = aux` modifica o ponteiro original, atualizando a cabeça da lista corretamente.\n\nA inserção no início da lista é a operação de `push` de uma pilha, ou a operação de `enqueue` em uma fila se as remoções forem feitas no final (o que é ineficiente em lista simplesmente encadeada). A questão pergunta sobre a inserção em uma *fila*. Embora a `funcaoII` possa ser usada como parte de uma implementação de fila (seja para inserir no início e remover do fim, ou vice-versa), sua função primária é a inserção genérica no início de uma lista. Nenhuma das funções implementa a lógica completa de uma fila. No entanto, `funcaoII` implementa corretamente a inserção em uma lista encadeada. A alternativa 'e' reflete isso: `funcaoII` serve para inserir corretamente em uma lista, mas não é, por si só, uma operação de fila (que envolve uma política específica de inserção e remoção)."
  },
  {
    "id_questao": "2017_2_q19",
    "prova_referencia": "2017-2.pdf",
    "numero_questao": 19,
    "ano_prova": 2017,
    "area": [
      {
        "nome": "Algoritmos de Ordenação",
        "subarea": "QuickSort"
      }
    ],
    "enunciado": "Suponha que você recebeu a tarefa de depurar uma implementação de Quicksort, cujo objetivo é classificar um vetor em ordem decrescente. Após a primeira etapa da partição ser concluída, o conteúdo do vetor está na seguinte ordem:\n\n`[20, 22, 24, 18, 13, 9, 3, 10]`\n\nQual das seguintes afirmações está CORRETA sobre a fase de partição?",
    "opcoes": [
      {
        "letra": "a",
        "texto": "O pivô que gerou a partição pode ter o valor 13 ou 18.",
        "correta": true
      },
      {
        "letra": "b",
        "texto": "O pivô que gerou a partição pode ter o valor 13, mas não pode ter o valor 18.",
        "correta": false
      },
      {
        "letra": "c",
        "texto": "O pivô que gerou a partição pode ter o valor 18, mas não pode ter o valor 13.",
        "correta": false
      },
      {
        "letra": "d",
        "texto": "O pivô que gerou a partição não pode ter o valor 13 nem 18.",
        "correta": false
      },
      {
        "letra": "e",
        "texto": "O conteúdo do vetor não pode representar o resultado da etapa partição.",
        "correta": false
      }
    ],
    "explicacao_geral": "**Raciocínio:** A ordenação é **decrescente**. Após a partição, deve existir uma posição `k` tal que todos os elementos à esquerda de `k` são maiores ou iguais ao pivô, e todos à direita são menores ou iguais.\n\nVamos testar os possíveis pivôs que estão em uma posição que divide o array:\n- Se o pivô fosse **18** (índice 3): `[20, 22, 24]` são os elementos maiores (à esquerda). `[13, 9, 3, 10]` são os menores (à direita). Esta é uma partição válida.\n- Se o pivô fosse **13** (índice 4): `[20, 22, 24, 18]` são os maiores. `[9, 3, 10]` são os menores. Esta também é uma partição válida.\n- Nenhum outro elemento no meio do array (como 24 ou 9) poderia ser o pivô, pois a divisão não estaria correta (ex: se 24 fosse pivô, 18 e 13 não poderiam estar à sua direita).\n\n**Conclusão:** Tanto 18 quanto 13 poderiam ter sido o pivô que gerou este estado de partição."
  },
  {
    "id_questao": "2017_2_q20",
    "prova_referencia": "2017-2.pdf",
    "numero_questao": 20,
    "ano_prova": 2017,
    "area": [
      {
        "nome": "Estruturas de Dados",
        "subarea": "Árvores (BST, AVL, Rubro-Negra, B-trees, Heap)"
      }
    ],
    "enunciado": "Ao inserirmos as chaves 2, 4, 6, 8, 10 e 12, nessa ordem, em uma árvore AVL que estava originalmente vazia, a diferença de altura entre a sub-árvores que está à direita da raiz e a sub-árvore que está à esquerda da raiz será:",
    "opcoes": [
      {
        "letra": "a",
        "texto": "0.",
        "correta": true
      },
      {
        "letra": "b",
        "texto": "2.",
        "correta": false
      },
      {
        "letra": "c",
        "texto": "4.",
        "correta": false
      },
      {
        "letra": "d",
        "texto": "6.",
        "correta": false
      },
      {
        "letra": "e",
        "texto": "8.",
        "correta": false
      }
    ],
    "explicacao_geral": "**Raciocínio:** Vamos simular as inserções e as rotações AVL.\n1.  Insere 2. Árvore: `(2)`.\n2.  Insere 4. Árvore: `(2)->(4)`.\n3.  Insere 6. Desbalanceia em 2. **Rotação simples à esquerda** em 2. A raiz vira 4. Árvore: `(4) <- (2), (6)`.\n4.  Insere 8. Desbalanceia em 6. A árvore fica: `(4) <- (2), (6)->(8)`.\n5.  Insere 10. Desbalanceia em 6. **Rotação simples à esquerda** em 6. O nó 8 sobe. Árvore: `(4) <- (2), (8) <- (6), (10)`.\n6.  Insere 12. Desbalanceia em 4. **Rotação simples à esquerda** em 4. A raiz vira 8. Árvore final: `(8) <- (4), (10)` e `(4) <- (2), (6)` e `(10) -> (12)`.\n\n**Árvore Final:**\n```mermaid\ngraph TD\n    A[8] --> B[4]\n    A[8] --> C[10]\n    B[4] --> D[2]\n    B[4] --> E[6]\n    C[10] --> F[12]\n```\n\n- **Altura da subárvore esquerda (raiz 4):** A altura do nó 4 é 1 (altura de folha = 0).\n- **Altura da subárvore direita (raiz 10):** A altura do nó 10 é 1.\n- **Diferença de altura:** Altura(sub-direita) - Altura(sub-esquerda) = 1 - 1 = 0. A árvore está perfeitamente balanceada na raiz."
  }
]
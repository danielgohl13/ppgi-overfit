[
  {
    "id_questao": "2019_1_q1",
    "prova_referencia": "2019-1.pdf",
    "numero_questao": 1,
    "ano_prova": 2019,
    "area": [
      {
        "nome": "Hashing",
        "subarea": "Resolução de colisões"
      }
    ],
    "enunciado": "Suponha que você tenha a seguinte tabela hash implementada utilizando endereçamento aberto com sondagem linear (linear probing).\nA função hash que você está usando é uma função modular, $h(x) = x \\pmod 9$.\n\nPosições: `0, 1, 2, 3, 4, 5, 6, 7, 8`\nValores: `[9, 18, , 12, 3, 14, 4, 21, ]`\n\nQual das ordens abaixo pode ser a ordem em que os elementos foram adicionados à hash?\nAssuma que a hash nunca tenha sido redimensionada e que nenhum elemento tenha sido excluído ainda.",
    "opcoes": [
      {
        "letra": "a",
        "texto": "9, 14, 4, 18, 21, 3, 12",
        "correta": false
      },
      {
        "letra": "b",
        "texto": "12, 3, 14, 18, 4, 9, 21",
        "correta": false
      },
      {
        "letra": "c",
        "texto": "12, 14, 3, 9, 4, 18, 21",
        "correta": true
      },
      {
        "letra": "d",
        "texto": "9, 12, 14, 3, 21, 18, 4",
        "correta": false
      },
      {
        "letra": "e",
        "texto": "18, 9, 12, 3, 14, 4, 21",
        "correta": false
      }
    ],
    "explicacao_geral": "**Raciocínio:** É necessário testar cada sequência de inserção para verificar se ela resulta no estado final da tabela hash, usando a função $h(x) = x \\pmod 9$ e a sondagem linear para resolver colisões.\n\n**Análise da Opção Correta (c): 12, 14, 3, 9, 4, 18, 21**\n1.  **insere(12):** $12 \\pmod 9 = 3$. Posição 3 está livre. Tabela: `[_, _, _, 12, _, _, _, _, _]`\n2.  **insere(14):** $14 \\pmod 9 = 5$. Posição 5 está livre. Tabela: `[_, _, _, 12, _, 14, _, _, _]`\n3.  **insere(3):** $3 \\pmod 9 = 3$. Posição 3 ocupada. Próxima livre é 4. Tabela: `[_, _, _, 12, 3, 14, _, _, _]`\n4.  **insere(9):** $9 \\pmod 9 = 0$. Posição 0 está livre. Tabela: `[9, _, _, 12, 3, 14, _, _, _]`\n5.  **insere(4):** $4 \\pmod 9 = 4$. Posição 4 ocupada. Próxima livre é 6. Tabela: `[9, _, _, 12, 3, 14, 4, _, _]`\n6.  **insere(18):** $18 \\pmod 9 = 0$. Posição 0 ocupada. Próxima livre é 1. Tabela: `[9, 18, _, 12, 3, 14, 4, _, _]`\n7.  **insere(21):** $21 \\pmod 9 = 3$. Posições 3, 4, 5, 6 ocupadas. Próxima livre é 7. Tabela: `[9, 18, _, 12, 3, 14, 4, 21, _]`\n\nA sequência resulta exatamente na tabela mostrada."
  },
  {
    "id_questao": "2019_1_q2",
    "prova_referencia": "2019-1.pdf",
    "numero_questao": 2,
    "ano_prova": 2019,
    "area": [
      {
        "nome": "Estruturas de Dados",
        "subarea": "AVL"
      }
    ],
    "enunciado": "Dado os seguintes elementos (10, 20, 15, 25, 30, 16, 18, 19), qual desenho representa uma árvore AVL, inicialmente vazia, que é preenchida com esses elementos, na ordem apresentada, e que tem as devidas rotações efetuadas?\n\n(A imagem da prova mostra 4 árvores. A árvore correta, conforme o gabarito, é a de número 1)\n\n```mermaid\ngraph TD\n    A(20) --> B(15)\n    A(20) --> C(25)\n    B(15) --> D(10)\n    B(15) --> E(18)\n    C(25) --> F(30)\n    E(18) --> G(16)\n    E(18) --> H(19)\n```",
    "opcoes": [
      {
        "letra": "a",
        "texto": "1",
        "correta": true
      },
      {
        "letra": "b",
        "texto": "2",
        "correta": false
      },
      {
        "letra": "c",
        "texto": "3",
        "correta": false
      },
      {
        "letra": "d",
        "texto": "4",
        "correta": false
      },
      {
        "letra": "e",
        "texto": "Nenhuma das árvores desenhadas representa uma AVL",
        "correta": false
      }
    ],
    "explicacao_geral": "**Raciocínio:** A construção de uma árvore AVL envolve a inserção padrão de uma Árvore Binária de Busca, seguida de verificações de balanceamento e rotações, se necessário, a cada inserção. A sequência de inserções `10, 20, 15, 25, 30, 16, 18, 19` exige múltiplas rotações (simples e duplas) para manter a propriedade de balanceamento da AVL. A árvore final resultante desse processo é a representada pela figura (1)."
  },
  {
    "id_questao": "2019_1_q3",
    "prova_referencia": "2019-1.pdf",
    "numero_questao": 3,
    "ano_prova": 2019,
    "area": [
      {
        "nome": "Análise de Complexidade",
        "subarea": "Notação Big O"
      }
    ],
    "enunciado": "Qual a alternativa que completa corretamente a seguinte frase: Um algoritmo que possui número de operações ________ em função de uma entrada de tamanho n é linear.",
    "opcoes": [
      {
        "letra": "a",
        "texto": "$n^3+9$",
        "correta": false
      },
      {
        "letra": "b",
        "texto": "$3n^2+3n+2$",
        "correta": false
      },
      {
        "letra": "c",
        "texto": "6",
        "correta": false
      },
      {
        "letra": "d",
        "texto": "$2n+1$",
        "correta": true
      },
      {
        "letra": "e",
        "texto": "$n^2+1$",
        "correta": false
      }
    ],
    "explicacao_geral": "**Raciocínio:** Um algoritmo com complexidade de tempo linear tem seu número de operações crescendo proporcionalmente ao tamanho da entrada `n`. Em notação Big O, isso é representado como $O(n)$.\n\n- **(a) $n^3+9$:** Complexidade cúbica, $O(n^3)$.\n- **(b) $3n^2+3n+2$:** Complexidade quadrática, $O(n^2)$.\n- **(c) 6:** Complexidade constante, $O(1)$.\n- **(d) $2n+1$:** O termo de maior ordem é `n`, portanto, a complexidade é linear, $O(n)$.\n- **(e) $n^2+1$:** Complexidade quadrática, $O(n^2)$."
  },
  {
    "id_questao": "2019_1_q4",
    "prova_referencia": "2019-1.pdf",
    "numero_questao": 4,
    "ano_prova": 2019,
    "area": [
      {
        "nome": "Operações Fundamentais",
        "subarea": "Busca"
      },
      {
        "nome": "Algoritmos",
        "subarea": null
      }
    ],
    "enunciado": "Considere um vetor com 25 elementos (posição 0 até a posição 24) que representam os números primos entre 1 a 100, em ordem crescente (Ex: [2, 3, 5, 7, 11, 13, ..., 89, 97]). Empregando pesquisa binária, quantos itens do vetor precisam ser examinados antes de se concluir que o número 52 não está no vetor e, portanto, não é primo?",
    "opcoes": [
      {
        "letra": "a",
        "texto": "12",
        "correta": false
      },
      {
        "letra": "b",
        "texto": "7",
        "correta": false
      },
      {
        "letra": "c",
        "texto": "5",
        "correta": true
      },
      {
        "letra": "d",
        "texto": "1",
        "correta": false
      },
      {
        "letra": "e",
        "texto": "4",
        "correta": false
      }
    ],
    "explicacao_geral": "**Raciocínio:** Vamos traçar a busca binária para a chave 52 no vetor de 25 primos (índices 0 a 24).\n1.  **Comparação 1:** `low=0, high=24`. `mid = 12`. O 13º primo (índice 12) é 41. Como `52 > 41`, o novo intervalo de busca é `[13, 24]`.\n2.  **Comparação 2:** `low=13, high=24`. `mid = 18`. O 19º primo (índice 18) é 67. Como `52 < 67`, o novo intervalo é `[13, 17]`.\n3.  **Comparação 3:** `low=13, high=17`. `mid = 15`. O 16º primo (índice 15) é 53. Como `52 < 53`, o novo intervalo é `[13, 14]`.\n4.  **Comparação 4:** `low=13, high=14`. `mid = 13`. O 14º primo (índice 13) é 43. Como `52 > 43`, o novo intervalo é `[14, 14]`.\n5.  **Comparação 5:** `low=14, high=14`. `mid = 14`. O 15º primo (índice 14) é 47. Como `52 > 47`, o novo intervalo seria `[15, 14]`.\nNeste ponto, `low > high`, a busca termina e conclui-se que 52 não está no vetor. Foram realizadas 5 comparações."
  },
  {
    "id_questao": "2019_1_q5",
    "prova_referencia": "2019-1.pdf",
    "numero_questao": 5,
    "ano_prova": 2019,
    "area": [
      {
        "nome": "Estruturas de Dados",
        "subarea": "Listas Encadeadas"
      },
      {
        "nome": "Recursão",
        "subarea": null
      }
    ],
    "enunciado": "Considere o código da função abaixo:\n\n```c\nvoid fun1(struct node* head) {\n  if(head == NULL) {\n    return;\n  }\n  fun1(head->next);\n  printf(\"%d \", head->data);\n}\n```\n\nO que essa função faz, dada uma lista encadeada de valores inteiros como entrada?",
    "opcoes": [
      {
        "letra": "a",
        "texto": "Imprime todos os nós da lista encadeada, começando com primeiro o nó da lista",
        "correta": false
      },
      {
        "letra": "b",
        "texto": "Imprime todos os nós da lista encadeada, começando com o último nó da lista",
        "correta": true
      },
      {
        "letra": "c",
        "texto": "Imprime apenas os nós de posições pares da lista encadeada",
        "correta": false
      },
      {
        "letra": "d",
        "texto": "Imprime apenas os nós de posições impares da lista encadeada",
        "correta": false
      },
      {
        "letra": "e",
        "texto": "Nenhuma das alternativas anteriores",
        "correta": false
      }
    ],
    "explicacao_geral": "**Raciocínio:** A função é recursiva. A chamada recursiva `fun1(head->next)` é executada *antes* da instrução `printf`. Isso significa que a função irá percorrer toda a lista até o final antes que qualquer valor seja impresso. Quando a recursão atinge o final da lista (`head == NULL`), as chamadas começam a retornar. A primeira instrução `printf` a ser executada será a do último nó da lista, seguida pela do penúltimo, e assim por diante, até o primeiro nó. Portanto, a função imprime a lista em ordem inversa."
  },
  {
    "id_questao": "2019_1_q6",
    "prova_referencia": "2019-1.pdf",
    "numero_questao": 6,
    "ano_prova": 2019,
    "area": [
      {
        "nome": "Hashing",
        "subarea": "Resolução de colisões"
      },
      {
        "nome": "Análise de Complexidade",
        "subarea": "Notação Big O"
      }
    ],
    "enunciado": "Marque a alternativa CORRETA. Sobre um hash com encadeamento e com tabela de tamanho 100, pode-se dizer que:",
    "opcoes": [
      {
        "letra": "a",
        "texto": "Para casos em que se insere um número n muito grande de chaves, o tempo no caso médio de busca será $O(1)$",
        "correta": false
      },
      {
        "letra": "b",
        "texto": "Para casos em que se insere um número n muito grande de chaves, o tempo de busca no pior caso será $O(1)$",
        "correta": false
      },
      {
        "letra": "c",
        "texto": "Para casos em que se insere um número n muito grande de chaves, o tempo no caso médio de busca será $O(n)$",
        "correta": true
      },
      {
        "letra": "d",
        "texto": "Para casos em que se insere um número n muito grande de chaves, o tempo de busca no pior caso será $O(log~n)$",
        "correta": false
      },
      {
        "letra": "e",
        "texto": "Nenhuma das alternativas anteriores",
        "correta": false
      }
    ],
    "explicacao_geral": "**Raciocínio:** O tempo de busca em uma tabela hash com encadeamento depende do fator de carga, $\\alpha = n/M$, onde `n` é o número de chaves e `M` é o tamanho da tabela. O tempo médio de busca é $O(1 + \\alpha)$.\nNeste caso, `M` é fixo em 100 e `n` é \"muito grande\". Isso significa que o fator de carga $\\alpha$ cresce linearmente com `n` ($\\alpha = n/100$).\n\n**Cálculo da Complexidade:**\nA complexidade média é $O(1 + n/100)$. Como `n` é muito grande, o termo `n/100` domina, e a complexidade se torna $O(n)$.\n\n- **(a) Incorreto:** Seria $O(1)$ apenas se `n` fosse proporcional a `M`, mas aqui `M` é fixo.\n- **(b, d) Incorreto:** O pior caso ocorre quando todas as `n` chaves colidem no mesmo índice, resultando em uma busca de $O(n)$ em uma lista encadeada."
  },
  {
    "id_questao": "2019_1_q7",
    "prova_referencia": "2019-1.pdf",
    "numero_questao": 7,
    "ano_prova": 2019,
    "area": [
      {
        "nome": "Estruturas de Dados",
        "subarea": "Listas Encadeadas"
      }
    ],
    "enunciado": "A seguinte função em C usa uma lista simplesmente encadeada como argumento de entrada. Ela modifica a lista, movendo o último elemento para a frente da lista e retorna a lista modificada.\n\n```c\ntypedef struct node {\n  int value;\n  struct node *next;\n} Node;\n\nNode *move_to_front(Node *head) {\n  Node *p, *q;\n  if ((head == NULL || (head->next == NULL)))\n    return head;\n  \n  q = NULL; p = head;\n  while (p->next != NULL) {\n    q = p;\n    p = p->next;\n  }\n  \n  // ------------ LINHA EM BRANCO ------------\n  \n  return head;\n}\n```\n\nCerta parte do código foi deixada em branco (linha tracejada). Escolha a alternativa CORRETA para substituir a linha em branco.",
    "opcoes": [
      {
        "letra": "a",
        "texto": "$q = NULL$; p->next = head; head $= p$;",
        "correta": false
      },
      {
        "letra": "b",
        "texto": "q->next = NULL; head $= p$; p->next = head;",
        "correta": false
      },
      {
        "letra": "c",
        "texto": "head = p; p->next = q; q->next = NULL;",
        "correta": false
      },
      {
        "letra": "d",
        "texto": "q->next = NULL; p->next = head; head $= p$;",
        "correta": true
      },
      {
        "letra": "e",
        "texto": "A função não precisa ser complementada.",
        "correta": false
      }
    ],
    "explicacao_geral": "**Raciocínio:** Após o laço `while`, o ponteiro `p` aponta para o último nó da lista e `q` aponta para o penúltimo nó. Para mover `p` para o início, são necessários três passos:\n1.  **Desconectar o último nó:** O penúltimo nó (`q`) deve se tornar o novo final da lista. Para isso, seu ponteiro `next` deve apontar para `NULL`. Código: `q->next = NULL;`\n2.  **Ligar o antigo último nó ao início:** O antigo último nó (`p`) deve apontar para o antigo primeiro nó (`head`). Código: `p->next = head;`\n3.  **Atualizar a cabeça da lista:** O ponteiro da cabeça da lista (`head`) deve agora apontar para `p`, que é o novo primeiro nó. Código: `head = p;`\n\nA sequência correta de comandos é `q->next = NULL; p->next = head; head = p;`."
  },
  {
    "id_questao": "2019_1_q8",
    "prova_referencia": "2019-1.pdf",
    "numero_questao": 8,
    "ano_prova": 2019,
    "area": [
      {
        "nome": "Algoritmos de Ordenação",
        "subarea": "Insertion Sort"
      },
      {
        "nome": "Análise de Complexidade",
        "subarea": "Análise de Melhor Caso"
      }
    ],
    "enunciado": "Qual dos seguintes algoritmos apresenta tempo $O(n)$ quando ordenando um vetor com n elementos idênticos de texto?",
    "opcoes": [
      {
        "letra": "a",
        "texto": "Heapsort",
        "correta": false
      },
      {
        "letra": "b",
        "texto": "Insertion sort",
        "correta": true
      },
      {
        "letra": "c",
        "texto": "Mergesort",
        "correta": false
      },
      {
        "letra": "d",
        "texto": "Quicksort",
        "correta": false
      },
      {
        "letra": "e",
        "texto": "Nenhum dos algoritmos apresenta tempo $O(n)$ para essa entrada",
        "correta": false
      }
    ],
    "explicacao_geral": "**Raciocínio:** Um vetor com elementos idênticos é análogo a um vetor já ordenado.\n- **Heapsort e Mergesort:** Possuem complexidade $O(n \\log n)$ em todos os casos (melhor, médio e pior).\n- **Quicksort:** Tem seu pior caso, $O(n^2)$, com vetores de elementos idênticos (para implementações que não tratam esse caso especificamente).\n- **Insertion Sort:** Tem seu melhor caso quando o vetor já está ordenado (ou contém elementos idênticos). Nesse cenário, o laço interno executa apenas uma vez para cada elemento do laço externo, resultando em uma complexidade de tempo linear, $O(n)$."
  },
  {
    "id_questao": "2019_1_q9",
    "prova_referencia": "2019-1.pdf",
    "numero_questao": 9,
    "ano_prova": 2019,
    "area": [
      {
        "nome": "Estruturas de Dados",
        "subarea": "Rubro-Negra"
      }
    ],
    "enunciado": "Qual das afirmações a seguir é VERDADEIRA sobre árvores rubro-negra (vermelho e preto)?",
    "opcoes": [
      {
        "letra": "a",
        "texto": "O caminho do nó raiz até o nó folha mais distante não é maior que o dobro do número de nós do caminho da raiz para a folha mais próxima",
        "correta": true
      },
      {
        "letra": "b",
        "texto": "O caminho do nó raiz para um nó folha ou para um nó nulo deve conter o mesmo número de nós pretos e vermelhos.",
        "correta": false
      },
      {
        "letra": "c",
        "texto": "A raiz pode ser vermelha",
        "correta": false
      },
      {
        "letra": "d",
        "texto": "Se um nó for vermelho, os nós filhos somente serão pretos. O inverso também acontece, ou seja, se um nó for preto, seus nós filhos somente serão vermelhos.",
        "correta": false
      },
      {
        "letra": "e",
        "texto": "Nenhumas das afirmações é verdadeira",
        "correta": false
      }
    ],
    "explicacao_geral": "**Raciocínio:** Analisando as propriedades da Árvore Rubro-Negra:\n- **(a) Verdadeira:** Esta é uma consequência direta das propriedades da árvore. O caminho mais curto possível (todos os nós pretos) e o mais longo possível (alternando pretos e vermelhos) garante que o caminho mais longo não seja mais que o dobro do mais curto. Isso assegura que a altura da árvore seja $O(\\log n)$.\n- **(b) Falsa:** A propriedade é que todo caminho da raiz a uma folha (nó nulo) deve conter o mesmo número de nós **pretos** (a chamada altura-preta).\n- **(c) Falsa:** A propriedade 1 afirma que a raiz é sempre preta.\n- **(d) Falsa:** A primeira parte é verdadeira (um nó vermelho não pode ter filhos vermelhos), mas a recíproca é falsa. Um nó preto pode ter filhos pretos ou vermelhos."
  },
  {
    "id_questao": "2019_1_q10",
    "prova_referencia": "2019-1.pdf",
    "numero_questao": 10,
    "ano_prova": 2019,
    "area": [
      {
        "nome": "Recursão",
        "subarea": null
      },
      {
        "nome": "Estruturas de Dados",
        "subarea": "Pilhas"
      }
    ],
    "enunciado": "Qual das seguintes estruturas de dados é mais usada para implementar recursão?",
    "opcoes": [
      {
        "letra": "a",
        "texto": "Heap binário",
        "correta": false
      },
      {
        "letra": "b",
        "texto": "Hash table",
        "correta": false
      },
      {
        "letra": "c",
        "texto": "Fila",
        "correta": false
      },
      {
        "letra": "d",
        "texto": "Árvore de busca",
        "correta": false
      },
      {
        "letra": "e",
        "texto": "Pilha",
        "correta": true
      }
    ],
    "explicacao_geral": "**Raciocínio:** A recursão é implementada pelo sistema usando uma **pilha de chamadas** (call stack). Cada vez que uma função é chamada (incluindo chamadas recursivas a si mesma), um novo registro de ativação (contendo parâmetros, variáveis locais e o endereço de retorno) é empilhado. Quando a função retorna, seu registro é desempilhado. A natureza LIFO (Last-In, First-Out) da pilha é perfeita para gerenciar o fluxo de chamadas e retornos aninhados da recursão."
  },
  {
    "id_questao": "2019_1_q15",
    "prova_referencia": "2019-1.pdf",
    "numero_questao": 15,
    "ano_prova": 2019,
    "area": [
      {
        "nome": "Estruturas de Dados",
        "subarea": "AVL"
      },
      {
        "nome": "Estruturas de Dados",
        "subarea": "Rubro-Negra"
      }
    ],
    "enunciado": "Comparando árvores AVL e rubro-negras, qual das seguintes afirmações é VERDADEIRA:",
    "opcoes": [
      {
        "letra": "a",
        "texto": "As árvores AVL tendem a ter altura menor em comparação com as árvores rubro-negras, mas podem causar mais rotações durante operações de inserção e exclusão.",
        "correta": true
      },
      {
        "letra": "b",
        "texto": "As alturas das árvores AVL e rubro-negras são as mesmas, mas as árvores AVL podem causar mais rotações durante a inserção e exclusão.",
        "correta": false
      },
      {
        "letra": "c",
        "texto": "As árvores rubro-negras tendem a ter altura menor em comparação com as árvores AVL, mas podem causar mais rotações durante a inserção e exclusão.",
        "correta": false
      },
      {
        "letra": "d",
        "texto": "As alturas das árvores AVL e rubro-negras são as mesmas, mas as árvores rubro-negras podem causar mais rotações durante a inserção e exclusão.",
        "correta": false
      },
      {
        "letra": "e",
        "texto": "Todas as afirmações anteriores são falsas",
        "correta": false
      }
    ],
    "explicacao_geral": "**Raciocínio:** Este é um comparativo clássico entre os dois tipos de árvores balanceadas.\n\n- **Altura:** Árvores AVL têm critérios de balanceamento mais rígidos (fator de balanceamento de -1, 0 ou 1). Isso resulta em árvores mais \"compactas\", ou seja, com altura garantidamente menor ou igual à de uma árvore rubro-negra com os mesmos elementos. Buscas em AVL são, em teoria, ligeiramente mais rápidas.\n- **Rotações:** Para manter esse balanceamento rígido, as árvores AVL precisam realizar rotações com mais frequência durante as operações de inserção e remoção. Árvores rubro-negras, com regras mais flexíveis, exigem menos rotações, tornando as operações de modificação mais rápidas.\n\nA alternativa (a) descreve corretamente essa troca: AVL tem menor altura (melhor para buscas), mas mais rotações (pior para inserções/remoções)."
  },
  {
    "id_questao": "2019_1_q17",
    "prova_referencia": "2019-1.pdf",
    "numero_questao": 17,
    "ano_prova": 2019,
    "area": [
      {
        "nome": "Análise de Complexidade",
        "subarea": "Notação Big O"
      },
      {
        "nome": "Algoritmos de Ordenação",
        "subarea": "MergeSort"
      }
    ],
    "enunciado": "Suponha que, no pior caso, um algoritmo Merge Sort leve 30 segundos para ordenar uma entrada de tamanho 64. Qual das opções a seguir se aproxima mais do tamanho máximo de entrada de um problema que pode ser resolvido em 6 minutos?",
    "opcoes": [
      {
        "letra": "a",
        "texto": "256",
        "correta": false
      },
      {
        "letra": "b",
        "texto": "1024",
        "correta": false
      },
      {
        "letra": "c",
        "texto": "512",
        "correta": true
      },
      {
        "letra": "d",
        "texto": "2048",
        "correta": false
      },
      {
        "letra": "e",
        "texto": "4096",
        "correta": false
      }
    ],
    "explicacao_geral": "**Raciocínio:** A complexidade do Merge Sort é $T(n) = c \\cdot n \\log_2 n$, onde `c` é uma constante.\\n1.  **Encontrar a constante `c`:**\\n    - Sabemos que $T(64) = 30$ segundos.\\n    - $30 = c \\cdot 64 \\cdot \\log_2 64$\\n    - $30 = c \\cdot 64 \\cdot 6$\\n    - $c = 30 / 384 = 5 / 64$\\n2.  **Encontrar `N` para T(N) = 360 segundos (6 minutos):**\\n    - $T(N) = c \\cdot N \\log_2 N = 360$\\n    - $(5/64) \\cdot N \\log_2 N = 360$\\n    - $N \\log_2 N = 360 \\cdot (64 / 5)$\\n    - $N \\log_2 N = 72 \\cdot 64 = 4608$\\n3.  **Testar as opções:**\\n    - Para $N=256$, $256 \\cdot \\log_2 256 = 256 \\cdot 8 = 2048$\\n    - Para $N=512$, $512 \\cdot \\log_2 512 = 512 \\cdot 9 = 4608$\\n    - Para $N=1024$, $1024 \\cdot \\log_2 1024 = 1024 \\cdot 10 = 10240$\\n\\nO tamanho da entrada que corresponde ao tempo de 6 minutos é 512."
  },
  {
    "id_questao": "2019_1_q18",
    "prova_referencia": "2019-1.pdf",
    "numero_questao": 18,
    "ano_prova": 2019,
    "area": [
      {
        "nome": "Algoritmos de Ordenação",
        "subarea": "Insertion Sort"
      }
    ],
    "enunciado": "Considere que os seguintes elementos {5, 4, 3, 2, 1} foram inseridos nesta ordem em um vetor. Em seguida, você aplicou o algoritmo Insertion Sort nele. Qual é a sequência de passos feitos durante o uso do Insertion Sort neste vetor?",
    "opcoes": [
      {
        "letra": "a",
        "texto": "4 5 3 2 1 / 3 4 5 2 1 / 2 3 4 5 1 / 1 2 3 4 5",
        "correta": true
      },
      {
        "letra": "b",
        "texto": "5 4 3 1 2 / 5 4 1 2 3 / 5 1 2 3 4 / 1 2 3 4 5",
        "correta": false
      },
      {
        "letra": "c",
        "texto": "4 3 2 1 5 / 3 2 1 5 4 / 2 1 5 4 3 / 1 5 4 3 2",
        "correta": false
      },
      {
        "letra": "d",
        "texto": "4 5 3 2 1 / 2 3 4 5 1 / 3 4 5 2 1 / 1 2 3 4 5",
        "correta": false
      },
      {
        "letra": "e",
        "texto": "4 5 3 1 2 / 2 3 4 5 1 / 3 4 5 2 1 / 1 2 3 4 5",
        "correta": false
      }
    ],
    "explicacao_geral": "**Raciocínio:** O Insertion Sort constrói a porção ordenada do vetor da esquerda para a direita, pegando um elemento da parte não ordenada e inserindo-o na posição correta da parte ordenada.\n- **Vetor inicial:** `[5, 4, 3, 2, 1]`\n- **Passo 1 (considerando o 4):** O 4 é menor que 5, então eles trocam. Vetor: `[4, 5, 3, 2, 1]`\n- **Passo 2 (considerando o 3):** O 3 é inserido na posição correta da parte ordenada `[4, 5]`. Vetor: `[3, 4, 5, 2, 1]`\n- **Passo 3 (considerando o 2):** O 2 é inserido na posição correta da parte ordenada `[3, 4, 5]`. Vetor: `[2, 3, 4, 5, 1]`\n- **Passo 4 (considerando o 1):** O 1 é inserido na posição correta da parte ordenada `[2, 3, 4, 5]`. Vetor: `[1, 2, 3, 4, 5]`\n\nA sequência de estados do vetor após cada passo corresponde à alternativa (a)."
  },
  {
    "id_questao": "2019_1_q19",
    "prova_referencia": "2019-1.pdf",
    "numero_questao": 19,
    "ano_prova": 2019,
    "area": [
      {
        "nome": "Estruturas de Dados",
        "subarea": "Listas Encadeadas"
      },
      {
        "nome": "Análise de Complexidade",
        "subarea": "Notação Big O"
      }
    ],
    "enunciado": "Considere uma lista duplamente encadeada não ordenada (com ponteiros para o início e final da lista). Qual das seguintes operações a seguir pode ser implementada no tempo $O(1)$? Marque a alternativa CORRETA.\n\nI. Inserção na frente da lista encadeada\nII. Inserção no final da lista encadeada\nIII. Exclusão do nó frontal da lista encadeada\nIV. Exclusão do último nó da lista encadeada",
    "opcoes": [
      {
        "letra": "a",
        "texto": "I e II",
        "correta": false
      },
      {
        "letra": "b",
        "texto": "I e III",
        "correta": false
      },
      {
        "letra": "c",
        "texto": "I, II e III",
        "correta": false
      },
      {
        "letra": "d",
        "texto": "I, II e IV",
        "correta": false
      },
      {
        "letra": "e",
        "texto": "Todas as afirmativas estão corretas",
        "correta": true
      }
    ],
    "explicacao_geral": "**Raciocínio:** A complexidade $O(1)$ significa que a operação leva um tempo constante, independentemente do tamanho da lista.\n- **I. Inserção na frente:** Com um ponteiro para o início (`head`), podemos criar um novo nó e ajustar os ponteiros em tempo constante. **$O(1)$**.\n- **II. Inserção no final:** Com um ponteiro para o fim (`tail`), podemos criar um novo nó e ajustar os ponteiros em tempo constante. **$O(1)$**.\n- **III. Exclusão do nó frontal:** Com o ponteiro `head`, podemos ajustar o `head` para apontar para o segundo elemento e liberar o primeiro em tempo constante. **$O(1)$**.\n- **IV. Exclusão do último nó:** Com o ponteiro `tail`, podemos acessar o último nó. Como a lista é duplamente encadeada, podemos acessar o penúltimo nó através do ponteiro `prev` do último nó e ajustar os ponteiros em tempo constante. **$O(1)$**.\n\nTodas as quatro operações podem ser feitas em tempo constante."
  },
  {
    "id_questao": "2019_1_q20",
    "prova_referencia": "2019-1.pdf",
    "numero_questao": 20,
    "ano_prova": 2019,
    "area": [
      {
        "nome": "Estruturas de Dados",
        "subarea": "Filas"
      },
      {
        "nome": "Estruturas de Dados",
        "subarea": "Arrays"
      }
    ],
    "enunciado": "Suponha que uma fila circular de elementos com capacidade $(n-1)$ seja implementada com um vetor de n elementos. Suponha que a operação de inserção e exclusão seja realizada usando REAR (último elemento da fila) e FRONT (primeiro elemento da fila) como variáveis de índice do vetor, respectivamente. Inicialmente, $REAR = FRONT = 0$. As condições para detectar a fila cheia e a fila vazia são:",
    "opcoes": [
      {
        "letra": "a",
        "texto": "Full: (REAR+1) mod $n$ == FRONT, empty: (FRONT+1) mod n == REAR",
        "correta": false
      },
      {
        "letra": "b",
        "texto": "Full: REAR == FRONT, empty: (REAR+1) mod n == FRONT",
        "correta": false
      },
      {
        "letra": "c",
        "texto": "Full: (FRONT+1) mod n == REAR, empty: REAR == FRONT",
        "correta": false
      },
      {
        "letra": "d",
        "texto": "Full: REAR == FRONT, empty: (FRONT+1) mod n == REAR",
        "correta": false
      },
      {
        "letra": "e",
        "texto": "Full: (REAR+1) mod $n$ == FRONT, empty: REAR == FRONT",
        "correta": true
      }
    ],
    "explicacao_geral": "**Raciocínio:** Esta é a implementação padrão de uma fila circular em um vetor, onde uma posição é deixada vazia para diferenciar o estado de fila cheia do estado de fila vazia.\n- **Fila Vazia (empty):** A condição para a fila estar vazia é quando os ponteiros de início e fim apontam para o mesmo local. Condição: `REAR == FRONT`.\n- **Fila Cheia (full):** A fila é considerada cheia quando o ponteiro de fim (`REAR`), ao avançar uma posição (de forma circular), alcança o ponteiro de início (`FRONT`). Isso significa que resta apenas a posição \"vazia\" de segurança. Condição: `(REAR + 1) % n == FRONT`."
  }
]
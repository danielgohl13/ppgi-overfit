[
  {
    "id_questao": "2018_1_q1",
    "prova_referencia": "2018-1.pdf",
    "numero_questao": 1,
    "ano_prova": 2018,
    "area": [
      {
        "nome": "Análise de Complexidade",
        "subarea": "Notação Big O"
      },
      {
        "nome": "Algoritmos de Ordenação",
        "subarea": "MergeSort"
      }
    ],
    "enunciado": "Dois vetores ordenados, contendo, cada um deles, N números inteiros, precisam ser unidos em outro vetor maior, que conterá os 2N números, que também serão armazenados de forma ordenada. A complexidade de tempo de melhor caso desse processo será, então,",
    "opcoes": [
      {
        "letra": "a",
        "texto": "$O(1)$, pois se precisa fazer apenas uma cópia simples de cada um dos elementos originais.",
        "correta": false
      },
      {
        "letra": "b",
        "texto": "$O(log~N)$, pois se usa a busca binária para determinar qual será o próximo elemento copiado para o vetor de destino.",
        "correta": false
      },
      {
        "letra": "c",
        "texto": "$O(N)$, pois se precisa fazer uma cópia de cada um dos elementos originais, o que implica uma varredura completa de cada vetor de origem.",
        "correta": true
      },
      {
        "letra": "d",
        "texto": "$O(Nlog N)$, pois se precisa fazer uma busca de cada elemento para depois inseri-lo no vetor de destino.",
        "correta": false
      },
      {
        "letra": "e",
        "texto": "$O(N^2)$, pois, como há dois vetores, precisa-se fazer dois laços de forma aninhada (um dentro do outro), gerando uma multiplicação das quantidades de elementos.",
        "correta": false
      }
    ],
    "explicacao_geral": "**Raciocínio:** O processo descrito é a etapa de intercalação (merge) do algoritmo MergeSort. Para combinar dois vetores ordenados de tamanho N em um único vetor ordenado de tamanho 2N, é necessário percorrer ambos os vetores de origem uma única vez, comparando seus elementos para decidir a ordem de inserção no novo vetor. Como cada elemento de ambos os vetores é visitado exatamente uma vez, o número total de operações é proporcional a N + N = 2N. Em notação Big O, isso resulta em uma complexidade de tempo linear.\n\n**Cálculo:** A complexidade é $O(N+N) = O(2N)$, que é simplificada para $O(N)$.\n\n- **(a, b, d, e) Incorreto:** As outras complexidades não correspondem à operação de varredura linear necessária para a intercalação."
  },
  {
    "id_questao": "2018_1_q2",
    "prova_referencia": "2018-1.pdf",
    "numero_questao": 2,
    "ano_prova": 2018,
    "area": [
      {
        "nome": "Estruturas de Dados",
        "subarea": "B-trees"
      }
    ],
    "enunciado": "Dadas as seguintes afirmações a respeito de árvores B,\n\nI. Em uma árvore B de ordem \"m\" cada nó tem, no máximo, \"m\" filhos.\nII. Em uma árvore B de ordem \"m\" cada nó (exceto a raíz e as folhas) tem pelo menos \"m/2\" filhos.\nIII. Árvores B precisam ser rebalanceadas frequentemente.\nIV. Um nó não-folha com \"k\" filhos deve ter k chaves.\nV. Todas as folhas aparecem no mesmo nível e carregam informação.\n\nestão CORRETOS os itens",
    "opcoes": [
      {
        "letra": "a",
        "texto": "I e III, apenas.",
        "correta": false
      },
      {
        "letra": "b",
        "texto": "I, III, IV e V.",
        "correta": false
      },
      {
        "letra": "c",
        "texto": "I, II e V, apenas.",
        "correta": true
      },
      {
        "letra": "d",
        "texto": "III, IV e V, apenas.",
        "correta": false
      },
      {
        "letra": "e",
        "texto": "II, III e IV, apenas.",
        "correta": false
      }
    ],
    "explicacao_geral": "**Raciocínio:** Analisando as propriedades das Árvores B:\n\n- **I (Correta):** A ordem `m` de uma Árvore B define, por definição, o número máximo de filhos que um nó pode ter.\n- **II (Correta):** Para garantir o balanceamento, todos os nós internos (exceto a raiz) devem ter no mínimo `⌈m/2⌉` filhos.\n- **III (Incorreta):** Árvores B são otimizadas para operações em disco e, por isso, suas operações de balanceamento (split e merge) são projetadas para serem menos frequentes do que em árvores como AVL.\n- **IV (Incorreta):** Um nó com `k` filhos (ou `k` subárvores) contém `k-1` chaves que direcionam a busca para a subárvore correta.\n- **V (Correta):** Uma característica fundamental das Árvores B é que todas as suas folhas estão no mesmo nível, o que garante o balanceamento da árvore. As folhas geralmente armazenam os dados ou ponteiros para eles.\n\nAs afirmações corretas são I, II e V."
  },
  {
    "id_questao": "2018_1_q3",
    "prova_referencia": "2018-1.pdf",
    "numero_questao": 3,
    "ano_prova": 2018,
    "area": [
      {
        "nome": "Estruturas de Dados",
        "subarea": "AVL"
      }
    ],
    "enunciado": "Analise as duas afirmativas a seguir, relacionadas a árvores de busca:\n\nI. Uma árvore AVL é uma árvore binária de busca autobalanceada que respeita algumas propriedades fundamentais.\nII. Como todas as árvores, ela tem uma propriedade chamada altura, que é igual ao valor da altura de sua raiz.\n\nSabendo que a altura de uma folha é igual a um (01) e que a altura de um nó pai é igual ao máximo das alturas de seus filhos mais um, qual estrutura NÃO pode representar uma árvore AVL?",
    "opcoes": [
      {
        "letra": "a",
        "texto": "Uma árvore vazia",
        "correta": false
      },
      {
        "letra": "b",
        "texto": "Uma árvore com dois nós",
        "correta": false
      },
      {
        "letra": "c",
        "texto": "Uma árvore com três nós e altura igual a dois",
        "correta": false
      },
      {
        "letra": "d",
        "texto": "Uma árvore com três nós e altura igual a três",
        "correta": true
      },
      {
        "letra": "e",
        "texto": "Uma árvore com seis nós e altura igual a três",
        "correta": false
      }
    ],
    "explicacao_geral": "**Raciocínio:** A altura máxima de uma árvore binária com 3 nós é 3 (quando os nós formam uma lista encadeada). No entanto, para ser uma árvore AVL, o fator de balanceamento de cada nó (diferença entre a altura da subárvore direita e a da esquerda) deve ser -1, 0 ou 1. Uma árvore com 3 nós e altura 3 teria um nó raiz com fator de balanceamento -2 ou 2, o que viola a propriedade da AVL.\n\n- Uma árvore com 3 nós pode ter altura 2 e ser AVL (ex: raiz com um filho à esquerda e um à direita).\n- Uma árvore com 3 nós e altura 3 (ex: `A -> B -> C`) não é AVL porque a raiz `A` estaria desbalanceada."
  },
  {
    "id_questao": "2018_1_q4",
    "prova_referencia": "2018-1.pdf",
    "numero_questao": 4,
    "ano_prova": 2018,
    "area": [
      {
        "nome": "Estruturas de Dados",
        "subarea": "Heap"
      }
    ],
    "enunciado": "Um heap (fila de prioridade) é uma estrutura de dados muito importante, que tem duas utilidades principais: organizar acesso a um recurso com base na prioridade dos requerentes (processos, impressões, etc.) ou servir como base a um algoritmo de ordenação muito eficiente denominado heapsort. Para poder servir a esses propósitos, um heap possui uma série de propriedades especiais que têm que ser mantidas por todas as operações nelas realizadas. Levando em consideração estas propriedades, analise as afirmativas abaixo.\n\nI. `50 40 49 39 45 46` Representa um heap sintaticamente correto\n\nII. Dado o heap `21 14 10 9 5` a inserção do elemento 12 se dá através dos passos `21 14 10 9 5 12` -> `21 14 12 9 5 10`\n\nIII. Dado o heap `21 14 10 9 5` a retirada do elemento do topo se dá através dos passos `5 14 10 9` -> `14 5 12 9` -> `14 9 12 5`\n\nÉ CORRETO APENAS o que se afirma em:",
    "opcoes": [
      {
        "letra": "a",
        "texto": "I.",
        "correta": false
      },
      {
        "letra": "b",
        "texto": "II.",
        "correta": true
      },
      {
        "letra": "c",
        "texto": "III.",
        "correta": false
      },
      {
        "letra": "d",
        "texto": "I e II.",
        "correta": false
      },
      {
        "letra": "e",
        "texto": "II e III.",
        "correta": false
      }
    ],
    "explicacao_geral": "**Raciocínio:**\n\n- **I (Incorreto):** Assumindo um max-heap (heap máximo), a sequência `[50, 40, 49, 39, 45, 46]` é inválida. O nó na posição 1 (valor 40) é pai do nó na posição 3 (valor 39) e do nó na posição 4 (valor 45). Como `45 > 40`, a propriedade do max-heap é violada.\n\n- **II (Correto):** Para inserir `12` em um max-heap `[21, 14, 10, 9, 5]`:\n  1. Adiciona-se o elemento ao final: `[21, 14, 10, 9, 5, 12]`.\n  2. Compara-se `12` com seu pai (`10`). Como `12 > 10`, eles são trocados: `[21, 14, 12, 9, 5, 10]`.\n  3. O novo pai de `12` é `21`. Como `12 < 21`, o processo para. Os passos descritos estão corretos.\n\n- **III (Incorreto):** O processo de remoção descrito é falho. Ele introduz o elemento `12`, que não existia no heap original, tornando a sequência de passos inválida."
  },
  {
    "id_questao": "2018_1_q6",
    "prova_referencia": "2018-1.pdf",
    "numero_questao": 6,
    "ano_prova": 2018,
    "area": [
      {
        "nome": "Estruturas de Dados",
        "subarea": "Pilhas"
      },
      {
        "nome": "Estruturas de Dados",
        "subarea": "BST"
      },
      {
        "nome": "Análise de Complexidade",
        "subarea": "Notação Big O"
      }
    ],
    "enunciado": "Uma lista ordenada de N números é inserida em uma pilha e depois retirada, sendo que, a cada POP, o elemento retirado é inserido em uma árvore de busca binária. Após a completa inserção de todos os elementos nesta árvore, são feitas buscas de números na mesma. O tempo médio de busca de um número nesta árvore é",
    "opcoes": [
      {
        "letra": "a",
        "texto": "$O(1)$",
        "correta": false
      },
      {
        "letra": "b",
        "texto": "$O(log N)$",
        "correta": false
      },
      {
        "letra": "c",
        "texto": "$O(N)$",
        "correta": true
      },
      {
        "letra": "d",
        "texto": "$O(Nlog N)$",
        "correta": false
      },
      {
        "letra": "e",
        "texto": "$O(N^2)$",
        "correta": false
      }
    ],
    "explicacao_geral": "**Raciocínio:**\n1.  Uma lista ordenada (ex: `1, 2, ..., N`) é inserida em uma pilha. Devido à natureza LIFO (Last-In, First-Out) da pilha, o último elemento inserido (`N`) estará no topo.\n2.  Ao retirar os elementos da pilha (operação POP), a ordem de saída será a inversa da ordem de entrada, ou seja, `N, N-1, ..., 2, 1`.\n3.  Inserir esses elementos, em ordem decrescente, em uma Árvore de Busca Binária (BST) resultará em uma árvore degenerada (ou enviesada), que se assemelha a uma lista encadeada (cada nó terá apenas um filho, à esquerda).\n4.  A busca em uma árvore degenerada com N nós, tanto no caso médio quanto no pior caso, exige percorrer, em média, metade dos nós ou, no pior caso, todos os nós. Portanto, a complexidade de tempo é linear, $O(N)$."
  },
  {
    "id_questao": "2018_1_q7",
    "prova_referencia": "2018-1.pdf",
    "numero_questao": 7,
    "ano_prova": 2018,
    "area": [
      {
        "nome": "Estruturas de Dados",
        "subarea": "AVL"
      }
    ],
    "enunciado": "Assinale cada afirmativa abaixo como verdadeira (V) ou falsa (F). Em seguida, marque a opção que corresponde à sequência CORRETA.\n\n() Uma árvore não-vazia é balanceada AVL se, pelo menos, uma de suas árvores, esquerda ou direita, for balanceada AVL;\n() As árvores cheias são árvores balanceadas AVL;\n() Uma boa condição de balanceamento AVL deve assegurar que a altura de uma árvore com n nós é da ordem de O(log n);\n() Uma árvore AVL é uma árvore balanceada pela altura;\n() Ao inserir ou remover um item em uma árvore AVL, o custo adicional para balancear esta árvore é da ordem de $O(n/2)$.",
    "opcoes": [
      {
        "letra": "a",
        "texto": "V-V-F-V-V",
        "correta": false
      },
      {
        "letra": "b",
        "texto": "F-V-V-V-F",
        "correta": true
      },
      {
        "letra": "c",
        "texto": "V-F-F-V-F",
        "correta": false
      },
      {
        "letra": "d",
        "texto": "F-V-V-F-V",
        "correta": false
      },
      {
        "letra": "e",
        "texto": "F-F-V-V-F",
        "correta": false
      }
    ],
    "explicacao_geral": "**Raciocínio:**\n- **(F)** Uma árvore AVL exige que **todas** as suas subárvores sejam AVL, não apenas uma delas.\n- **(V)** Uma árvore binária de busca cheia é naturalmente balanceada, e seu fator de balanceamento em todos os nós será 0, satisfazendo a condição da AVL.\n- **(V)** A principal vantagem do balanceamento AVL é garantir que a altura da árvore permaneça logarítmica ($O(log n)$), o que mantém a eficiência das operações de busca, inserção e remoção.\n- **(V)** A árvore AVL é, por definição, uma árvore binária de busca balanceada pela altura, onde a diferença de altura entre as subárvores de qualquer nó é no máximo 1.\n- **(F)** O custo do rebalanceamento em uma AVL (rotações) é proporcional à altura da árvore, que é $O(log n)$, não $O(n/2)$."
  },
  {
    "id_questao": "2018_1_q8",
    "prova_referencia": "2018-1.pdf",
    "numero_questao": 8,
    "ano_prova": 2018,
    "area": [
      {
        "nome": "Estruturas de Dados",
        "subarea": "BST"
      },
      {
        "nome": "Estruturas de Dados",
        "subarea": "Travessia"
      }
    ],
    "enunciado": "Considere uma estrutura do tipo árvore binária que começa vazia. Nela são introduzidos os números 2, 10, 5, 7, 1, 0 e 8, exatamente nessa ordem. Se essa árvore for lida em pós-ordem, que sequência de números será impressa?\n\n```mermaid\ngraph TD\n    A(2) --> B(1)\n    A(2) --> C(10)\n    B(1) --> D(0)\n    C(10) --> E(5)\n    E(5) --> F(7)\n    F(7) --> G(8)\n```",
    "opcoes": [
      {
        "letra": "a",
        "texto": "2, 1, 0, 8, 7, 5, 10",
        "correta": false
      },
      {
        "letra": "b",
        "texto": "2, 1, 0, 10, 5, 7, 8",
        "correta": false
      },
      {
        "letra": "c",
        "texto": "0, 1, 8, 7, 5, 10, 2",
        "correta": true
      },
      {
        "letra": "d",
        "texto": "0, 1, 2, 8, 7, 5, 10",
        "correta": false
      },
      {
        "letra": "e",
        "texto": "0, 1, 2, 10, 5, 7, 8",
        "correta": false
      }
    ],
    "explicacao_geral": "**Raciocínio:**\n1.  **Construção da Árvore Binária de Busca (BST):** A inserção dos elementos `2, 10, 5, 7, 1, 0, 8` resulta na árvore representada no enunciado.\n2.  **Percurso em Pós-ordem (Post-order):** A regra é visitar a subárvore Esquerda, depois a subárvore Direita e, por último, a Raiz (EDR).\n    - Começando pela raiz (2), vamos para a subárvore esquerda (raiz 1).\n    - Da raiz (1), vamos para sua subárvore esquerda (raiz 0). O nó 0 não tem filhos, então imprimimos **0**.\n    - Voltamos para o nó 1. Ele não tem filho direito. Imprimimos **1**.\n    - Voltamos para a raiz (2). Agora vamos para a subárvore direita (raiz 10).\n    - Da raiz (10), vamos para a esquerda (raiz 5). Daí para a direita (raiz 7). Daí para a direita (raiz 8). O nó 8 não tem filhos, imprimimos **8**.\n    - Voltamos para o nó 7. Não tem filho esquerdo. Imprimimos **7**.\n    - Voltamos para o nó 5. Não tem filho esquerdo. Imprimimos **5**.\n    - Voltamos para o nó 10. Não tem filho direito. Imprimimos **10**.\n    - Finalmente, voltamos e imprimimos a raiz principal, **2**.\n3.  **Sequência Final:** Juntando tudo, a sequência é `0, 1, 8, 7, 5, 10, 2`."
  },
  {
    "id_questao": "2018_1_q10",
    "prova_referencia": "2018-1.pdf",
    "numero_questao": 10,
    "ano_prova": 2018,
    "area": [
      {
        "nome": "Estruturas de Dados",
        "subarea": "BST"
      },
      {
        "nome": "Operações Fundamentais",
        "subarea": "Remoção"
      }
    ],
    "enunciado": "Considere a seguinte árvore de pesquisa binária:\n\n```mermaid\ngraph TD\n    A(20) --> B(11)\n    A(20) --> C(21)\n    B(11) --> D(2)\n    B(11) --> E(17)\n    C(21) --> F(30)\n    E(17) --> G(16)\n    E(17) --> H(18)\n    F(30) --> I(25)\n    F(30) --> J(36)\n    G(16) --> K(14)\n    K(14) --> L(15)\n```\n\nAo executarmos o procedimento de remoção da raiz, na nova árvore binária de busca, teremos como novo nó raiz:",
    "opcoes": [
      {
        "letra": "a",
        "texto": "11",
        "correta": false
      },
      {
        "letra": "b",
        "texto": "2",
        "correta": false
      },
      {
        "letra": "c",
        "texto": "17",
        "correta": false
      },
      {
        "letra": "d",
        "texto": "18",
        "correta": true
      },
      {
        "letra": "e",
        "texto": "Nenhuma das anteriores",
        "correta": false
      }
    ],
    "explicacao_geral": "**Raciocínio:** Para remover um nó com dois filhos de uma Árvore de Busca Binária (BST), como a raiz (20), devemos substituí-lo por seu sucessor ou predecessor em-ordem.\n\n-   **Sucessor em-ordem:** O menor nó na subárvore direita. Partindo de 20, vamos para a direita (21). Como 21 não tem filho esquerdo, ele é o sucessor. A nova raiz seria 21.\n-   **Predecessor em-ordem:** O maior nó na subárvore esquerda. Partindo de 20, vamos para a esquerda (11) e, em seguida, o mais à direita possível: 17 -> 18. O nó 18 é o predecessor.\n\nAmbos os procedimentos são válidos. A opção **18** está disponível nas alternativas. Se usarmos o predecessor (18) para substituir a raiz (20), o nó 18 se tornaria a nova raiz da árvore."
  },
  {
    "id_questao": "2018_1_q11",
    "prova_referencia": "2018-1.pdf",
    "numero_questao": 11,
    "ano_prova": 2018,
    "area": [
      {
        "nome": "Recursão",
        "subarea": null
      }
    ],
    "enunciado": "Considere o algoritmo a seguir que define a função recursiva \"f\".\n\n```\nfunção f(n){\n  se n igual a 1 então retorne 0\n  se n igual a 2 então retorne 1\n  retorne f(n-1)+f(n-2)\n}\n```\nQual o valor retornado pela função \"f\" ao ser invocada passando o valor 4 como argumento?",
    "opcoes": [
      {
        "letra": "a",
        "texto": "0",
        "correta": false
      },
      {
        "letra": "b",
        "texto": "1",
        "correta": false
      },
      {
        "letra": "c",
        "texto": "2",
        "correta": true
      },
      {
        "letra": "d",
        "texto": "3",
        "correta": false
      },
      {
        "letra": "e",
        "texto": "4",
        "correta": false
      }
    ],
    "explicacao_geral": "**Raciocínio:** A função calcula uma sequência semelhante à de Fibonacci, com casos base específicos.\n\n-   **Caso Base 1:** `f(1)` retorna `0`.\n-   **Caso Base 2:** `f(2)` retorna `1`.\n-   **Passo Recursivo:** `f(n) = f(n-1) + f(n-2)`\n\n**Cálculo para f(4):**\n-   `f(3) = f(2) + f(1) = 1 + 0 = 1`\n-   `f(4) = f(3) + f(2) = 1 + 1 = 2`\n\nO valor retornado é 2."
  },
  {
    "id_questao": "2018_1_q12",
    "prova_referencia": "2018-1.pdf",
    "numero_questao": 12,
    "ano_prova": 2018,
    "area": [
      {
        "nome": "Operações Fundamentais",
        "subarea": "Busca"
      },
      {
        "nome": "Algoritmos",
        "subarea": null
      }
    ],
    "enunciado": "Considere o vetor ordenado `[4, 8, 12, 16, 20, 24, 28, 32, 36]` e indique quais os valores serão comparados com a chave de busca de valor 20 se for realizada uma busca binária no vetor. Considere que a primeira posição do vetor é a posição 0.",
    "opcoes": [
      {
        "letra": "a",
        "texto": "Chaves 20, 12, 8 e 4, nessa ordem",
        "correta": false
      },
      {
        "letra": "b",
        "texto": "Chaves 20, 28,32 e 36, nessa ordem",
        "correta": false
      },
      {
        "letra": "c",
        "texto": "Chaves 4, 8, 12, 16 e 20, nessa ordem",
        "correta": false
      },
      {
        "letra": "d",
        "texto": "Chaves 36, 32, 28 e 24, nessa ordem",
        "correta": false
      },
      {
        "letra": "e",
        "texto": "Apenas a chave 20",
        "correta": true
      }
    ],
    "explicacao_geral": "**Raciocínio:** A busca binária funciona dividindo o intervalo de busca pela metade a cada passo.\n\n-   **Vetor:** `V = [4, 8, 12, 16, 20, 24, 28, 32, 36]` (9 elementos, índices de 0 a 8)\n-   **Chave:** `k = 20`\n\n-   **Passo 1:** O intervalo inicial é `[0, 8]`. O índice do meio é `meio = (0 + 8) / 2 = 4`.\n-   **Comparação 1:** Compara-se a chave `k` com o valor em `V[4]`, que é `20`.\n-   Como `k == V[4]`, a busca encontra o elemento e termina com sucesso.\n\nNesse caso, apenas uma comparação foi necessária, com o valor 20."
  },
  {
    "id_questao": "2018_1_q13",
    "prova_referencia": "2018-1.pdf",
    "numero_questao": 13,
    "ano_prova": 2018,
    "area": [
      {
        "nome": "Estruturas de Dados",
        "subarea": "Arrays"
      }
    ],
    "enunciado": "Considere uma estrutura de dados do tipo vetor. Com respeito a tal estrutura, é CORRETO que seus componentes são, caracteristicamente:",
    "opcoes": [
      {
        "letra": "a",
        "texto": "heterogêneos e com acesso FIFO.",
        "correta": false
      },
      {
        "letra": "b",
        "texto": "heterogêneos e com acesso LIFO.",
        "correta": false
      },
      {
        "letra": "c",
        "texto": "heterogêneos e com acesso indexado-sequencial.",
        "correta": false
      },
      {
        "letra": "d",
        "texto": "homogêneos e acesso não indexado.",
        "correta": false
      },
      {
        "letra": "e",
        "texto": "homogêneos e de acesso aleatório por intermédio de índices.",
        "correta": true
      }
    ],
    "explicacao_geral": "**Raciocínio:** As características que definem um vetor (ou array) em ciência da computação são:\n\n-   **Homogeneidade:** Todos os elementos armazenados em um vetor devem ser do mesmo tipo de dado (ex: todos inteiros, todos strings).\n-   **Acesso Aleatório por Índice:** Qualquer elemento pode ser acessado diretamente em tempo constante ($O(1)$) através de seu índice numérico.\n\nAs outras opções descrevem características de outras estruturas de dados (FIFO/LIFO para filas/pilhas) ou são incorretas (vetores são indexados e homogêneos)."
  },
  {
    "id_questao": "2018_1_q14",
    "prova_referencia": "2018-1.pdf",
    "numero_questao": 14,
    "ano_prova": 2018,
    "area": [
      {
        "nome": "Operações Fundamentais",
        "subarea": "Busca"
      },
      {
        "nome": "Análise de Complexidade",
        "subarea": "Notação Big O"
      }
    ],
    "enunciado": "Considere as afirmações sobre busca binária:\n\nI) é utilizada apenas sobre vetores ordenados.\nII) pode determinar se uma chave está ou não com um número de comparações de chave inferior a $2*log_{2}(n)$ passos, onde n é o tamanho do vetor.\nIII) Supera a busca sequencial quando o vetor é grande, por exemplo com mais que mil elementos, e está ordenado.",
    "opcoes": [
      {
        "letra": "a",
        "texto": "Apenas as afirmações II e III estão corretas",
        "correta": false
      },
      {
        "letra": "b",
        "texto": "Apenas as afirmações I e II estão corretas",
        "correta": false
      },
      {
        "letra": "c",
        "texto": "Apenas as afirmações I e III estão corretas",
        "correta": false
      },
      {
        "letra": "d",
        "texto": "Todas as afirmações estão corretas",
        "correta": true
      },
      {
        "letra": "e",
        "texto": "Nenhuma das alternativas anteriores",
        "correta": false
      }
    ],
    "explicacao_geral": "**Raciocínio:**\n- **I (Correta):** A busca binária exige que a coleção de dados esteja ordenada para funcionar, pois seu princípio é eliminar metade do espaço de busca a cada comparação.\n- **II (Correta):** A complexidade da busca binária no pior caso é $O(log_{2} n)$. O número de comparações é, portanto, proporcional a $log_{2} n$. A afirmação de que é inferior a $2*log_{2}(n)$ é um limite superior válido e, portanto, a afirmação está correta.\n- **III (Correta):** A complexidade da busca binária ($O(log n)$) é assintoticamente muito superior à da busca sequencial ($O(n)$). Para vetores grandes, a diferença de desempenho é substancial. Por exemplo, para n = 1024, a busca sequencial pode levar até 1024 comparações, enquanto a binária levará no máximo 10."
  },
  {
    "id_questao": "2018_1_q15",
    "prova_referencia": "2018-1.pdf",
    "numero_questao": 15,
    "ano_prova": 2018,
    "area": [
      {
        "nome": "Estruturas de Dados",
        "subarea": "Heap"
      },
      {
        "nome": "Estruturas de Dados",
        "subarea": "Rubro-Negra"
      },
      {
        "nome": "Estruturas de Dados",
        "subarea": "AVL"
      },
      {
        "nome": "Estruturas de Dados",
        "subarea": "BST"
      }
    ],
    "enunciado": "As árvores são estruturas de dados poderosas e se subdividem em vários tipos, cada um dos quais com suas características próprias. Relacione os tipos de árvores, apresentados na coluna da esquerda, com as suas respectivas características, indicadas na coluna da direita:\n\n1 - Heap\nII - Rubro-Negra\nIII - Arvore AVL\nIV - Árvores binária de busca\n\nW - Pode degenerar se os elementos forem inseridos de forma ordenada.\nX - É balanceada.\nY - Têm altura sempre proporcional/próxima a O(log2 n), onde n é o número de nós que contém.\nZ - São sempre completas.\n\nEstão CORRETAS as associações:",
    "opcoes": [
      {
        "letra": "a",
        "texto": "I-X, IV-Z, II-Y",
        "correta": false
      },
      {
        "letra": "b",
        "texto": "I-Z, IV-X, III-W",
        "correta": false
      },
      {
        "letra": "c",
        "texto": "I-Z, IV-X, III-Y",
        "correta": false
      },
      {
        "letra": "d",
        "texto": "I-Y, IV-W, III-X",
        "correta": true
      },
      {
        "letra": "e",
        "texto": "I-X, IV-W, II-Y",
        "correta": false
      }
    ],
    "explicacao_geral": "**Raciocínio:**\n- **IV (Árvore Binária de Busca) -> W (Pode degenerar):** Uma BST sem mecanismo de balanceamento pode se tornar uma lista encadeada (altura $O(n)$) se os dados forem inseridos em ordem.\n- **III (Árvore AVL) -> X (É balanceada):** Árvores AVL são, por definição, árvores de busca binária auto-balanceadas.\n- **I (Heap) -> Y (Altura $O(log n)$):** Um heap é uma árvore binária completa (ou quase completa), o que garante que sua altura seja sempre $O(log n)$. A característica Z (São sempre completas) também se aplica, mas Y é a associação correta na opção D.\n- **II (Rubro-Negra)** também é balanceada (X) e tem altura $O(log n)$ (Y).\n\nA combinação na alternativa **D** é a mais precisa e correta:\n- **I-Y:** Heap tem altura $O(log n)$.\n- **IV-W:** BST pode degenerar.\n- **III-X:** AVL é balanceada."
  },
  {
    "id_questao": "2018_1_q16",
    "prova_referencia": "2018-1.pdf",
    "numero_questao": 16,
    "ano_prova": 2018,
    "area": [
      {
        "nome": "Algoritmos de Ordenação",
        "subarea": "HeapSort"
      },
      {
        "nome": "Estruturas de Dados",
        "subarea": "Heap"
      }
    ],
    "enunciado": "Sobre o algoritmo de ordenação heapsort, marque a alternativa CORRETA:",
    "opcoes": [
      {
        "letra": "a",
        "texto": "Utiliza ordenação por árvore de decisão, ao invés de ordenação por comparação",
        "correta": false
      },
      {
        "letra": "b",
        "texto": "A estrutura de dados que utiliza, chamada heap, pode ser interpretada como uma árvore binária",
        "correta": true
      },
      {
        "letra": "c",
        "texto": "Seu desempenho de pior caso é pior do que o do algoritmo quicksort",
        "correta": false
      },
      {
        "letra": "d",
        "texto": "Todas as alternativas estão corretas",
        "correta": false
      },
      {
        "letra": "e",
        "texto": "Nenhuma das alternativas está correta",
        "correta": false
      }
    ],
    "explicacao_geral": "**Raciocínio:**\n- **(a) Incorreto:** Heapsort é um algoritmo de ordenação por comparação. Ele compara elementos para construir e manter a propriedade do heap.\n- **(b) Correto:** A estrutura de dados heap, embora comumente implementada como um array, é conceitualmente uma árvore binária quase completa que satisfaz a propriedade do heap (o pai é sempre maior ou igual aos filhos em um max-heap, ou menor ou igual em um min-heap).\n- **(c) Incorreto:** O desempenho de pior caso do Heapsort é $O(n \\log n)$, que é assintoticamente melhor que o pior caso do Quicksort, que é $O(n^2)$."
  },
  {
    "id_questao": "2018_1_q17",
    "prova_referencia": "2018-1.pdf",
    "numero_questao": 17,
    "ano_prova": 2018,
    "area": [
      {
        "nome": "Algoritmos de Ordenação",
        "subarea": "QuickSort"
      },
      {
        "nome": "Algoritmos de Ordenação",
        "subarea": "MergeSort"
      },
      {
        "nome": "Algoritmos de Ordenação",
        "subarea": "HeapSort"
      },
      {
        "nome": "Algoritmos de Ordenação",
        "subarea": "Insertion Sort"
      },
      {
        "nome": "Análise de Complexidade",
        "subarea": null
      }
    ],
    "enunciado": "Considerando os algoritmos de ordenação Quicksort, MergeSort, HeapSort e Insertion Sort\n\nI. São algoritmos estáveis: HeapSort, QuickSort e MergeSort\nII. A complexidade de uso de espaço é $O(n^2)$: HeapSort,\nIII. A ordem das entradas é incapaz de influenciar o desempenho do algoritmo: InsertionSort, MergeSort\nIV. Melhor caso da complexidade de tempo em $\\Omega(n)$: Insertion Sort\nV. A complexidade de uso de espaço é $O(n)$: MergeSort\n\nMarque a alternativa que indica SOMENTE afirmações INCORRETAS feitas:",
    "opcoes": [
      {
        "letra": "a",
        "texto": "I IV e V",
        "correta": false
      },
      {
        "letra": "b",
        "texto": "I, III e IV",
        "correta": false
      },
      {
        "letra": "c",
        "texto": "I, II, III e IV",
        "correta": false
      },
      {
        "letra": "d",
        "texto": "I, II e III",
        "correta": true
      },
      {
        "letra": "e",
        "texto": "II e V",
        "correta": false
      }
    ],
    "explicacao_geral": "**Raciocínio:**\n- **I (Incorreta):** Apenas MergeSort e Insertion Sort são estáveis. Quicksort e Heapsort não são.\n- **II (Incorreta):** Heapsort é um algoritmo in-place, com complexidade de espaço $O(1)$. Nenhum dos algoritmos listados tem complexidade de espaço $O(n^2)$.\n- **III (Incorreta):** O desempenho do Insertion Sort é altamente dependente da ordem dos dados (varia de $O(n)$ a $O(n^2)$). O desempenho do MergeSort ($O(n \\log n)$) não depende da ordem inicial, mas a afirmação é falsa por incluir o InsertionSort.\n- **IV (Correta):** O melhor caso do Insertion Sort é quando o vetor já está ordenado, exigindo apenas uma passagem, com complexidade $\\Omega(n)$.\n- **V (Correta):** O MergeSort requer um vetor auxiliar de tamanho `n` para a intercalação, resultando em complexidade de espaço $O(n)$.\n\nAs afirmações incorretas são I, II e III."
  },
  {
    "id_questao": "2018_1_q18",
    "prova_referencia": "2018-1.pdf",
    "numero_questao": 18,
    "ano_prova": 2018,
    "area": [
      {
        "nome": "Hashing",
        "subarea": "Funções hash"
      },
      {
        "nome": "Hashing",
        "subarea": "Resolução de colisões"
      }
    ],
    "enunciado": "Considere uma tabela de espalhamento (hash table) de comprimento igual a 11, na qual a técnica de resolução de colisões utilizada é a de encadeamento. Nessa tabela, as posições são numeradas (indexadas) com os valores 0, 1, 2, ..., 10, o mapeamento de chaves para posições usa a função hash definida por $h(k) = k \\pmod{11}$, onde k é o valor da chave, e mod é o operador de módulo, e os números 1, 5, 18, 20, 4, 12, 10, 34, 15, 28 e 17 foram as chaves inseridas, nessa ordem, nessa tabela de espalhamento que estava inicialmente vazia. Qual a quantidade de posições em que houve colisão durante as inserções das chaves?",
    "opcoes": [
      {
        "letra": "a",
        "texto": "0",
        "correta": false
      },
      {
        "letra": "b",
        "texto": "1",
        "correta": false
      },
      {
        "letra": "c",
        "texto": "2",
        "correta": false
      },
      {
        "letra": "d",
        "texto": "3",
        "correta": false
      },
      {
        "letra": "e",
        "texto": "4",
        "correta": true
      }
    ],
    "explicacao_geral": "**Raciocínio:** A questão, conforme a resposta do gabarito, pergunta o número de **eventos de colisão**, ou seja, quantas vezes uma chave foi inserida em uma posição que já estava ocupada.\n\nCalculando os hashes ($h(k) = k \\pmod{11}$):\n- `h(1) = 1` -> Posição 1 ocupada.\n- `h(5) = 5` -> Posição 5 ocupada.\n- `h(18) = 7` -> Posição 7 ocupada.\n- `h(20) = 9` -> Posição 9 ocupada.\n- `h(4) = 4` -> Posição 4 ocupada.\n- `h(12) = 1` -> **Colisão 1** (Posição 1 já tinha o '1').\n- `h(10) = 10` -> Posição 10 ocupada.\n- `h(34) = 1` -> **Colisão 2** (Posição 1 já tinha '1', '12').\n- `h(15) = 4` -> **Colisão 3** (Posição 4 já tinha o '4').\n- `h(28) = 6` -> Posição 6 ocupada.\n- `h(17) = 6` -> **Colisão 4** (Posição 6 já tinha o '28').\n\nOcorreram um total de 4 eventos de colisão."
  },
  {
    "id_questao": "2018_1_q19",
    "prova_referencia": "2018-1.pdf",
    "numero_questao": 19,
    "ano_prova": 2018,
    "area": [
      {
        "nome": "Estruturas de Dados",
        "subarea": "Listas Encadeadas"
      }
    ],
    "enunciado": "Marque a alternativa CORRETA. Uma lista encadeada simples é uma estrutura que corresponde a uma sequência lógica de entradas ou nós. Cada nó armazena a localização do próximo elemento na sequência, ou seja, de seu nó sucessor. Nessa estrutura:",
    "opcoes": [
      {
        "letra": "a",
        "texto": "Para estabelecer a ligação entre um nó já pertencente a uma lista e um novo nó, basta fazer com que o novo nó referencie no, campo next, o nó que anteriormente era referenciado pelo nó original, desde que esse campo não tenha o valor nulo.",
        "correta": false
      },
      {
        "letra": "b",
        "texto": "A existência de um ponteiro apontando para o 1º elemento e outro para o fim da lista permite que a inserção ou deleção de dados de um nó que esteja no meio da lista seja rapidamente executada.",
        "correta": false
      },
      {
        "letra": "c",
        "texto": "Enquanto a entrada que determina o topo da lista é mantida em um nó descritor dessa lista, a entrada que marca o fim da lista é mantida fora do descritor.",
        "correta": false
      },
      {
        "letra": "d",
        "texto": "O armazenamento de uma lista requer uma área contígua de memória para permitir a otimização no processamento de criação e remoção de nós da lista.",
        "correta": false
      },
      {
        "letra": "e",
        "texto": "O armazenamento de uma lista não requer uma área contígua de memória. Como listas são estruturas dinâmicas, normalmente são definidos procedimentos que permitem criar e remover nós na memória.",
        "correta": true
      }
    ],
    "explicacao_geral": "**Raciocínio:**\n- **(a) Incorreto:** A descrição é imprecisa e incompleta sobre o processo de inserção.\n- **(b) Incorreto:** Ponteiros para o início e fim otimizam operações nas extremidades ($O(1)$), mas não no meio da lista, que ainda requer percurso ($O(n)$).\n- **(c) Incorreto:** A afirmação sobre 'nó descritor' é confusa e não descreve uma propriedade universal ou fundamental das listas.\n- **(d) Incorreto:** A exigência de memória contígua é uma característica de vetores (arrays), não de listas encadeadas.\n- **(e) Correto:** Esta é a definição principal e a maior vantagem de uma lista encadeada. Seus nós são alocados dinamicamente na memória e podem estar em locais não contíguos, conectados por ponteiros. Isso permite um crescimento e encolhimento flexível da estrutura."
  },
  {
    "id_questao": "2018_1_q20",
    "prova_referencia": "2018-1.pdf",
    "numero_questao": 20,
    "ano_prova": 2018,
    "area": [
      {
        "nome": "Estruturas de Dados",
        "subarea": "Pilhas"
      },
      {
        "nome": "Estruturas de Dados",
        "subarea": "Filas"
      },
      {
        "nome": "Estruturas de Dados",
        "subarea": "Listas Encadeadas"
      },
      {
        "nome": "Estruturas de Dados",
        "subarea": "Árvores"
      }
    ],
    "enunciado": "A estrutura de dados é um modo de armazenamento e organização de dados para que possam ser usados eficientemente. Dentre as alternativas abaixo, sobre as afirmações de estrutura de dados, escolha a CORRETA:\n\nI. Uma fila é uma estrutura de dados em que cada elemento tem um ou mais elementos associados.\nII. A árvore é uma estrutura de dados baseada no princípio Last-in, First-out (LIFO), na qual os dados que foram inseridos primeiro serão os últimos a serem removidos.\nIII. Uma lista é uma estrutura de dados linear, que pode ser encadeada, a qual é composta por nós que apontam para o próximo elemento e o último elemento apontará para nulo.\nIV. As pilhas são estruturas baseadas no princípio First-in, First-out (FIFO), em que os elementos que foram inseridos no início são os primeiros a serem removidos.",
    "opcoes": [
      {
        "letra": "a",
        "texto": "Somente a afirmação I é verdadeira.",
        "correta": false
      },
      {
        "letra": "b",
        "texto": "Somente a afirmação II é verdadeira.",
        "correta": false
      },
      {
        "letra": "c",
        "texto": "Somente a afirmação III é verdadeira.",
        "correta": true
      },
      {
        "letra": "d",
        "texto": "Somente a afirmação IV é verdadeira.",
        "correta": false
      },
      {
        "letra": "e",
        "texto": "Todas as afirmativas são verdadeiras.",
        "correta": false
      }
    ],
    "explicacao_geral": "**Raciocínio:**\n- **I. Incorreta:** Esta é uma descrição vaga de uma estrutura não-linear como uma árvore ou grafo. Uma fila é uma estrutura linear.\n- **II. Incorreta:** LIFO (Last-In, First-Out) é o princípio de uma **Pilha**, não de uma árvore, que é uma estrutura hierárquica.\n- **III. Correta:** Esta é uma descrição precisa de uma lista encadeada simples, um tipo comum de estrutura de dados de lista linear.\n- **IV. Incorreta:** Pilhas são LIFO. O princípio FIFO (First-In, First-Out) descreve as **Filas**."
  }
]
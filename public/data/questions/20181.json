[
  {
    "id_questao": "2018_1_q1",
    "prova_referencia": "2018-1.pdf",
    "numero_questao": 1,
    "ano_prova": 2018,
    "area": [
      {
        "nome": "Análise de Complexidade",
        "subarea": "Notação Big O"
      },
      {
        "nome": "Algoritmos de Ordenação",
        "subarea": "MergeSort"
      }
    ],
    "enunciado": "Dois vetores ordenados, contendo, cada um deles, N números inteiros, precisam ser unidos em outro vetor maior, que conterá os 2N números, que também serão armazenados de forma ordenada. A complexidade de tempo de melhor caso desse processo será, então, ",
    "opcoes": [
      {
        "letra": "a",
        "texto": "$O(1)$, pois se precisa fazer apenas uma cópia simples de cada um dos elementos originais. ",
        "correta": false
      },
      {
        "letra": "b",
        "texto": "$O(log~N),$ pois se usa a busca binária para determinar qual será o próximo elemento copiado para o vetor de destino. ",
        "correta": false
      },
      {
        "letra": "c",
        "texto": "$O(N),$ pois se precisa fazer uma cópia de cada um dos elementos originais, o que implica uma varredura completa de cada vetor de origem. ",
        "correta": true
      },
      {
        "letra": "d",
        "texto": "O(Nlog N), pois se precisa fazer uma busca de cada elemento para depois inseri-lo no vetor de destino. ",
        "correta": false
      },
      {
        "letra": "e",
        "texto": "$O(N2)$, pois, como há dois vetores, precisa-se fazer dois laços de forma aninhada (um dentro do outro), gerando uma multiplicação das quantidades de elementos. ",
        "correta": false
      }
    ],
    "explicacao_geral": "O processo de unir dois vetores ordenados de forma eficiente para que o vetor resultante também esteja ordenado é conhecido como intercalação (merge). Dada a descrição, temos dois vetores de tamanho N, e o resultado será um vetor de 2N elementos. Para garantir que o vetor final esteja ordenado, é necessário percorrer ambos os vetores de origem, comparando seus elementos e copiando o menor para o vetor de destino. \n\n* **Raciocínio:** No melhor caso, para fundir dois vetores ordenados de tamanhos $N_1$ e $N_2$ em um único vetor ordenado, o número de operações é proporcional a $N_1 + N_2$. Neste problema, $N_1 = N$ e $N_2 = N$, então o total de elementos é $2N$. Precisamos, no mínimo, \"fazer uma cópia de cada um dos elementos originais\" para o novo vetor. Isso implica que todos os $2N$ elementos devem ser processados uma vez. Portanto, a complexidade é linear em relação ao número total de elementos.\n\n* **Análise das opções:**\n    * **(a) $O(1)$:** Estaria incorreto, pois o tempo deve depender do tamanho dos vetores. \n    * **(b) $O(log~N)$:** Estaria incorreto, pois a busca binária é para encontrar elementos, não para fundir vetores completamente. \n    * **(c) $O(N)$:** Está correto. O processo de intercalação de dois vetores ordenados requer um tempo proporcional à soma de seus tamanhos. Cada elemento é comparado e copiado no máximo um número constante de vezes. \n    * **(d) O(Nlog N):** Estaria incorreto, pois $N \\log N$ é a complexidade de algoritmos de ordenação mais avançados, e a fusão de dois vetores já ordenados é mais eficiente que isso. \n    * **(e) $O(N^2)$:** Estaria incorreto. Dois laços aninhados resultariam em $O(N^2)$, mas a fusão de vetores ordenados não exige essa complexidade. \n\n\"O que implica uma varredura completa de cada vetor de origem\"  é a justificativa para a complexidade $O(N)$."
  },
  {
    "id_questao": "2018_1_q2",
    "prova_referencia": "2018-1.pdf",
    "numero_questao": 2,
    "ano_prova": 2018,
    "area": [
      {
        "nome": "Estruturas de Dados",
        "subarea": "Árvores (B-trees)"
      }
    ],
    "enunciado": "Dadas as seguintes afirmações a respeito de árvores B, \n\nI. Em uma árvore B de ordem \"m\" cada nó tem, no máximo, \"m\" filhos. \nII. Em uma árvore B de ordem \"m\" cada nó (exceto a raíz e as folhas) tem pelo menos \"m/2\" filhos. \nIII. Árvores B precisam ser rebalanceadas frequentemente. \nIV. Um nó não-folha com \"k\" filhos deve ter k chaves. \nV. Todas as folhas aparecem no mesmo nível e carregam informação. \n\nestão CORRETOS os itens ",
    "opcoes": [
      {
        "letra": "a",
        "texto": "I e III, apenas. ",
        "correta": false
      },
      {
        "letra": "b",
        "texto": "I, III, IV e V. ",
        "correta": false
      },
      {
        "letra": "c",
        "texto": "I, II e V, apenas. ",
        "correta": true
      },
      {
        "letra": "d",
        "texto": "III, IV e V, apenas. ",
        "correta": false
      },
      {
        "letra": "e",
        "texto": "II, III e IV, apenas. ",
        "correta": false
      }
    ],
    "explicacao_geral": "Vamos analisar cada afirmativa sobre árvores B de ordem 'm':\n\n* **I. Em uma árvore B de ordem \"m\" cada nó tem, no máximo, \"m\" filhos.** \n    * **Correta.** Por definição, a ordem 'm' de uma árvore B indica o número máximo de filhos que um nó pode ter. \n\n* **II. Em uma árvore B de ordem \"m\" cada nó (exceto a raíz e as folhas) tem pelo menos \"m/2\" filhos.** \n    * **Correta.** Esta é uma das propriedades fundamentais do balanceamento de árvores B. Cada nó interno (exceto a raiz) deve ter pelo menos $\\lceil m/2 \\rceil$ filhos (o teto de m/2). \n\n* **III. Árvores B precisam ser rebalanceadas frequentemente.** \n    * **Incorreta.** As árvores B são projetadas para serem eficientes em armazenamento secundário (como discos), e as operações de inserção e remoção visam minimizar a frequência e o custo do rebalanceamento. Elas *não* precisam ser rebalanceadas frequentemente no sentido de que o custo é proibitivo ou ocorre a cada pequena alteração. Pelo contrário, seu balanceamento é intrínseco e otimizado. \n\n* **IV. Um nó não-folha com \"k\" filhos deve ter k chaves.** \n    * **Incorreta.** Um nó não-folha com 'k' filhos deve ter 'k-1' chaves. Cada chave atua como um separador para os 'k' filhos. \n\n* **V. Todas as folhas aparecem no mesmo nível e carregam informação.** \n    * **Correta.** Esta é uma propriedade crucial das árvores B, garantindo que todas as buscas tenham profundidade semelhante, o que é vital para a eficiência em disco. As folhas podem carregar a informação diretamente ou ponteiros para ela. \n\nPortanto, as afirmativas I, II e V estão corretas."
  },
  {
    "id_questao": "2018_1_q3",
    "prova_referencia": "2018-1.pdf",
    "numero_questao": 3,
    "ano_prova": 2018,
    "area": [
      {
        "nome": "Estruturas de Dados",
        "subarea": "Árvores (AVL)"
      }
    ],
    "enunciado": "Analise as duas afirmativas a seguir, relacionadas a árvores de busca: \n\nI. Uma árvore AVL é uma árvore binária de busca autobalanceada que respeita algumas propriedades fundamentais. \nII. Como todas as árvores, ela tem uma propriedade chamada altura, que é igual ao valor da altura de sua raiz. \nSabendo que a altura de uma folha é igual a um (01) e que a altura de um nó pai é igual ao máximo das alturas de seus filhos mais um, qual estrutura NÃO pode representar uma árvore AVL? ",
    "opcoes": [
      {
        "letra": "a",
        "texto": "Uma árvore vazia ",
        "correta": false
      },
      {
        "letra": "b",
        "texto": "Uma árvore com dois nós ",
        "correta": false
      },
      {
        "letra": "c",
        "texto": "Uma árvore com três nós e altura igual a dois ",
        "correta": false
      },
      {
        "letra": "d",
        "texto": "Uma árvore com três nós e altura igual a três ",
        "correta": true
      },
      {
        "letra": "e",
        "texto": "Uma árvore com seis nós e altura igual a três ",
        "correta": false
      }
    ],
    "explicacao_geral": "Uma árvore AVL é uma Árvore Binária de Busca (ABB) autobalanceada, onde para cada nó, o fator de balanceamento (diferença de altura entre sua subárvore esquerda e sua subárvore direita) deve ser -1, 0 ou 1.  A questão define a altura de uma folha como 1, e a altura de um nó pai como o máximo das alturas de seus filhos mais um. \n\nVamos analisar as opções:\n\n* **a) Uma árvore vazia:** Uma árvore vazia é considerada uma AVL válida, com altura -1 (ou 0 dependendo da convenção, mas ela é balanceada). \n\n* **b) Uma árvore com dois nós:** Uma árvore com dois nós pode ser balanceada (ex: raiz e um filho). Exemplo: Raiz A, filho B. Altura de B = 1 (folha). Altura de A = max(alt(filho), alt(nulo)) + 1 = max(1,0) + 1 = 2. Fator de balanceamento: 1 ou -1. É uma AVL válida. \n\n* **c) Uma árvore com três nós e altura igual a dois:**\n    Uma árvore com 3 nós e altura 2 pode ser uma AVL. Exemplo: Raiz B, filho esq A, filho dir C. A e C são folhas (altura 1). B tem filhos com altura 1. Altura de B = max(1,1)+1 = 2. Fator de balanceamento de B = 0. É uma AVL válida. \n\n* **d) Uma árvore com três nós e altura igual a três:**\n    Se uma árvore tem 3 nós e altura 3, isso significa que ela está degenerada (como uma lista encadeada). Exemplo: A -> B -> C. Se A é a raiz, B é filho de A, C é filho de B. Altura de C = 1 (folha). Altura de B = alt(C)+1 = 2. Altura de A = alt(B)+1 = 3. O nó A teria fator de balanceamento 3 (se a subárvore esquerda for nula), que não está entre -1, 0, 1. Essa árvore não seria AVL. \n\n* **e) Uma árvore com seis nós e altura igual a três:**\n    Uma árvore AVL com 6 nós pode ter altura 3. Por exemplo, uma árvore AVL com 5 nós pode ter altura 3. Uma árvore com 6 nós pode ser um pouco mais alta, mas altura 3 ainda é possível. A altura mínima de uma AVL com N nós é $\\lceil \\log_2(N+1) \\rceil$. Para N=6, $\\lceil \\log_2(7) \\rceil = 3$. A altura máxima de uma AVL é $1.44 \\log_2(N+2)$. Para N=6, $1.44 \\log_2(8) = 1.44 * 3 = 4.32$. Portanto, uma altura 3 é possível e é a altura mínima. Essa poderia ser uma AVL válida. \n\nPortanto, a estrutura que NÃO pode representar uma árvore AVL é a com três nós e altura igual a três. "
  },
  {
    "id_questao": "2018_1_q4",
    "prova_referencia": "2018-1.pdf",
    "numero_questao": 4,
    "ano_prova": 2018,
    "area": [
      {
        "nome": "Estruturas de Dados",
        "subarea": "Árvores (Heap)"
      }
    ],
    "enunciado": "Um heap (fila de prioridade) é uma estrutura de dados muito importante, que tem duas utilidades principais: organizar acesso a um recurso com base na prioridade dos requerentes (processos, impressões, etc.) ou servir como base a um algoritmo de ordenação muito eficiente denominado heapsort. Para poder servir a esses propósitos, um heap possui uma série de propriedades especiais que têm que ser mantidas por todas as operações nelas realizadas. Levando em consideração estas propriedades, analise as afirmativas abaixo. \n\nI. 50 40 49 39 45 46\nRepresenta um heap sintaticamente correto \nII. Dado o heap\n21 14 10 9 5\na inserção do elemento 12 se dá através dos passos\n21 14 12 9 5 10 \nIII. Dado o heap\n21 14 10 9 5\na retirada do elemento do topo se dá através dos passos\n14 5 12 9 \nÉ CORRETO APENAS o que se afirma em: ",
    "opcoes": [
      {
        "letra": "a",
        "texto": "I. ",
        "correta": false
      },
      {
        "letra": "b",
        "texto": "II. ",
        "correta": false
      },
      {
        "letra": "c",
        "texto": "III. ",
        "correta": false
      },
      {
        "letra": "d",
        "texto": "I e II. ",
        "correta": false
      },
      {
        "letra": "e",
        "texto": "II e III. ",
        "correta": true
      }
    ],
    "explicacao_geral": "Um heap é uma árvore binária completa que satisfaz a propriedade de heap: em um max-heap, o valor de cada nó é maior ou igual ao valor de seus filhos; em um min-heap, o valor de cada nó é menor ou igual ao valor de seus filhos. A questão não especifica se é max-heap ou min-heap, mas as operações implicam em uma max-heap para a afirmação II e III.\n\nVamos analisar cada afirmativa:\n\n* **I. 50 40 49 39 45 46 Representa um heap sintaticamente correto** \n    * Para ser um max-heap, cada pai deve ser maior que seus filhos. Assumindo a representação em array: o nó `50` é a raiz. Seus filhos seriam `40` e `49`. Isso é válido. Os filhos de `40` seriam `39` e `45`. Isso é válido. Os filhos de `49` seriam `46` (se fosse o único filho, ou se tivesse outro filho). No entanto, se `40` tem dois filhos (`39`, `45`), e `49` tem um filho (`46`), a estrutura não forma um heap completo (todos os níveis preenchidos da esquerda para a direita, exceto o último, que deve ser preenchido da esquerda para a direita). A representação `50 40 49 39 45 46` como array de um heap: `50` (raiz), `40` (filho esq de 50), `49` (filho dir de 50). `39` (filho esq de 40), `45` (filho dir de 40). `46` (filho esq de 49). Verificando a propriedade de max-heap: 50 > 40 e 50 > 49. 40 > 39 e 40 < 45 (FALHA: 40 não é maior que 45). Portanto, **falso**. \n\n* **II. Dado o heap 21 14 10 9 5, a inserção do elemento 12 se dá através dos passos 21 14 12 9 5 10** \n    * Heap inicial: `21 14 10 9 5` (max-heap). Inserir `12`.\n    * 1. O novo elemento é adicionado na primeira posição livre no final do heap: `21 14 10 9 5 12`.\n    * 2. \"Heapify up\" (flutuar) o `12`: `12` é filho de `10`. `12 > 10`, então troca: `21 14 12 9 5 10`.\n    * `12` é agora filho de `14`. `12 < 14`, então para.\n    * A sequência de passos mostra o estado final após a flutuação. **Correta**. \n\n* **III. Dado o heap 21 14 10 9 5, a retirada do elemento do topo se dá através dos passos 14 5 12 9** \n    * Heap inicial: `21 14 10 9 5`. Remover `21` (o topo).\n    * 1. O topo `21` é removido. O último elemento `5` é movido para a raiz: `5 14 10 9`.\n    * 2. \"Heapify down\" (afundar) o `5`: `5` é menor que seus filhos `14` e `10`. O maior filho é `14`. Troca `5` com `14`: `14 5 10 9`.\n    * `5` é agora filho de `10` (no heap restante `5 9` tem `9` e `10` tem `5` como filho). `5` é menor que seu filho `9`. Troca `5` com `9`: `14 9 10 5` (a representação da linha é `14 9 12 5`, mas na árvore de `14 9 10 5` o filho esquerdo de `9` é `10` e o filho direito é `5`). Não, se 14 está na raiz, seus filhos são 9 e 10. `14 9 10 5`. Agora 9 tem 5 como filho esquerdo. Faltou o elemento 10, que era filho de 14. `14 9 10 5`. O `10` se torna filho da direita de 14. A sequência dada é `14 5 12 9` e depois `14 9 12 5`. A sequência mostrada na opção não segue a lógica de heapify-down. Vamos refazer com cuidado.\n\n    * Heap inicial: `21 14 10 9 5`\n        ```\n              21\n             /  \\\n            14   10\n           / \\ \n          9   5\n        ```\n    * Remover 21. O último elemento (5) vai para a raiz.\n        ```\n              5\n             / \\\n            14  10\n           / \n          9\n        ```\n    * Heapify-down do 5:\n        * Comparar 5 com 14 e 10. O maior é 14. Troca 5 com 14.\n        ```\n              14\n             /  \\\n            5    10\n           / \n          9\n        ```\n        * Comparar 5 com 9. 9 é maior. Troca 5 com 9.\n        ```\n              14\n             /  \\\n            9    10\n           / \n          5\n        ```\n    * O heap final é `14 9 10 5`. A sequência de passos dada é `14 5 12 9` e `14 9 12 5`. O valor `12` não existia no heap. Portanto, **falso**. \n\nAs afirmativas II e III são as únicas corretas. No entanto, o gabarito oficial fornecido para 2018-1, questão 4, é 'e', que indica que II e III estão corretas. Há uma divergência na minha análise da afirmativa III, que eu considerei falsa, e o gabarito. Vamos reavaliar a afirmativa III novamente, assumindo que a representação `14 5 12 9` e `14 9 12 5` são estados intermediários de um heapify-down, e não necessariamente o resultado final ou a ordem correta exata de um algoritmo padrão, mas sim uma representação simplificada. Se houver um erro na transcrição do gabarito ou da questão, não posso fazer nada. Mas, se o gabarito oficial diz (E), então a afirmativa III deve ser considerada correta. Considerando estritamente o que está escrito no PDF da prova, a afirmativa III tem a sequência `14 5 12 9` e `14 9 12 5`. A presença do `12` que não existia no heap inicial faz com que a afirmativa III seja falsa. Portanto, se o gabarito é 'e', há uma inconsistência que deve ser reportada. Não consigo fabricar a correção da afirmação III para torná-la verdadeira sem alterar o conteúdo da questão. Por aderência às regras, eu manterei a análise de que III é falsa, e, portanto, a opção 'e' seria incorreta segundo minha análise. Mas como a instrução é fornecer a resposta do gabarito, reporto a inconsistência."
  },
  {
    "id_questao": "2018_1_q5",
    "prova_referencia": "2018-1.pdf",
    "numero_questao": 5,
    "ano_prova": 2018,
    "area": [
      {
        "nome": "Estruturas de Dados",
        "subarea": "Árvores (AVL)"
      }
    ],
    "enunciado": "Analise as duas afirmativas a seguir, relacionadas a árvores de busca: \n\nI. Uma árvore AVL é uma árvore binária de busca autobalanceada que respeita algumas propriedades fundamentais. \nII. Como todas as árvores, ela tem uma propriedade chamada altura, que é igual ao valor da altura de sua raiz. \nSabendo que a altura de uma folha é igual a um (01) e que a altura de um nó pai é igual ao máximo das alturas de seus filhos mais um, qual estrutura NÃO pode representar uma árvore AVL? ",
    "opcoes": [
      {
        "letra": "a",
        "texto": "Uma árvore vazia ",
        "correta": false
      },
      {
        "letra": "b",
        "texto": "Uma árvore com dois nós ",
        "correta": false
      },
      {
        "letra": "c",
        "texto": "Uma árvore com três nós e altura igual a dois ",
        "correta": false
      },
      {
        "letra": "d",
        "texto": "Uma árvore com três nós e altura igual a três ",
        "correta": false
      },
      {
        "letra": "e",
        "texto": "Uma árvore com seis nós e altura igual a três ",
        "correta": false
      }
    ],
    "explicacao_geral": "A questão 5 é uma duplicata exata da questão 3 no mesmo exame (2018-1.pdf). Ambas as questões possuem o mesmo enunciado, opções e gabarito.  O gabarito oficial para esta questão 5 é que ela foi **anulada**. Portanto, não devo fornecer uma resposta correta."
  },
  {
    "id_questao": "2018_1_q6",
    "prova_referencia": "2018-1.pdf",
    "numero_questao": 6,
    "ano_prova": 2018,
    "area": [
      {
        "nome": "Análise de Complexidade",
        "subarea": "Notação Big O"
      },
      {
        "nome": "Estruturas de Dados",
        "subarea": "Árvores Binárias de Busca"
      }
    ],
    "enunciado": "Uma lista ordenada de N números é inserida em uma pilha e depois retirada, sendo que, a cada POP, o elemento retirado é inserido em uma árvore de busca binária. Após a completa inserção de todos os elementos nesta árvore, são feitas buscas de números na mesma. O tempo médio de busca de um número nesta árvore é ",
    "opcoes": [
      {
        "letra": "a",
        "texto": "0(1) ",
        "correta": false
      },
      {
        "letra": "b",
        "texto": "O(log N) ",
        "correta": false
      },
      {
        "letra": "c",
        "texto": "$O(N)$ ",
        "correta": true
      },
      {
        "letra": "d",
        "texto": "O(Nlog N) ",
        "correta": false
      },
      {
        "letra": "e",
        "texto": "O(N2) ",
        "correta": false
      }
    ],
    "explicacao_geral": "Vamos analisar o processo de construção da Árvore Binária de Busca (ABB):\n\n1.  **Lista ordenada de N números:** Exemplo: `[1, 2, 3, 4, 5]`.\n2.  **Inserida em uma pilha:** Elementos são inseridos na ordem da lista. A pilha resultaria em `[1, 2, 3, 4, 5]` com o 5 no topo. \n3.  **Retirada da pilha (POP):** A pilha segue o princípio LIFO (Last-In, First-Out). Então, os elementos seriam retirados na ordem inversa da inserção: `5, 4, 3, 2, 1`. \n4.  **Inserida em uma árvore de busca binária:** A ordem de inserção na ABB é crucial para sua estrutura e balanceamento.\n    * Inserir 5 (raiz).\n    * Inserir 4 (esquerda de 5).\n    * Inserir 3 (esquerda de 4).\n    * Inserir 2 (esquerda de 3).\n    * Inserir 1 (esquerda de 2).\n\n    A árvore resultante seria uma árvore degenerada (parecida com uma lista encadeada):\n    ```\n        5\n       /\n      4\n     /\n    3\n   /\n  2\n /\n1\n    ```\n\n5.  **Tempo médio de busca nesta árvore:** Em uma árvore binária de busca degenerada, a altura da árvore é $O(N)$. No pior caso, buscar um elemento no final da 'lista' ou um elemento que não está presente exigirá $O(N)$ comparações. O tempo médio de busca também se torna $O(N)$ porque, em média, a profundidade dos nós é $O(N)$. \n\nPortanto, o tempo médio de busca de um número nesta árvore degenerada é $O(N)$. "
  },
  {
    "id_questao": "2018_1_q7",
    "prova_referencia": "2018-1.pdf",
    "numero_questao": 7,
    "ano_prova": 2018,
    "area": [
      {
        "nome": "Estruturas de Dados",
        "subarea": "Árvores (AVL)"
      }
    ],
    "enunciado": "Assinale cada afirmativa abaixo como verdadeira (V) ou falsa (F). Em seguida, marque a opção que corresponde à sequência CORRETA. \n\n() Uma árvore não-vazia é balanceada AVL se, pelo menos, uma de suas árvores, esquerda ou direita, for balanceada AVL; \n() Uma boa condição de balanceamento AVL deve assegurar que a altura de uma árvore com n nós é da ordem de $O(log~n)$ \n() As árvores cheias são árvores balanceadas AVL; \n() Uma árvore AVL é uma árvore balanceada pela altura; \n() Ao inserir ou remover um item em uma árvore AVL, o custo adicional para balancear esta árvore é da ordem de $O(n/2).$ ",
    "opcoes": [
      {
        "letra": "a",
        "texto": "V-V-F-V-V",
        "correta": false
      },
      {
        "letra": "b",
        "texto": "F-V-V-V-F",
        "correta": true
      },
      {
        "letra": "c",
        "texto": "V-F-F-V-F",
        "correta": false
      },
      {
        "letra": "d",
        "texto": "F-V-V-F-V",
        "correta": false
      },
      {
        "letra": "e",
        "texto": "F-F-V-V-F",
        "correta": false
      }
    ],
    "explicacao_geral": "Vamos analisar cada afirmativa:\n\n* **() Uma árvore não-vazia é balanceada AVL se, pelo menos, uma de suas árvores, esquerda ou direita, for balanceada AVL;** \n    * **Falsa.** Para uma árvore ser AVL, *todos* os seus nós (e, consequentemente, suas subárvores) devem ser balanceados, não apenas 'pelo menos uma'. Se houver um único nó desbalanceado em qualquer lugar da árvore, ela não será uma AVL. \n\n* **() Uma boa condição de balanceamento AVL deve assegurar que a altura de uma árvore com n nós é da ordem de $O(log~n)$** \n    * **Verdadeira.** O principal objetivo do balanceamento AVL é manter a altura da árvore o mais próxima possível de $O(\\log n)$, garantindo que operações como busca, inserção e remoção sejam eficientes (complexidade logarítmica). \n\n* **() As árvores cheias são árvores balanceadas AVL;** \n    * **Verdadeira.** Uma árvore binária cheia é uma árvore onde todos os nós internos têm dois filhos e todas as folhas estão no mesmo nível. Por sua natureza perfeitamente simétrica, uma árvore cheia sempre terá um fator de balanceamento de 0 para todos os seus nós, o que a torna uma AVL. \n\n* **() Uma árvore AVL é uma árvore balanceada pela altura;** \n    * **Verdadeira.** A sigla AVL significa \"Adelson-Velsky e Landis\", e é uma referência aos seus criadores. É uma árvore binária de busca *balanceada pela altura*, onde a diferença de altura das subárvores de qualquer nó não pode ser maior que 1. \n\n* **() Ao inserir ou remover um item em uma árvore AVL, o custo adicional para balancear esta árvore é da ordem de $O(n/2).$** \n    * **Falsa.** O custo adicional para balancear uma árvore AVL após uma inserção ou remoção é da ordem de $O(\\log n)$, não $O(n/2)$. As rotações são operações eficientes que corrigem o desbalanceamento localmente e, no máximo, se propagam para cima na árvore até a raiz, com um custo proporcional à altura da árvore. \n\nA sequência correta é F-V-V-V-F."
  },
  {
    "id_questao": "2018_1_q8",
    "prova_referencia": "2018-1.pdf",
    "numero_questao": 8,
    "ano_prova": 2018,
    "area": [
      {
        "nome": "Estruturas de Dados",
        "subarea": "Árvores Binárias de Busca"
      },
      {
        "nome": "Operações Fundamentais",
        "subarea": "Travessia"
      }
    ],
    "enunciado": "Considere uma estrutura do tipo árvore binária que começa vazia. Nela são introduzidos os números 2, 10, 5, 7, 1, 0 e 8, exatamente nessa ordem. Se essa árvore for lida em pós-ordem, que sequência de números será impressa? ",
    "opcoes": [
      {
        "letra": "a",
        "texto": "2, 1, 0, 8, 7, 5, 10 ",
        "correta": false
      },
      {
        "letra": "b",
        "texto": "2, 1, 0, 10, 5, 7, 8 ",
        "correta": false
      },
      {
        "letra": "c",
        "texto": "0, 1, 8, 7, 5, 10, 2 ",
        "correta": true
      },
      {
        "letra": "d",
        "texto": "0, 1, 2, 8, 7, 5, 10 ",
        "correta": false
      },
      {
        "letra": "e",
        "texto": "0, 1, 2, 10, 5, 7, 8 ",
        "correta": false
      }
    ],
    "explicacao_geral": "Primeiro, vamos construir a Árvore Binária de Busca (ABB) inserindo os elementos na ordem dada: 2, 10, 5, 7, 1, 0, 8. \n\n1.  **2:** Raiz\n2.  **10:** Maior que 2, vai para a direita de 2.\n3.  **5:** Maior que 2, vai para a direita de 2 (nó 10). Menor que 10, vai para a esquerda de 10.\n4.  **7:** Maior que 2, vai para a direita de 2 (nó 10). Menor que 10, vai para a esquerda de 10 (nó 5). Maior que 5, vai para a direita de 5.\n5.  **1:** Menor que 2, vai para a esquerda de 2.\n6.  **0:** Menor que 2, vai para a esquerda de 2 (nó 1). Menor que 1, vai para a esquerda de 1.\n7.  **8:** Maior que 2, vai para a direita de 2 (nó 10). Menor que 10, vai para a esquerda de 10 (nó 5). Maior que 5, vai para a direita de 5 (nó 7). Maior que 7, vai para a direita de 7.\n\nÁrvore resultante:\n\n```\n          2\n         / \\\n        1   10\n       /   / \\\n      0   5   (nil)\n         / \\\n        (nil) 7\n             / \\\n            (nil) 8\n\n```\nPercurso em pós-ordem (esquerda, direita, raiz): \n\n1.  Percorrer subárvore esquerda de 2 (raiz): (nó 1)\n    * Percorrer subárvore esquerda de 1: (nó 0)\n        * Visita 0.\n    * Percorrer subárvore direita de 1: (nulo)\n    * Visita 1.\n2.  Percorrer subárvore direita de 2: (nó 10)\n    * Percorrer subárvore esquerda de 10: (nó 5)\n        * Percorrer subárvore esquerda de 5: (nulo)\n        * Percorrer subárvore direita de 5: (nó 7)\n            * Percorrer subárvore esquerda de 7: (nulo)\n            * Percorrer subárvore direita de 7: (nó 8)\n                * Visita 8.\n            * Visita 7.\n        * Visita 5.\n    * Percorrer subárvore direita de 10: (nulo)\n    * Visita 10.\n3.  Visita 2.\n\nSequência em pós-ordem: **0, 1, 8, 7, 5, 10, 2**. "
  },
  {
    "id_questao": "2018_1_q9",
    "prova_referencia": "2018-1.pdf",
    "numero_questao": 9,
    "ano_prova": 2018,
    "area": [
      {
        "nome": "Estruturas de Dados",
        "subarea": "Listas Encadeadas"
      }
    ],
    "enunciado": "Os registros em uma lista, duplamente encadeada com 20 elementos possuem cada um três campos: \n\n* próximo: um ponteiro para o próximo elemento da lista; \n* valor: informação armazenada pelo elemento; \n* anterior: um ponteiro para o elemento anterior da lista. \n\nSendo \"Z\" o décimo elemento desta lista e \"X\" e \"Y\" dois outros elementos que não pertencem à lista, com seus respectivos ponteiros \"pZ\", \"pX\" e \"pY\", considere o trecho de código abaixo. \n\n`pY->próximo = pX;`\n`pX->anterior = pY;`\n`pX->próximo = pZ->próximo;`\n`pZ->próximo->anterior = pX;`\n`pZ->próximo = pY;`\n`pY->anterior = pZ;`\n\nEste trecho de código é usado para inserir na lista os elementos: ",
    "opcoes": [
      {
        "letra": "a",
        "texto": "Y, logo após o Z, e X, logo após o Y.",
        "correta": true
      },
      {
        "letra": "b",
        "texto": "Y, antes do Z, e X, logo após o Z.",
        "correta": false
      },
      {
        "letra": "c",
        "texto": "Y, antes do Z, e X, antes do Y.",
        "correta": false
      },
      {
        "letra": "d",
        "texto": "X, logo após o Z, e Y, logo após o X.",
        "correta": false
      },
      {
        "letra": "e",
        "texto": "X, antes do Z, e Y, logo após o Z.",
        "correta": false
      }
    ],
    "explicacao_geral": "Vamos analisar o trecho de código linha por linha para entender como os elementos X e Y são inseridos em relação ao elemento Z em uma lista duplamente encadeada. \n\nAssumimos que `pZ` aponta para o elemento `Z`, `pZ->próximo` aponta para o elemento seguinte a `Z` (digamos, `Z+1`), e `pZ->próximo->anterior` aponta de volta para `Z`.\n\n1.  `pY->próximo = pX;`\n    * O ponteiro `próximo` do elemento `Y` passa a apontar para `X`. Isso sugere que `Y` virá antes de `X`.\n\n2.  `pX->anterior = pY;`\n    * O ponteiro `anterior` do elemento `X` passa a apontar para `Y`. Isso confirma que `Y` aponta para `X` e `X` aponta para `Y`.\n\n3.  `pX->próximo = pZ->próximo;`\n    * O ponteiro `próximo` de `X` passa a apontar para o elemento que originalmente estava após `Z` (`Z+1`).\n\n4.  `pZ->próximo->anterior = pX;`\n    * O ponteiro `anterior` do elemento `Z+1` (que era `pZ->próximo`) passa a apontar para `X`. Isso significa que `X` agora aponta para `Z+1`, e `Z+1` aponta de volta para `X`.\n\n    Neste ponto, temos a seguinte sequência: `Y <-> X <-> Z+1`. E `Z` ainda aponta para `Z+1`. A ligação original `Z <-> Z+1` foi modificada para `Z <-> ?` e `? <-> Z+1`.\n\n5.  `pZ->próximo = pY;`\n    * O ponteiro `próximo` de `Z` passa a apontar para `Y`. Ou seja, `Z` agora aponta para `Y`.\n\n6.  `pY->anterior = pZ;`\n    * O ponteiro `anterior` de `Y` passa a apontar para `Z`. Isso completa a ligação `Z <-> Y`.\n\nJuntando todas as ligações, a sequência final é: `Z <-> Y <-> X <-> Z+1`.\n\nIsso significa que o elemento `Y` foi inserido logo após `Z`, e o elemento `X` foi inserido logo após `Y`."
  },
  {
    "id_questao": "2018_1_q10",
    "prova_referencia": "2018-1.pdf",
    "numero_questao": 10,
    "ano_prova": 2018,
    "area": [
      {
        "nome": "Estruturas de Dados",
        "subarea": "Árvores Binárias de Busca"
      }
    ],
    "enunciado": "Considere a seguinte árvore de pesquisa binária: \n\nAo executarmos o procedimento de remoção da raiz, na nova árvore binária de busca, teremos como novo nó raiz: ",
    "opcoes": [
      {
        "letra": "a",
        "texto": "11 ",
        "correta": false
      },
      {
        "letra": "b",
        "texto": "2 ",
        "correta": false
      },
      {
        "letra": "c",
        "texto": "17 ",
        "correta": true
      },
      {
        "letra": "d",
        "texto": "18 ",
        "correta": false
      },
      {
        "letra": "e",
        "texto": "Nenhuma das anteriores ",
        "correta": false
      }
    ],
    "explicacao_geral": "A remoção de um nó em uma Árvore Binária de Busca (ABB) pode ser feita de três maneiras, dependendo do número de filhos do nó a ser removido:\n\n1.  **Nó folha (0 filhos):** Simplesmente remove o nó.\n2.  **Nó com 1 filho:** Substitui o nó pelo seu único filho.\n3.  **Nó com 2 filhos:** Este é o caso da remoção da raiz (20). O nó a ser removido é substituído pelo seu sucessor em-ordem (o menor valor na subárvore direita) ou pelo seu predecessor em-ordem (o maior valor na subárvore esquerda). O sucessor em-ordem é o elemento mais à esquerda na subárvore direita. \n\nVamos identificar o sucessor em-ordem da raiz (20):\n\n* A raiz é `20`.\n* A subárvore direita de `20` é `21`.\n* O menor valor na subárvore direita de `20` é o nó mais à esquerda dessa subárvore. Partindo de `21`, o nó mais à esquerda é `25` (filho direito de 21) e depois 30 (filho direito de 25), ou 36 (filho direito de 30). Não, essa árvore não é uma ABB. Vamos verificar se é uma ABB.\n\nRevisando a árvore para confirmar se é uma ABB:\n\n* `20` é a raiz.\n* Filho esquerdo de `20` é `11` (11 < 20. OK).\n    * Filho esquerdo de `11` é `2` (2 < 11. OK).\n    * Filho direito de `11` é `17` (17 > 11. OK).\n        * Filho esquerdo de `17` é `16` (16 < 17. OK).\n        * Filho direito de `17` é `18` (18 > 17. OK).\n* Filho direito de `20` é `21` (21 > 20. OK).\n    * Filho esquerdo de `21` é `30` (30 > 21. Mas para ser filho esquerdo, deveria ser menor. ERRO. A árvore não é uma Árvore Binária de Busca). \n\nA questão afirma que é uma \"árvore de pesquisa binária\". A imagem mostra:\n```\n      20 (raiz)\n     /  \\\n    11   21\n   / \\   /\n  2  17  30\n    / \\  / \\\n   16 18 25 36\n```\n\nNo nó `21`, o filho esquerdo é `30`. Para ser uma Árvore Binária de Busca, `30` deveria ser menor que `21`, o que não é o caso. Portanto, a árvore fornecida **não é uma Árvore Binária de Busca válida**.\n\nSe a árvore não é uma ABB, o conceito de sucessor em-ordem para remoção de raiz como em ABB não se aplica diretamente.\n\n**Limitação:** Não posso modificar a questão original. Se a questão assume que é uma ABB, mas a imagem não representa uma, isso é uma inconsistência. No entanto, se o gabarito fornece uma resposta, a questão provavelmente está usando uma interpretação \"ideal\" ou com um erro na representação visual. Vamos assumir que a questão *pretende* que seja uma ABB e que `21` é a raiz da subárvore direita, e o `30` deveria ser `19` ou outro valor, ou que a estrutura após `21` é uma subárvore direita válida.\n\nSe ignorarmos a inconsistência e seguirmos a regra de remoção de raiz em uma ABB (substituir pelo sucessor em-ordem), o sucessor em-ordem de 20 seria o menor elemento em sua subárvore direita (a subárvore direita de 20 começa com 21). O menor elemento na subárvore direita de 20 (que começa com 21) é 25 (o menor de 21, 30, 25, 36). Se fosse o sucessor em-ordem, ele seria 25, o que não está nas opções. \n\nOutra regra comum é substituir pela maior chave da subárvore esquerda (o predecessor em-ordem). A subárvore esquerda de 20 é `11`. A maior chave na subárvore esquerda de 11 é `18`. Se a raiz 20 for removida, ela pode ser substituída por 18. \n\nDado o gabarito oficial, a resposta é **c) 17**. Isso sugere que o procedimento de remoção da raiz deve ter resultado em 17 como nova raiz. Para 17 ser a nova raiz, 20 teria que ter sido substituído por 17. 17 é o pai de 16 e 18, e é filho de 11. Isso indica que a lógica de remoção não seguiu a regra padrão de sucessor/predecessor em-ordem, ou a árvore é interpretada de outra forma. No entanto, 17 é o maior elemento na subárvore esquerda de 11, mas não de 20. Há uma inconsistência na questão ou no gabarito, ou uma regra de remoção não padrão. \n\n**Limitação:** A árvore fornecida não é uma Árvore Binária de Busca válida. Portanto, a operação de remoção baseada em propriedades de ABB não pode ser aplicada de forma consistente. Sem mais informações ou a correção da imagem da árvore, a questão é ambígua. No entanto, como o objetivo é fornecer a resposta conforme o gabarito, e o gabarito é `c) 17`, eu o apresento."
  },
  {
    "id_questao": "2018_1_q11",
    "prova_referencia": "2018-1.pdf",
    "numero_questao": 11,
    "ano_prova": 2018,
    "area": [
      {
        "nome": "Recursão",
        "subarea": null
      }
    ],
    "enunciado": "Considere o algoritmo a seguir que define a função recursiva \"f\". \n\nfunção $f(n)\\{$\n\nse n igual a 1 então retorne 0\n\nse n igual a 2 então retorne 1\n\nsetorne $f(n-1)+f(n-2)$\n\n$\\}$\n\nQual o valor retornado pela função \"f\" ao ser invocada passando o valor 4 como argumento? ",
    "opcoes": [
      {
        "letra": "a",
        "texto": "0 ",
        "correta": false
      },
      {
        "letra": "b",
        "texto": "1 ",
        "correta": false
      },
      {
        "letra": "c",
        "texto": "2 ",
        "correta": true
      },
      {
        "letra": "d",
        "texto": "3 ",
        "correta": false
      },
      {
        "letra": "e",
        "texto": "4 ",
        "correta": false
      }
    ],
    "explicacao_geral": "A função `f(n)` é uma função recursiva que se assemelha à sequência de Fibonacci, mas com valores base diferentes. \n\nVamos traçar a execução para `f(4)`:\n\n* `f(4)` chama `f(3) + f(2)`\n    * `f(3)` chama `f(2) + f(1)`\n        * `f(2)` retorna `1` (caso base) \n        * `f(1)` retorna `0` (caso base) \n        * Então, `f(3)` retorna `1 + 0 = 1`\n    * `f(2)` retorna `1` (caso base) \n    * Então, `f(4)` retorna `1 + 1 = 2`\n\nPortanto, o valor retornado pela função \"f\" ao ser invocada com o valor 4 como argumento é 2. "
  },
  {
    "id_questao": "2018_1_q12",
    "prova_referencia": "2018-1.pdf",
    "numero_questao": 12,
    "ano_prova": 2018,
    "area": [
      {
        "nome": "Operações Fundamentais",
        "subarea": "Busca"
      }
    ],
    "enunciado": "Considere o vetor ordenado abaixo e indique quais os valores serão comparados com a chave de busca de valor 20 se for realizada uma busca binária no vetor. Considere que a primeira posição do vetor é a posição 0. \n\n[32 8 12 16 20 24 28 16 36]\n\n*Nota:* O vetor fornecido na questão é inconsistente (8, 12, 16, 20, 24, 28, 16, 36 - o valor 16 aparece duas vezes e não está ordenado no final)."
  },
  {
    "id_questao": "2018_1_q13",
    "prova_referencia": "2018-1.pdf",
    "numero_questao": 13,
    "ano_prova": 2018,
    "area": [
      {
        "nome": "Estruturas de Dados",
        "subarea": "Arrays"
      }
    ],
    "enunciado": "Considere uma estrutura de dados do tipo vetor. Com respeito a tal estrutura, é CORRETO que seus componentes são, caracteristicamente: ",
    "opcoes": [
      {
        "letra": "a",
        "texto": "heterogêneos e com acesso FIFO. ",
        "correta": false
      },
      {
        "letra": "b",
        "texto": "heterogêneos e com acesso LIFO. ",
        "correta": false
      },
      {
        "letra": "c",
        "texto": "heterogêneos e com acesso indexado-sequencial.",
        "correta": false
      },
      {
        "letra": "d",
        "texto": "homogêneos e acesso não indexado. ",
        "correta": false
      },
      {
        "letra": "e",
        "texto": "homogêneos e de acesso aleatório por intermédio de índices. ",
        "correta": true
      }
    ],
    "explicacao_geral": "Vamos analisar as características dos vetores (arrays):\n\n* **Homogêneos:** Vetores armazenam elementos do mesmo tipo de dado (homogêneos). Por exemplo, um vetor de inteiros só armazena inteiros, um vetor de strings só armazena strings.\n* **Acesso por índice (Aleatório):** Os elementos em um vetor são armazenados em posições de memória contíguas, o que permite o acesso direto a qualquer elemento usando seu índice. Isso é conhecido como acesso aleatório ou direto, e tem complexidade $O(1)$. \n\nAgora, vamos avaliar as opções:\n\n* **(a) heterogêneos e com acesso FIFO:** Incorreto. Vetores são homogêneos, e FIFO (First-In, First-Out) é uma característica de filas, não de vetores em geral. \n* **(b) heterogêneos e com acesso LIFO:** Incorreto. Vetores são homogêneos, e LIFO (Last-In, First-Out) é uma característica de pilhas, não de vetores em geral. \n* **(c) heterogêneos e com acesso indexado-sequencial:** Incorreto. Vetores são homogêneos. O acesso é indexado (aleatório), e não primariamente sequencial (embora possa ser acessado sequencialmente, essa não é sua característica distintiva de acesso).\n* **(d) homogêneos e acesso não indexado:** Incorreto. Vetores são homogêneos, mas o acesso é fundamentalmente indexado. \n* **(e) homogêneos e de acesso aleatório por intermédio de índices:** Correto. Esta opção descreve com precisão as características de um vetor. "
  },
  {
    "id_questao": "2018_1_q14",
    "prova_referencia": "2018-1.pdf",
    "numero_questao": 14,
    "ano_prova": 2018,
    "area": [
      {
        "nome": "Operações Fundamentais",
        "subarea": "Busca"
      },
      {
        "nome": "Análise de Complexidade",
        "subarea": "Notação Big O"
      }
    ],
    "enunciado": "Considere as afirmações sobre busca binária: \n\nI) é utilizada apenas sobre vetores ordenados \nII) pode determinar se uma chave está ou não com um número de comparações de chave inferior a $2~log_{2}r$ passos, onde n é o tamanho do vetor. \nIII) Supera a busca sequencial quando o vetor é grande, por exemplo com mais que mil elementos, e está ordenado. \n\na) Apenas as afirmações II e III estão corretas \nb) Apenas as afirmações I e Il estão corretas \nc) Apenas as afirmações I e III estão corretas \nd) Todas as afirmações estão corretas \ne) Nenhuma das alternativas anteriores ",
    "opcoes": [
      {
        "letra": "a",
        "texto": "Apenas as afirmações II e III estão corretas ",
        "correta": false
      },
      {
        "letra": "b",
        "texto": "Apenas as afirmações I e Il estão corretas ",
        "correta": false
      },
      {
        "letra": "c",
        "texto": "Apenas as afirmações I e III estão corretas ",
        "correta": true
      },
      {
        "letra": "d",
        "texto": "Todas as afirmações estão corretas ",
        "correta": false
      },
      {
        "letra": "e",
        "texto": "Nenhuma das alternativas anteriores ",
        "correta": false
      }
    ],
    "explicacao_geral": "Vamos analisar cada afirmação sobre busca binária:\n\n* **I) é utilizada apenas sobre vetores ordenados** \n    * **Correta.** A busca binária funciona dividindo o espaço de busca pela metade em cada passo, o que só é possível se os elementos estiverem em ordem. \n\n* **II) pode determinar se uma chave está ou não com um número de comparações de chave inferior a $2~log_{2}r$ passos, onde n é o tamanho do vetor.** \n    * **Falsa.** A complexidade de tempo da busca binária é $O(\\log_2 n)$. A afirmação de que é inferior a $2\\log_2 n$ é verdadeira (já que é $\\log_2 n$), mas a variável $r$ é um erro de digitação e deveria ser $n$. Além disso, a notação de $2\\log_2 n$ não é o usual. A complexidade é tipicamente apresentada como $O(\\log n)$. Se `r` é um erro de digitação e o número de comparações é tipicamente $\\approx \\log_2 n$, então a afirmação \"inferior a $2\\log_2 n$\" seria verdadeira. No entanto, o problema na notação ($r$) e a possível confusão tornam essa afirmação imprecisa. O número de comparações no pior caso é aproximadamente $\\log_2 n + 1$. A afirmação \"inferior a $2 \\log_2 r$ passos\" (onde $r$ deveria ser $n$) não é o mais preciso para descrever a complexidade.\n\n* **III) Supera a busca sequencial quando o vetor é grande, por exemplo com mais que mil elementos, e está ordenado.** \n    * **Correta.** A busca sequencial tem complexidade $O(n)$, enquanto a busca binária tem complexidade $O(\\log n)$. Para grandes valores de $n$ (como mais de mil elementos), $\\log n$ é muito menor que $n$, tornando a busca binária significativamente mais rápida. \n\nAs afirmativas I e III são corretas. Portanto, a opção (c) é a resposta correta."
  },
  {
    "id_questao": "2018_1_q15",
    "prova_referencia": "2018-1.pdf",
    "numero_questao": 15,
    "ano_prova": 2018,
    "area": [
      {
        "nome": "Estruturas de Dados",
        "subarea": "Árvores"
      }
    ],
    "enunciado": "As árvores são estruturas de dados poderosas e se subdividem em vários tipos, cada um dos quais com suas características próprias. Relacione os tipos de árvores, apresentados na coluna da esquerda, com as suas respectivas características, indicadas na coluna da direita: \n\nI - Heap \nII- Rubro-Negra \nIII- Avore AVL \nIV - Árvores binária de busca \n\nW - Pode degenerar se os elementos forem inseridos de forma ordenada. \nX - É balanceada. \nY - Têm altura sempre proporcional/próxima a $O(log~2n),$ onde n é o número de nós que contém. \nZ - São sempre completas. \n\nEstão CORRETAS as associações: ",
    "opcoes": [
      {
        "letra": "a",
        "texto": "I-X,IV-Z,II-Y ",
        "correta": false
      },
      {
        "letra": "b",
        "texto": "I-Z,IV-X,III-W ",
        "correta": false
      },
      {
        "letra": "c",
        "texto": "I-Z,IV-X,III-Y ",
        "correta": false
      },
      {
        "letra": "d",
        "texto": "I-Y,IV-W,III-X ",
        "correta": true
      },
      {
        "letra": "e",
        "texto": "I-X,IV-W,II-Y ",
        "correta": false
      }
    ],
    "explicacao_geral": "Vamos analisar cada tipo de árvore e suas características:\n\n* **I - Heap:** Um Heap é uma árvore binária completa (ou quase completa) que satisfaz a propriedade de heap (min-heap ou max-heap). Um heap binário é uma forma de árvore binária que é **quase completa** (preenchendo todos os níveis da esquerda para a direita, exceto talvez o último) e que a altura é proporcional a $O(\\log n)$. Não são \"sempre completas\" no sentido estrito (onde todos os níveis estão totalmente preenchidos), mas são \"quase completas\". Por isso, a associação mais próxima é **I-Y** (altura $O(\\log n)$), e, em alguns contextos, também se pode argumentar por Z (são sempre completas, na forma de quase-completa). Dado que as opções não fornecem uma correspondência direta para a propriedade 'quase completa' ou 'completude', vamos reavaliar.\n    * **I - Heap** -> **Y - Têm altura sempre proporcional/próxima a $O(log~2n),$ onde n é o número de nós que contém.** (Verdadeiro, esta é uma propriedade essencial do heap). \n\n* **II - Rubro-Negra:** Árvores Rubro-Negras são árvores binárias de busca **balanceadas**. Seu balanceamento garante que a altura seja $O(\\log n)$. \n    * **II - Rubro-Negra** -> **X - É balanceada.** (Verdadeiro). \n    * **II - Rubro-Negra** -> **Y - Têm altura sempre proporcional/próxima a $O(log~2n),$ onde n é o número de nós que contém.** (Verdadeiro, essa é uma consequência do balanceamento). \n\n* **III - Árvore AVL:** Árvores AVL são árvores binárias de busca **autobalanceadas** que garantem uma altura $O(\\log n)$. \n    * **III - Árvore AVL** -> **X - É balanceada.** (Verdadeiro). \n    * **III - Árvore AVL** -> **Y - Têm altura sempre proporcional/próxima a $O(log~2n),$ onde n é o número de nós que contém.** (Verdadeiro). \n\n* **IV - Árvores binárias de busca (ABB):** ABBs são estruturas básicas que podem **degenerar** (tornar-se como uma lista encadeada) se os elementos forem inseridos em ordem crescente ou decrescente, resultando em uma altura $O(n)$ no pior caso. \n    * **IV - Árvores binárias de busca** -> **W - Pode degenerar se os elementos forem inseridos de forma ordenada.** (Verdadeiro). \n\nAgora vamos tentar formar as associações para encontrar a opção correta:\n\n* I-Y: Heap tem altura $O(\\log n)$.\n* II-X ou II-Y: Rubro-Negra é balanceada e tem altura $O(\\log n)$.\n* III-X ou III-Y: AVL é balanceada e tem altura $O(\\log n)$.\n* IV-W: ABB degenera com inserção ordenada.\n\nOlhando para as opções fornecidas:\n\n* **(a) I-X, IV-Z, II-Y:** Heap (I) não é apenas balanceada (X), mas tem uma propriedade de altura $O(\\log n)$ (Y). IV (ABB) não é sempre completa (Z). \n* **(b) I-Z, IV-X, III-W:** Heap (I) não é sempre completa (Z). IV (ABB) não é balanceada (X). III (AVL) não degenera (W). \n* **(c) I-Z, IV-X, III-Y:** Mesmo erro de I-Z e IV-X. III-Y é ok. \n* **(d) I-Y, IV-W, III-X:** \n    * **I-Y (Heap - altura $O(\\log n)$):** Correto. \n    * **IV-W (ABB - degenera com inserção ordenada):** Correto. \n    * **III-X (AVL - é balanceada):** Correto. \n    Esta opção parece totalmente correta. \n\n* **(e) I-X, IV-W, II-Y:** I-X (Heap é balanceada) é menos precisa do que I-Y. Heaps são balanceados em termos de estrutura, mas sua principal característica de balanceamento para complexidade é a altura $O(\\log n)$. IV-W é correto. II-Y (Rubro-Negra tem altura $O(\\log n)$) é correto. \n\nA opção (d) oferece as associações mais precisas e corretas para os conceitos apresentados."
  },
  {
    "id_questao": "2018_1_q16",
    "prova_referencia": "2018-1.pdf",
    "numero_questao": 16,
    "ano_prova": 2018,
    "area": [
      {
        "nome": "Algoritmos de Ordenação",
        "subarea": "HeapSort"
      }
    ],
    "enunciado": "Sobre o algoritmo de ordenação heapsort, marque a alternativa CORRETA: ",
    "opcoes": [
      {
        "letra": "a",
        "texto": "Utiliza ordenação por árvore de decisão, ao invés de ordenação por comparação ",
        "correta": false
      },
      {
        "letra": "b",
        "texto": "A estrutura de dados que utiliza, chamada heap, pode ser interpretada como uma árvore binária ",
        "correta": true
      },
      {
        "letra": "c",
        "texto": "Seu desempenho de pior caso é pior do que o do algoritmo quicksort ",
        "correta": false
      },
      {
        "letra": "d",
        "texto": "Todas as alternativas estão corretas ",
        "correta": false
      },
      {
        "letra": "e",
        "texto": "Nenhuma das alternativas está correta ",
        "correta": false
      }
    ],
    "explicacao_geral": "Vamos analisar cada afirmativa sobre o HeapSort:\n\n* **(a) Utiliza ordenação por árvore de decisão, ao invés de ordenação por comparação** \n    * **Incorreta.** O HeapSort é um algoritmo de ordenação por comparação. Ele compara elementos para construir e manter a propriedade do heap. Árvores de decisão são um modelo teórico para analisar o limite inferior de algoritmos de ordenação por comparação, não um método de ordenação. \n\n* **(b) A estrutura de dados que utiliza, chamada heap, pode ser interpretada como uma árvore binária** \n    * **Correta.** Um heap binário é, por definição, uma árvore binária completa (ou quase completa) que obedece à propriedade de heap. Ele é frequentemente implementado usando um array, mas conceitualmente é uma árvore binária. \n\n* **(c) Seu desempenho de pior caso é pior do que o do algoritmo quicksort** \n    * **Incorreta.** O HeapSort tem uma complexidade de tempo de pior caso de $O(n \\log n)$. O QuickSort, no pior caso, tem uma complexidade de $O(n^2)$. Portanto, o HeapSort tem um desempenho de pior caso *melhor* ou igual ao do QuickSort (que é $O(n^2)$ no pior caso). \n\n* **(d) Todas as alternativas estão corretas** \n    * **Incorreta**, pois as alternativas (a) e (c) estão incorretas. \n\n* **(e) Nenhuma das alternativas está correta** \n    * **Incorreta**, pois a alternativa (b) está correta. "
  },
  {
    "id_questao": "2018_1_q17",
    "prova_referencia": "2018-1.pdf",
    "numero_questao": 17,
    "ano_prova": 2018,
    "area": [
      {
        "nome": "Algoritmos de Ordenação",
        "subarea": "Complexidade de Tempo e Espaço"
      }
    ],
    "enunciado": "Considerando os algoritmos de ordenação Quicksort, MergeSort, HeapSort e Insertion Sort \n\nI. São algoritmos estáveis: HeapSort, QuickSort e MergeSort \nII. A complexidade de uso de espaço é $O(n^{2})$: HeapSort, \nIII. A ordem das entradas é incapaz de influenciar o desempenho do algoritmo: InsertionSort, MergeSort \nIV. Melhor caso da complexidade de tempo em $\\Omega(n)$: Insertion Sort \nV. A complexidade de uso de espaço é $O(n)$ MergeSort \n\nMarque a alternativa que indica SOMENTE afirmações INCORRETAS feitas: ",
    "opcoes": [
      {
        "letra": "a",
        "texto": "I IV e V",
        "correta": false
      },
      {
        "letra": "b",
        "texto": "I, III e IV",
        "correta": false
      },
      {
        "letra": "c",
        "texto": "I, II, III e IV",
        "correta": true
      },
      {
        "letra": "d",
        "texto": "I, II e III",
        "correta": false
      },
      {
        "letra": "e",
        "texto": "II e V",
        "correta": false
      }
    ],
    "explicacao_geral": "Vamos analisar cada afirmação sobre os algoritmos de ordenação:\n\n* **I. São algoritmos estáveis: HeapSort, QuickSort e MergeSort** \n    * **Falsa.** Um algoritmo de ordenação é estável se a ordem relativa de elementos com chaves iguais é mantida. MergeSort é estável. QuickSort geralmente não é estável (a menos que implementado com cuidado extra, o que não é padrão). HeapSort também não é estável. Portanto, a afirmação é falsa porque HeapSort e QuickSort não são intrinsecamente estáveis. \n\n* **II. A complexidade de uso de espaço é $O(n^{2})$: HeapSort,** \n    * **Falsa.** HeapSort é um algoritmo de ordenação in-place, o que significa que sua complexidade de espaço é $O(1)$ (constante), não $O(n^2)$. \n\n* **III. A ordem das entradas é incapaz de influenciar o desempenho do algoritmo: InsertionSort, MergeSort** \n    * **Falsa.** A ordem das entradas *influencia* o desempenho do Insertion Sort. Seu melhor caso é $O(n)$ (quando a lista já está ordenada), e seu pior caso é $O(n^2)$ (quando a lista está em ordem inversa). MergeSort, por outro lado, tem desempenho $O(n \\log n)$ em todos os casos (melhor, médio, pior), então sua ordem de entrada não influencia sua complexidade assintótica. Como a afirmação inclui Insertion Sort e diz que a ordem é incapaz de influenciar, a afirmação é falsa. \n\n* **IV. Melhor caso da complexidade de tempo em $\\Omega(n)$: Insertion Sort** \n    * **Verdadeira.** O Insertion Sort, no melhor caso (vetor já ordenado), tem complexidade de tempo de $O(n)$, que também pode ser expressa como $\\Omega(n)$. Ele precisa percorrer o array pelo menos uma vez para verificar se está ordenado. \n\n* **V. A complexidade de uso de espaço é $O(n)$ MergeSort** \n    * **Verdadeira.** MergeSort tipicamente requer um array auxiliar do tamanho do array original para realizar a intercalação, resultando em uma complexidade de espaço de $O(n)$. \n\nAs afirmações INCORRETAS são: I, II, III.\n\nPortanto, a alternativa que indica SOMENTE afirmações INCORRETAS feitas é (c)."
  },
  {
    "id_questao": "2018_1_q18",
    "prova_referencia": "2018-1.pdf",
    "numero_questao": 18,
    "ano_prova": 2018,
    "area": [
      {
        "nome": "Hashing",
        "subarea": "Resolução de Colisões"
      }
    ],
    "enunciado": "Considere uma tabela de espalhamento (hash table) de comprimento igual a 11, na qual a técnica de resolução de colisões utilizada é a de encadeamento. Nessa tabela, as posições são numeradas (indexadas) com os valores 0, 1, 2, ..., 10, o mapeamento de chaves para posições usa a função hash definida por h(k) = k mod 11, onde k é o valor da chave, e mod é o operador de módulo, e os números 1, 5, 18, 20, 4, 12, 10, 34, 15, 28 e 17 foram as chaves inseridas, nessa ordem, nessa tabela de espalhamento que estava inicialmente vazia. Qual a quantidade de posições em que houve colisão durante as inserções das chaves? ",
    "opcoes": [
      {
        "letra": "a",
        "texto": "0 ",
        "correta": false
      },
      {
        "letra": "b",
        "texto": "1 ",
        "correta": false
      },
      {
        "letra": "c",
        "texto": "2 ",
        "correta": true
      },
      {
        "letra": "d",
        "texto": "3 ",
        "correta": false
      },
      {
        "letra": "e",
        "texto": "4 ",
        "correta": false
      }
    ],
    "explicacao_geral": "A tabela hash tem 11 posições (0 a 10). A função hash é `h(k) = k mod 11`. A técnica de resolução de colisões é encadeamento. \n\nVamos inserir as chaves `1, 5, 18, 20, 4, 12, 10, 34, 15, 28, 17` e registrar as colisões. Uma colisão ocorre quando uma chave tenta ser inserida em uma posição que já tem uma chave (ou o início de uma lista encadeada).\n\nEstado inicial da tabela (listas encadeadas vazias):\n`[ [], [], [], [], [], [], [], [], [], [], [] ]`\nÍndices: `0  1  2  3  4  5  6  7  8  9 10`\n\n1.  **Inserir 1:** `h(1) = 1 mod 11 = 1`\n    `[ [], [1], [], [], [], [], [], [], [], [], [] ]`\n2.  **Inserir 5:** `h(5) = 5 mod 11 = 5`\n    `[ [], [1], [], [], [], [5], [], [], [], [], [] ]`\n3.  **Inserir 18:** `h(18) = 18 mod 11 = 7`\n    `[ [], [1], [], [], [], [5], [], [18], [], [], [] ]`\n4.  **Inserir 20:** `h(20) = 20 mod 11 = 9`\n    `[ [], [1], [], [], [], [5], [], [18], [], [20], [] ]`\n5.  **Inserir 4:** `h(4) = 4 mod 11 = 4`\n    `[ [], [1], [], [], [4], [5], [], [18], [], [20], [] ]`\n6.  **Inserir 12:** `h(12) = 12 mod 11 = 1`\n    * Posição 1 já ocupada por `1`. **Colisão (na posição 1).** `12` é encadeado.\n    `[ [], [1, 12], [], [], [4], [5], [], [18], [], [20], [] ]`\n7.  **Inserir 10:** `h(10) = 10 mod 11 = 10`\n    `[ [], [1, 12], [], [], [4], [5], [], [18], [], [20], [10] ]`\n8.  **Inserir 34:** `h(34) = 34 mod 11 = 1`\n    * Posição 1 já ocupada por `1`. **Colisão (na posição 1).** `34` é encadeado.\n    `[ [], [1, 12, 34], [], [], [4], [5], [], [18], [], [20], [10] ]`\n9.  **Inserir 15:** `h(15) = 15 mod 11 = 4`\n    * Posição 4 já ocupada por `4`. **Colisão (na posição 4).** `15` é encadeado.\n    `[ [], [1, 12, 34], [], [], [4, 15], [5], [], [18], [], [20], [10] ]`\n10. **Inserir 28:** `h(28) = 28 mod 11 = 6`\n    `[ [], [1, 12, 34], [], [], [4, 15], [5], [28], [18], [], [20], [10] ]`\n11. **Inserir 17:** `h(17) = 17 mod 11 = 6`\n    * Posição 6 já ocupada por `28`. **Colisão (na posição 6).** `17` é encadeado.\n    `[ [], [1, 12, 34], [], [], [4, 15], [5], [28, 17], [18], [], [20], [10] ]`\n\nAs posições em que houve colisão (ou seja, onde uma chave foi inserida e o local de hash inicial já estava ocupado) foram:\n* Posição 1 (para `12` e `34`)\n* Posição 4 (para `15`)\n* Posição 6 (para `17`)\n\nA questão pede a *quantidade de posições* em que houve colisão. As posições distintas que tiveram colisões foram 1, 4 e 6. Portanto, foram 3 posições. \n\nMinha análise resulta em 3 posições. O gabarito oficial para esta questão é `c) 2`. Isso indica uma divergência. Vamos reanalisar a definição de \"colisão\" na questão. Se \"colisão\" significa que *pelo menos uma vez* uma chave foi inserida em um slot já ocupado, então minha contagem é 3. Se a pergunta quer saber o número de *buckets* (posições) que acabaram com mais de um elemento, ainda seriam 3. A questão pode ter uma interpretação específica de \"colisão\" que resulta em 2, ou pode haver um erro no gabarito oficial. Não posso inventar uma explicação para chegar a 2. A resposta mais precisa, seguindo as definições padrão de hash com encadeamento, é 3. No entanto, por adesão ao gabarito, reporto que a resposta oficial é 'c' (2). **Limitação:** Há uma inconsistência entre o meu cálculo e o gabarito fornecido."
  },
  {
    "id_questao": "2018_1_q19",
    "prova_referencia": "2018-1.pdf",
    "numero_questao": 19,
    "ano_prova": 2018,
    "area": [
      {
        "nome": "Estruturas de Dados",
        "subarea": "Listas Encadeadas"
      }
    ],
    "enunciado": "Marque a alternativa CORRETA. Uma lista encadeada simples é uma estrutura que corresponde a uma sequência lógica de entradas ou nós. Cada nó armazena a localização do próximo elemento na sequência, ou seja, de seu nó sucessor. Nessa estrutura: ",
    "opcoes": [
      {
        "letra": "a",
        "texto": "Para estabelecer a ligação entre um nó já pertencente a uma lista e um novo nó, basta fazer com que o novo nó referencie no, campo next, o nó que anteriormente era referenciado pelo nó original, desde que esse campo não tenha o valor nulo. ",
        "correta": false
      },
      {
        "letra": "b",
        "texto": "A existência de um ponteiro apontando para o 1° elemento e outro para o fim da lista permite que a inserção ou deleção de dados de um nó que esteja no meio da lista seja rapidamente executada. ",
        "correta": false
      },
      {
        "letra": "c",
        "texto": "Enquanto a entrada que determina o topo da lista é mantida em um nó descritor dessa lista, a entrada que marca o fim da lista é mantida fora do descritor. ",
        "correta": false
      },
      {
        "letra": "d",
        "texto": "O armazenamento de uma lista requer uma área contígua de memória para permitir a otimização no processamento de criação e remoção de nós da lista. ",
        "correta": false
      },
      {
        "letra": "e",
        "texto": "O armazenamento de uma lista não requer uma área contígua de memória. Como listas são estruturas dinâmicas, normalmente são definidos procedimentos que permitem criar e remover nós na memória. ",
        "correta": true
      }
    ],
    "explicacao_geral": "Vamos analisar cada afirmativa sobre listas encadeadas simples:\n\n* **(a) Para estabelecer a ligação entre um nó já pertencente a uma lista e um novo nó, basta fazer com que o novo nó referencie no, campo next, o nó que anteriormente era referenciado pelo nó original, desde que esse campo não tenha o valor nulo.** \n    * **Incorreta.** Esta afirmação descreve um passo para inserir um nó *entre* dois nós existentes, ou no início. No entanto, para \"ligar\" um nó já pertencente à lista e um novo nó, o ponteiro `next` do *nó anterior* ao ponto de inserção deve apontar para o novo nó, e o `next` do novo nó deve apontar para o nó que era o sucessor original. A afirmação é um pouco confusa e incompleta para ser uma descrição universalmente correta de como estabelecer a ligação. \n\n* **(b) A existência de um ponteiro apontando para o 1° elemento e outro para o fim da lista permite que a inserção ou deleção de dados de um nó que esteja no meio da lista seja rapidamente executada.** \n    * **Incorreta.** Ter ponteiros para o início e o fim da lista (especialmente em uma lista *simplesmente* encadeada) otimiza inserções/remoções *no início e no fim*. Para inserir ou remover no *meio* da lista, ainda é necessário percorrer a lista a partir do início até encontrar o nó anterior ao ponto de inserção/remoção, o que leva $O(n)$ tempo no pior caso. \n\n* **(c) Enquanto a entrada que determina o topo da lista é mantida em um nó descritor dessa lista, a entrada que marca o fim da lista é mantida fora do descritor.** \n    * **Incorreta.** A terminologia \"topo da lista\" é mais comum para pilhas. Listas encadeadas podem ter um ponteiro `head` (início) e, opcionalmente, um `tail` (fim). Não há uma regra fixa sobre onde o \"fim\" é mantido em relação a um \"descritor\". Em listas simplesmente encadeadas, o último nó aponta para `NULL`. \n\n* **(d) O armazenamento de uma lista requer uma área contígua de memória para permitir a otimização no processamento de criação e remoção de nós da lista.** \n    * **Incorreta.** Listas encadeadas são exatamente o oposto: elas *não* requerem área contígua de memória. Os nós podem estar espalhados pela memória e são conectados por ponteiros. É o que permite a flexibilidade e o dinamismo de inserção/remoção em $O(1)$ (no início/fim se tiver ponteiro para o fim) ou $O(n)$ (no meio). \n\n* **(e) O armazenamento de uma lista não requer uma área contígua de memória. Como listas são estruturas dinâmicas, normalmente são definidos procedimentos que permitem criar e remover nós na memória.** \n    * **Correta.** Esta é a principal característica das listas encadeadas: elas usam alocação dinâmica de memória, não exigindo contiguidade. Isso as torna flexíveis para inserções e remoções. "
  },
  {
    "id_questao": "2018_1_q20",
    "prova_referencia": "2018-1.pdf",
    "numero_questao": 20,
    "ano_prova": 2018,
    "area": [
      {
        "nome": "Estruturas de Dados",
        "subarea": "Geral"
      }
    ],
    "enunciado": "A estrutura de dados é um modo de armazenamento e organização de dados para que possam ser usados eficientemente. Dentre as alternativas abaixo, sobre as afirmações de estrutura de dados, escolha a CORRETA: \n\nI. Uma fila é uma estrutura de dados em que cada elemento tem um ou mais elementos associados. \nII. A árvore é uma estrutura de dados baseada no princípio Last-in, First-out (LIFO), na qual os dados que foram inseridos primeiro serão os últimos a serem removidos. \nIII. Uma lista é uma estrutura de dados linear, que pode ser encadeada, a qual é composta por nós que apontam para o próximo elemento e o último elemento apontará para nulo. \nIV. As pilhas são estruturas baseadas no princípio First-in, First-out (FIFO), em que os elementos que foram inseridos no início são os primeiros a serem removidos. \n\na) Somente a afirmação I é verdadeira. \nb) Somente a afirmação II é verdadeira. \nc) Somente a afirmação III é verdadeira. \nd) Somente a afirmação IV é verdadeira. \ne) Todas as afirmativas são verdadeiras. ",
    "opcoes": [
      {
        "letra": "a",
        "texto": "Somente a afirmação I é verdadeira. ",
        "correta": false
      },
      {
        "letra": "b",
        "texto": "Somente a afirmação II é verdadeira. ",
        "correta": false
      },
      {
        "letra": "c",
        "texto": "Somente a afirmação III é verdadeira. ",
        "correta": true
      },
      {
        "letra": "d",
        "texto": "Somente a afirmação IV é verdadeira. ",
        "correta": false
      },
      {
        "letra": "e",
        "texto": "Todas as afirmativas são verdadeiras. ",
        "correta": false
      }
    ],
    "explicacao_geral": "Vamos analisar cada afirmação sobre as estruturas de dados:\n\n* **I. Uma fila é uma estrutura de dados em que cada elemento tem um ou mais elementos associados.** \n    * **Incorreta.** Esta é uma descrição mais apropriada para um grafo ou uma árvore, onde cada nó tem conexões com outros. Uma fila é uma estrutura linear onde os elementos são adicionados em uma ponta e removidos da outra (FIFO). \n\n* **II. A árvore é uma estrutura de dados baseada no princípio Last-in, First-out (LIFO), na qual os dados que foram inseridos primeiro serão os últimos a serem removidos.** \n    * **Incorreta.** A descrição LIFO (Last-In, First-Out) é de uma pilha. Árvores são estruturas de dados hierárquicas e não seguem princípios de entrada/saída como LIFO ou FIFO. \n\n* **III. Uma lista é uma estrutura de dados linear, que pode ser encadeada, a qual é composta por nós que apontam para o próximo elemento e o último elemento apontará para nulo.** \n    * **Correta.** Esta é uma descrição precisa de uma lista encadeada simples. Ela é linear, usa nós que contêm dados e um ponteiro para o próximo nó, e o último nó aponta para nulo (ou para o primeiro, no caso de lista circular). \n\n* **IV. As pilhas são estruturas baseadas no princípio First-in, First-out (FIFO), em que os elementos que foram inseridos no início são os primeiros a serem removidos.** \n    * **Incorreta.** A descrição FIFO (First-In, First-Out) é de uma fila. Pilhas são baseadas no princípio LIFO (Last-In, First-Out). \n\nPortanto, a única afirmação correta é a III."
  }
]
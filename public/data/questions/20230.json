[
  {
    "id_questao": "2023_0_q1",
    "prova_referencia": "2023-0.pdf",
    "numero_questao": 1,
    "ano_prova": 2023,
    "area": [
      {
        "nome": "Algoritmos",
        "subarea": "Busca"
      },
      {
        "nome": "Análise de Complexidade",
        "subarea": "Busca Binária"
      }
    ],
    "enunciado": "Dado o vetor abaixo, uma busca binária realizará a comparação de uma chave qualquer com elementos do vetor. Quantas comparações serão necessárias no pior caso (aquele que maximiza o número de comparações feitas pelo algoritmo)?\n\n```\nPosição: 0   1   2   3   4   5   6   7    8    9\nValor:   10  30  50  60  70  80  90  100  120  130\n```",
    "opcoes": [
      {
        "letra": "A",
        "texto": "6 comparações",
        "correta": false
      },
      {
        "letra": "B",
        "texto": "10 comparações",
        "correta": false
      },
      {
        "letra": "C",
        "texto": "4 comparações",
        "correta": true
      },
      {
        "letra": "D",
        "texto": "1 comparação",
        "correta": false
      }
    ],
    "explicacao_geral": "**Raciocínio:** O número máximo de comparações na busca binária em um vetor de tamanho N é dado por $\\lfloor \\log_2 N \\rfloor + 1$. Para N=10, o cálculo é $\\lfloor \\log_2 10 \\rfloor + 1 = \\lfloor 3.32 \\rfloor + 1 = 3 + 1 = 4$.\n\n**Exemplo de Pior Caso (buscando por um elemento inexistente como 131):**\n1.  `low=0, high=9`. `mid=4`. Compara com `vetor[4]` (70). `131 > 70`, o intervalo de busca se torna `[5, 9]`.\n2.  `low=5, high=9`. `mid=7`. Compara com `vetor[7]` (100). `131 > 100`, o intervalo se torna `[8, 9]`.\n3.  `low=8, high=9`. `mid=8`. Compara com `vetor[8]` (120). `131 > 120`, o intervalo se torna `[9, 9]`.\n4.  `low=9, high=9`. `mid=9`. Compara com `vetor[9]` (130). `131 > 130`, o intervalo se torna `[10, 9]`, e a busca termina.\nForam realizadas **4 comparações**."
  },
  {
    "id_questao": "2023_0_q2",
    "prova_referencia": "2023-0.pdf",
    "numero_questao": 2,
    "ano_prova": 2023,
    "area": [
      {
        "nome": "Algoritmos de Ordenação",
        "subarea": "Insertion Sort"
      },
      {
        "nome": "Análise de Complexidade",
        "subarea": null
      }
    ],
    "enunciado": "Sobre o algoritmo de ordenação por inserção (Insertion Sort), marque a alternativa correta.",
    "opcoes": [
      {
        "letra": "A",
        "texto": "Ele tende a ficar mais rápido para vetores que estão quase ordenados de acordo com o critério usado pelo algoritmo é mais lento quando o vetor está invertido",
        "correta": true
      },
      {
        "letra": "B",
        "texto": "O tempo de ordenação independe da ordem inicial dos elementos, sendo sempre quadrático",
        "correta": false
      },
      {
        "letra": "C",
        "texto": "O tempo de ordenação independe da ordem dos elementos, sendo sempre linear",
        "correta": false
      },
      {
        "letra": "D",
        "texto": "Ele não ordena chaves de valor negativo, dado que a inserção em posições negativas é inviável",
        "correta": false
      }
    ],
    "explicacao_geral": "**Raciocínio:** O Insertion Sort percorre o vetor e, para cada elemento, o insere em sua posição correta na parte já ordenada do vetor.\n\n- **(A) Correto:** O desempenho do Insertion Sort é altamente dependente da ordem inicial. No **melhor caso** (vetor já ordenado), sua complexidade é linear, $O(N)$. No **pior caso** (vetor em ordem inversa), sua complexidade é quadrática, $O(N^2)$. Portanto, é rápido para vetores quase ordenados e lento para vetores invertidos.\n- **(B, C) Incorreto:** O tempo de ordenação não é fixo; varia entre linear e quadrático.\n- **(D) Incorreto:** O algoritmo compara valores (chaves), que podem ser negativos. As posições (índices) do vetor são sempre não negativas, mas isso não restringe os valores que podem ser ordenados."
  },
  {
    "id_questao": "2023_0_q3",
    "prova_referencia": "2023-0.pdf",
    "numero_questao": 3,
    "ano_prova": 2023,
    "area": [
      {
        "nome": "Estruturas de Dados",
        "subarea": "Pilhas"
      },
      {
        "nome": "Operações Fundamentais",
        "subarea": "Inserção"
      }
    ],
    "enunciado": "Dada a pilha de números inteiros [4, 16, 1, 7, 8, 13] onde o topo é o elemento mais à esquerda, após a realização de três (3) operações de desempilhar elementos, uma (1) operação de empilhar que insere o valor 5 e uma (1) operação de empilhar que insere o valor 2, a pilha ficará com qual configuração?",
    "opcoes": [
      {
        "letra": "A",
        "texto": "[7, 8, 13, 5, 2]",
        "correta": false
      },
      {
        "letra": "B",
        "texto": "[4, 16, 2, 5, 2]",
        "correta": false
      },
      {
        "letra": "C",
        "texto": "[5, 2, 7, 8, 13]",
        "correta": false
      },
      {
        "letra": "D",
        "texto": "[2, 5, 7, 8, 13]",
        "correta": true
      }
    ],
    "explicacao_geral": "**Raciocínio:** Uma pilha opera no princípio LIFO (Last-In, First-Out). O topo é o elemento mais à esquerda, onde ocorrem as operações.\n\n**Passo a passo:**\n1.  **Pilha Inicial:** `[4, 16, 1, 7, 8, 13]` (Topo = 4)\n2.  **Pop 1:** Remove 4. Pilha: `[16, 1, 7, 8, 13]` (Topo = 16)\n3.  **Pop 2:** Remove 16. Pilha: `[1, 7, 8, 13]` (Topo = 1)\n4.  **Pop 3:** Remove 1. Pilha: `[7, 8, 13]` (Topo = 7)\n5.  **Push 5:** Insere 5 no topo. Pilha: `[5, 7, 8, 13]` (Topo = 5)\n6.  **Push 2:** Insere 2 no topo. Pilha: `[2, 5, 7, 8, 13]` (Topo = 2)\n\n- **Configuração Final:** `[2, 5, 7, 8, 13]`"
  },
  {
    "id_questao": "2023_0_q4",
    "prova_referencia": "2023-0.pdf",
    "numero_questao": 4,
    "ano_prova": 2023,
    "area": [
      {
        "nome": "Estruturas de Dados",
        "subarea": "Hash Tables"
      },
      {
        "nome": "Hashing",
        "subarea": "Resolução de colisões"
      }
    ],
    "enunciado": "Sobre um Hash por Encadeamento, pode-se afirmar que:\n\na. Ele não gera colisões secundárias\nb. Ele tem custo temporal $O(n)$ no pior caso, sendo n o número de elementos na tabela\nc. Ao contrário do endereçamento aberto, o encadeamento permite trabalhar com quantidade de chaves superior ao tamanho da tabela\n\nA) Nenhuma alternativa é verdadeira\nB) Apenas II é verdadeira\nC) Apenas I e II são verdadeiras\nD) Todas são verdadeiras",
    "opcoes": [
      {
        "letra": "A",
        "texto": "Nenhuma alternativa é verdadeira",
        "correta": false
      },
      {
        "letra": "B",
        "texto": "Apenas II é verdadeira",
        "correta": false
      },
      {
        "letra": "C",
        "texto": "Apenas I e II são verdadeiras",
        "correta": false
      },
      {
        "letra": "D",
        "texto": "Todas são verdadeiras",
        "correta": true
      }
    ],
    "explicacao_geral": "**Raciocínio:** Analisando cada afirmação sobre Hashing com Encadeamento Separado.\n\n- **Afirmação (a):** Verdadeira. Colisões secundárias e agrupamento (clustering) são problemas de técnicas de endereçamento aberto (como sondagem linear). No encadeamento, os elementos que colidem são simplesmente adicionados à lista encadeada daquele índice, sem afetar outras posições da tabela.\n- **Afirmação (b):** Verdadeira. O pior caso ocorre quando todas as 'n' chaves são mapeadas para o mesmo índice. Isso transforma a estrutura em uma única lista encadeada, e a busca se torna linear, com custo $O(n)$.\n- **Afirmação (c):** Verdadeira. O fator de carga (número de chaves / tamanho da tabela) pode ser maior que 1 no hashing com encadeamento, pois cada posição pode armazenar múltiplos elementos em sua lista. No endereçamento aberto, o número de chaves não pode exceder o número de posições.\n\nComo as três afirmações (a, b, c) são verdadeiras, a alternativa correta é a D."
  },
  {
    "id_questao": "2023_0_q5",
    "prova_referencia": "2023-0.pdf",
    "numero_questao": 5,
    "ano_prova": 2023,
    "area": [
      {
        "nome": "Estruturas de Dados",
        "subarea": "Arrays"
      },
      {
        "nome": "Estruturas de Dados",
        "subarea": "Árvores (BST)"
      },
      {
        "nome": "Análise de Complexidade",
        "subarea": null
      }
    ],
    "enunciado": "Considerando-se as operações com um vetor, mantido ordenado a cada inserção de chave, e uma árvore binária de pesquisa balanceada, pode-se dizer que:\n\na. O vetor ordenado apresenta custo de inserção e de remoção menores que o da árvore, pois não exigir alocação dinâmica de nós\nb. No pior caso, o custo da operação de busca por uma chave é assintoticamente igual tanto no vetor ordenado quanto na árvore\n\nA) Apenas l é verdadeira\nB) Apenas II é verdadeira\nC) As duas são verdadeiras\nD) Nenhuma é verdadeira",
    "opcoes": [
      {
        "letra": "A",
        "texto": "Apenas l é verdadeira",
        "correta": false
      },
      {
        "letra": "B",
        "texto": "Apenas II é verdadeira",
        "correta": true
      },
      {
        "letra": "C",
        "texto": "As duas são verdadeiras",
        "correta": false
      },
      {
        "letra": "D",
        "texto": "Nenhuma é verdadeira",
        "correta": false
      }
    ],
    "explicacao_geral": "**Raciocínio:** Comparando as complexidades das operações para as duas estruturas.\n*Obs: As opções A, B, C, D referem-se às afirmações 'a' e 'b' como se fossem 'I' e 'II'.*\n\n- **Afirmação (a) / I:** Falsa. A inserção/remoção em um vetor ordenado exige, no pior caso, o deslocamento de todos os elementos, resultando em um custo de $O(n)$. Em uma árvore de pesquisa balanceada (AVL, Rubro-Negra), a inserção/remoção tem custo de $O(\\log n)$. Como $O(n)$ é assintoticamente maior que $O(\\log n)$, a afirmação é falsa.\n- **Afirmação (b) / II:** Verdadeira. A busca em um vetor ordenado é feita com busca binária, com custo $O(\\log n)$. A busca em uma árvore de pesquisa **balanceada** também tem seu custo limitado pela altura da árvore, que é $O(\\log n)$. Portanto, os custos de busca no pior caso são assintoticamente iguais.\n\nComo apenas a segunda afirmação é verdadeira, a resposta é a B."
  },
  {
    "id_questao": "2023_0_q6",
    "prova_referencia": "2023-0.pdf",
    "numero_questao": 6,
    "ano_prova": 2023,
    "area": [
      {
        "nome": "Estruturas de Dados",
        "subarea": "Árvores (BST, AVL, Rubro-Negra, Heap)"
      }
    ],
    "enunciado": "Considere a figura abaixo, que ilustra uma árvore com três nós contendo chaves inteiras, sendo que a raiz da árvore (marcada com \"x\") contém a chave 5, e marque a alternativa correta.\n\n```mermaid\ngraph TD\n    5 --> 7\n    5 --> 6\n```",
    "opcoes": [
      {
        "letra": "A",
        "texto": "A árvore pode ser uma árvore vermelho e preto (RB-tree), visto que está balanceada (lembrando que não é necessário representar os nós com as cores vermelho e preto no desenho)",
        "correta": false
      },
      {
        "letra": "B",
        "texto": "A árvore pode representar uma árvore binária de pesquisa, a qual pode estar com ou sem balanceamento",
        "correta": false
      },
      {
        "letra": "C",
        "texto": "A árvore pode representar uma heap mínima",
        "correta": true
      },
      {
        "letra": "D",
        "texto": "A árvore é do tipo AVL, pois está balanceada",
        "correta": false
      }
    ],
    "explicacao_geral": "**Raciocínio:** Vamos analisar a árvore (raiz=5, filhos=7 e 6) em relação a cada tipo de estrutura.\n\n- **Árvore Binária de Pesquisa (BST):** Falso. Em uma BST, todos os nós na subárvore esquerda devem ser menores que a raiz, e todos na subárvore direita devem ser maiores. A árvore da figura viola essa regra (ex: 7 não é menor que 5, 6 não é maior que 5).\n- **Árvore AVL / Rubro-Negra (RB-Tree):** Falso. Ambas são tipos especiais de BST. Se a estrutura não é uma BST, não pode ser nem AVL nem Rubro-Negra.\n- **Heap Mínima (Min-Heap):** Verdadeiro. Em uma heap mínima, o valor de qualquer nó pai deve ser menor ou igual aos valores de seus filhos. Na figura, a raiz (5) é menor que ambos os seus filhos (7 e 6). Portanto, a estrutura **pode** representar uma heap mínima."
  },
  {
    "id_questao": "2023_0_q7",
    "prova_referencia": "2023-0.pdf",
    "numero_questao": 7,
    "ano_prova": 2023,
    "area": [
      {
        "nome": "Análise de Complexidade",
        "subarea": "Notação Big O"
      },
      {
        "nome": "Estruturas de Dados",
        "subarea": null
      }
    ],
    "enunciado": "Sobre a complexidade de algoritmos, marque a alternativa correta:",
    "opcoes": [
      {
        "letra": "A",
        "texto": "A busca binária em vetor ordenado é realizada em tempo $O(N/2)$ no pior caso, sendo N o tamanho do vetor de chaves",
        "correta": false
      },
      {
        "letra": "B",
        "texto": "É possível inserir elementos de forma não ordenada em uma lista encadeada a custo constante no pior caso, independentemente da quantidade de elementos da lista encadeada",
        "correta": true
      },
      {
        "letra": "C",
        "texto": "A inserção de elementos no início de um vetor é feita a custo constante no pior caso, independentemente da quantidade de elementos do vetor",
        "correta": false
      },
      {
        "letra": "D",
        "texto": "A inserção em uma árvore binária de pesquisa pode ser realizada a custo constante no pior caso, independentemente da quantidade de elementos da árvore",
        "correta": false
      }
    ],
    "explicacao_geral": "**Raciocínio:**\n- **(A) Incorreto:** A complexidade da busca binária é logarítmica, $O(\\log N)$, pois o espaço de busca é dividido pela metade a cada passo. $O(N/2)$ é uma complexidade linear, $O(N)$.\n- **(B) Correto:** Para inserir um elemento no início de uma lista encadeada, basta alocar um novo nó, fazer seu ponteiro `next` apontar para a antiga cabeça e atualizar o ponteiro da cabeça da lista. Este é um número fixo de operações, resultando em uma complexidade de tempo constante, $O(1)$.\n- **(C) Incorreto:** A inserção no início de um vetor (array dinâmico) requer o deslocamento de todos os `N` elementos existentes para a direita, o que é uma operação de custo linear, $O(N)$.\n- **(D) Incorreto:** A inserção em uma árvore binária de pesquisa requer a travessia da árvore para encontrar o local correto. No pior caso (uma árvore degenerada), isso leva tempo linear, $O(N)$. Nunca é constante no pior caso."
  },
  {
    "id_questao": "2023_0_q8",
    "prova_referencia": "2023-0.pdf",
    "numero_questao": 8,
    "ano_prova": 2023,
    "area": [
      {
        "nome": "Algoritmos de Ordenação",
        "subarea": "MergeSort"
      },
      {
        "nome": "Recursão",
        "subarea": null
      }
    ],
    "enunciado": "Considere o pseudo-código abaixo e escolha a opção correta:\n\n```c\nvoid par (int v[], int inicio, int meio, int fim, int vaux[]) {\n    unsigned i=inicio, j=meio+1, k=inicio;\n    while((i <= meio) && (j <= fim)) {\n        if (v[i] < v[j]) { vaux[k] = v[i]; i++; }\n        else { vaux[k] = v[j]; j++; }\n        k++;\n    }\n    while(i <= meio) { vaux[k] = v[i]; i++; k++; }\n    while(j <= fim) { vaux[k] = v[j]; j++; k++; }\n    for(i = inicio; i <= fim; i++) { v[i] = vaux[i]; }\n}\n\nvoid sortR (int v[], int inicio, int fim, int vaux[]) {\n    int meio;\n    if(inicio < fim) {\n        meio = (inicio+fim)/2;\n        sortR(v, inicio, meio, vaux);\n        sortR(v, meio+1, fim, vaux);\n        par(v, inicio, meio, fim, vaux);\n    }\n}\n\nvoid sort (int v[], int tam) {\n    int* vaux = (int*) malloc (sizeof(int) * tam);\n    sortR(v, 0, tam-1, vaux);\n    free(vaux);\n}\n```",
    "opcoes": [
      {
        "letra": "A",
        "texto": "Ela implementa um algoritmo recursivo conhecido como Quick Sort ao chamar a função recursiva sortR para ordenar o vetor v",
        "correta": false
      },
      {
        "letra": "B",
        "texto": "Ela implementa um algoritmo recursivo conhecido como Radix Sort ao chamar a função recursiva sortR para ordenar o vetor v",
        "correta": false
      },
      {
        "letra": "C",
        "texto": "Ela implementa um algoritmo recursivo conhecido como Merge Sort ao chamar a função recursiva sortR para ordenar o vetor v",
        "correta": true
      },
      {
        "letra": "D",
        "texto": "Ela não ordena o vetor v",
        "correta": false
      }
    ],
    "explicacao_geral": "**Raciocínio:** O código exibe o padrão clássico do algoritmo Merge Sort.\n\n1.  **Divisão:** A função `sortR` divide o vetor recursivamente em duas metades até que os subvetores tenham um único elemento (caso base da recursão).\n2.  **Conquista:** Os subvetores de um elemento já estão, por definição, ordenados.\n3.  **Combinação:** A função `par` (de `intercalar` ou `merge`) combina (intercala) dois subvetores vizinhos e já ordenados em um único subvetor ordenado, utilizando um vetor auxiliar `vaux`.\n\nEsta abordagem de dividir, resolver recursivamente e combinar é a essência do **Merge Sort**."
  },
  {
    "id_questao": "2023_0_q9",
    "prova_referencia": "2023-0.pdf",
    "numero_questao": 9,
    "ano_prova": 2023,
    "area": [
      {
        "nome": "Recursão",
        "subarea": "Técnicas recursivas e análise"
      }
    ],
    "enunciado": "Qual é a saída do seguinte pseudo-código? Considere que:\n- len(lista) retorna o número de elementos em uma lista\n- max(a,b) retorna o maior dos argumentos. Por exemplo, max(5,8) retorna 8 e max(3,1) retorna 3\n- A notação lista[1:] equivale a uma cópia da lista sem o primeiro elemento. Por exemplo, se a lista for lista = [1,2,3], então lista[1:] será a lista [2, 3]\n\n```python\ndef recursao(lista):\n    if len(lista) == 1:\n        return lista[0]\n    else:\n        return max(lista[0], recursao(lista[1:]))\n\nprint(recursao([11, 2, 13, 5, 7, 3]))\n```",
    "opcoes": [
      {
        "letra": "A",
        "texto": "13",
        "correta": true
      },
      {
        "letra": "B",
        "texto": "3",
        "correta": false
      },
      {
        "letra": "C",
        "texto": "11",
        "correta": false
      },
      {
        "letra": "D",
        "texto": "2",
        "correta": false
      }
    ],
    "explicacao_geral": "**Raciocínio:** A função `recursao` encontra o maior elemento de uma lista de forma recursiva. Ela compara o primeiro elemento da lista com o maior elemento do restante da lista.\n\n**Rastreamento da Execução:**\n- `recursao([11, 2, 13, 5, 7, 3])` retorna `max(11, recursao([2, 13, 5, 7, 3]))`\n- `recursao([2, 13, 5, 7, 3])` retorna `max(2, recursao([13, 5, 7, 3]))`\n- `recursao([13, 5, 7, 3])` retorna `max(13, recursao([5, 7, 3]))`\n- `recursao([5, 7, 3])` retorna `max(5, recursao([7, 3]))`\n- `recursao([7, 3])` retorna `max(7, recursao([3]))`\n- `recursao([3])` retorna `3` (caso base).\n\n**Resolvendo de volta:**\n- `max(7, 3)` é 7.\n- `max(5, 7)` é 7.\n- `max(13, 7)` é 13.\n- `max(2, 13)` é 13.\n- `max(11, 13)` é **13**."
  },
  {
    "id_questao": "2023_0_q10",
    "prova_referencia": "2023-0.pdf",
    "numero_questao": 10,
    "ano_prova": 2023,
    "area": [
      {
        "nome": "Estruturas de Dados",
        "subarea": "Arrays"
      },
      {
        "nome": "Algoritmos",
        "subarea": "Operações Fundamentais"
      }
    ],
    "enunciado": "Qual é o resultado do seguinte pseudo-código na variável resultMatrix quando as entradas são duas matrizes \"matrixA\" e \"matrixB\" de dimensões m x n e n x p, respectivamente? Sendo $m=2$, $n=3$ e $p=2$\n\n```c\nint[][] matrixA = {{1, 0, 2}, {0, 5, 0}};\nint[][] matrixB = {{0, 8}, {9, 0}, {0, 11}};\nint[][] resultMatrix = new int[m][p];\n\nfor (int i=0; i<m; i++) {\n    for (int j=0; j<p; j++) {\n        int sum=0;\n        for (int k=0; k<n; k++) {\n            sum += matrixA[i][k] * matrixB[k][j];\n        }\n        resultMatrix[i][j] = sum;\n    }\n}\n```",
    "opcoes": [
      {
        "letra": "A",
        "texto": "resultMatrix = {{0, 0}, {0, 0}}",
        "correta": false
      },
      {
        "letra": "B",
        "texto": "resultMatrix = {{0, 30, 0}, {45, 0, 0}}",
        "correta": false
      },
      {
        "letra": "C",
        "texto": "resultMatrix = {{0, 30}, {45, 0}, {9, 8}}",
        "correta": false
      },
      {
        "letra": "D",
        "texto": "resultMatrix = {{0, 30}, {45, 0}}",
        "correta": true
      }
    ],
    "explicacao_geral": "**Raciocínio:** O código implementa a multiplicação de matrizes. A matriz resultante `resultMatrix` terá dimensão `m x p`, ou seja, `2 x 2`. Cada elemento `resultMatrix[i][j]` é o produto escalar da linha `i` de `matrixA` pela coluna `j` de `matrixB`.\n\n- **`resultMatrix[0][0]`**: (Linha 0 de A) ⋅ (Coluna 0 de B) = `(1*0) + (0*9) + (2*0)` = `0 + 0 + 0` = **0**\n- **`resultMatrix[0][1]`**: (Linha 0 de A) ⋅ (Coluna 1 de B) = `(1*8) + (0*0) + (2*11)` = `8 + 0 + 22` = **30**\n- **`resultMatrix[1][0]`**: (Linha 1 de A) ⋅ (Coluna 0 de B) = `(0*0) + (5*9) + (0*0)` = `0 + 45 + 0` = **45**\n- **`resultMatrix[1][1]`**: (Linha 1 de A) ⋅ (Coluna 1 de B) = `(0*8) + (5*0) + (0*11)` = `0 + 0 + 0` = **0**\n\n**Matriz Resultante:** `{{0, 30}, {45, 0}}`"
  }
]
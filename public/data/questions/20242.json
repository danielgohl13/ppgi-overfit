[
  {
    "id_questao": "2024_2_q1",
    "prova_referencia": "2024-2.pdf",
    "numero_questao": 1,
    "ano_prova": 2024,
    "area": [
      {
        "nome": "Algoritmos",
        "subarea": null
      }
    ],
    "enunciado": "Ao compilar e executar o programa a seguir escrito em linguagem de programação C, quantas vezes será impressa a string Teste?\n```c\n#include <stdio.h>\nint main(void) {\n    int i, j;\n    for (i=2; i<=4; i++) {\n        for(j=1; j<3; j++) {\n            printf(\"Teste\\n\");\n        }\n    }\n}\n```",
    "opcoes": [
      {
        "letra": "a",
        "texto": "6",
        "correta": true
      },
      {
        "letra": "b",
        "texto": "3",
        "correta": false
      },
      {
        "letra": "c",
        "texto": "4",
        "correta": false
      },
      {
        "letra": "d",
        "texto": "5",
        "correta": false
      },
      {
        "letra": "e",
        "texto": "8",
        "correta": false
      }
    ],
    "explicacao_geral": "**Raciocínio:** A questão envolve a análise de dois laços `for` aninhados.\n\n- **Laço Externo:** `for (i=2; i<=4; i++)`. Este laço executará para `i = 2`, `i = 3` e `i = 4`. Portanto, ele realiza 3 iterações.\n- **Laço Interno:** `for(j=1; j<3; j++)`. Este laço executará para `j = 1` e `j = 2`. Portanto, ele realiza 2 iterações.\n\n**Cálculo:** Para cada iteração do laço externo, o laço interno executa completamente. O número total de vezes que `printf(\"Teste\\n\");` será executado é o produto das iterações dos dois laços: 3 (iterações externas) * 2 (iterações internas) = 6 vezes."
  },
  {
    "id_questao": "2024_2_q3",
    "prova_referencia": "2024-2.pdf",
    "numero_questao": 3,
    "ano_prova": 2024,
    "area": [
      {
        "nome": "Algoritmos",
        "subarea": null
      }
    ],
    "enunciado": "Ao compilar e executar o programa a seguir escrito em linguagem de programação C, o que será impresso?\n```c\n#include <stdio.h>\nint main(void) {\n    int x, i, cont = 0;\n    x=18;\n    for(i=1; i<=x; i++) {\n        if ((x % i) == 0) {\n            cont=cont+1;\n        }\n    }\n    printf(\"%d\", cont);\n}\n```",
    "opcoes": [
      {
        "letra": "a",
        "texto": "6",
        "correta": true
      },
      {
        "letra": "b",
        "texto": "7",
        "correta": false
      },
      {
        "letra": "c",
        "texto": "5",
        "correta": false
      },
      {
        "letra": "d",
        "texto": "8",
        "correta": false
      },
      {
        "letra": "e",
        "texto": "4",
        "correta": false
      }
    ],
    "explicacao_geral": "**Raciocínio:** O programa calcula o número de divisores do inteiro `x`, que foi inicializado com o valor 18.\n\n- **Laço:** O laço `for` itera a variável `i` de 1 até 18.\n- **Condição:** A condição `if ((x % i) == 0)` verifica se o resto da divisão de `x` por `i` é zero. Isso é verdade apenas quando `i` é um divisor de `x`.\n- **Contador:** A variável `cont` é incrementada toda vez que um divisor é encontrado.\n\n**Divisores de 18:** 1, 2, 3, 6, 9, 18.\n\nO programa encontrará 6 divisores, e o valor final de `cont` impresso na tela será 6."
  },
  {
    "id_questao": "2024_2_q4",
    "prova_referencia": "2024-2.pdf",
    "numero_questao": 4,
    "ano_prova": 2024,
    "area": [
      {
        "nome": "Estruturas de Dados",
        "subarea": "Pilhas"
      }
    ],
    "enunciado": "Considere a seguinte sequência de operações em uma pilha inicialmente vazia, considerando que Push implementa a operação de empilhar um elemento e Pop a operação de desempilhar um elemento:\nPush(4); Pop(); Push(2); Push(3); Pop(); Push(1); Pop(); Pop(); Push(6); Push(7).\n\nApós todas as operações serem realizadas, qual será o número de elementos na pilha?",
    "opcoes": [
      {
        "letra": "a",
        "texto": "3",
        "correta": false
      },
      {
        "letra": "b",
        "texto": "1",
        "correta": false
      },
      {
        "letra": "c",
        "texto": "4",
        "correta": false
      },
      {
        "letra": "d",
        "texto": "10",
        "correta": false
      },
      {
        "letra": "e",
        "texto": "2",
        "correta": true
      }
    ],
    "explicacao_geral": "**Rastreamento das Operações na Pilha (LIFO - Last-In, First-Out):**\n\n1.  `Pilha: []` (inicialmente vazia)\n2.  `Push(4)` -> `Pilha: [4]`\n3.  `Pop()` -> `Pilha: []` (remove 4)\n4.  `Push(2)` -> `Pilha: [2]`\n5.  `Push(3)` -> `Pilha: [2, 3]` (3 está no topo)\n6.  `Pop()` -> `Pilha: [2]` (remove 3)\n7.  `Push(1)` -> `Pilha: [2, 1]` (1 está no topo)\n8.  `Pop()` -> `Pilha: [2]` (remove 1)\n9.  `Pop()` -> `Pilha: []` (remove 2)\n10. `Push(6)` -> `Pilha: [6]`\n11. `Push(7)` -> `Pilha: [6, 7]` (7 está no topo)\n\nAo final de todas as operações, a pilha contém os elementos `[6, 7]`. Portanto, o número de elementos na pilha é 2."
  },
  {
    "id_questao": "2024_2_q7",
    "prova_referencia": "2024-2.pdf",
    "numero_questao": 7,
    "ano_prova": 2024,
    "area": [
      {
        "nome": "Estruturas de Dados",
        "subarea": "AVL"
      }
    ],
    "enunciado": "Qual é a altura máxima de qualquer árvore AVL com 9 nós, considerando aqui que a altura de uma árvore com um único nó é zero e com dois nós é 1?",
    "opcoes": [
      {
        "letra": "a",
        "texto": "4",
        "correta": false
      },
      {
        "letra": "b",
        "texto": "5",
        "correta": false
      },
      {
        "letra": "c",
        "texto": "3",
        "correta": true
      },
      {
        "letra": "d",
        "texto": "6",
        "correta": false
      },
      {
        "letra": "e",
        "texto": "9",
        "correta": false
      }
    ],
    "explicacao_geral": "**Raciocínio:** Para encontrar a altura máxima de uma árvore AVL com `n` nós, verificamos o número mínimo de nós `N(h)` necessários para formar uma árvore AVL de altura `h`.\n\n- A recorrência para `N(h)` é: $N(h) = 1 + N(h-1) + N(h-2)$\n- Casos base (conforme o enunciado): \n  - $h=0$: $N(0)=1$ (um nó)\n  - $h=1$: $N(1)=2$ (dois nós)\n\n**Cálculo:**\n- Para $h=2$: $N(2) = 1 + N(1) + N(0) = 1 + 2 + 1 = 4$ nós.\n- Para $h=3$: $N(3) = 1 + N(2) + N(1) = 1 + 4 + 2 = 7$ nós.\n- Para $h=4$: $N(4) = 1 + N(3) + N(2) = 1 + 7 + 4 = 12$ nós.\n\nUma árvore com 9 nós tem mais nós que o mínimo para uma altura de 3 (7 nós) e menos nós que o mínimo para uma altura de 4 (12 nós). Portanto, a altura máxima que uma árvore AVL com 9 nós pode atingir é 3."
  },
  {
    "id_questao": "2024_2_q8",
    "prova_referencia": "2024-2.pdf",
    "numero_questao": 8,
    "ano_prova": 2024,
    "area": [
      {
        "nome": "Algoritmos de Ordenação",
        "subarea": "QuickSort"
      }
    ],
    "enunciado": "Considere que o particionamento realizado em um vetor pelo algoritmo Quicksort deve garantir que ao final o vetor esteja corretamente ordenado e considere uma implementação na qual a escolha do pivô é feita de forma aleatória a partir de um dos elementos do vetor. O vetor abaixo apresenta o resultado do primeiro particionamento do Quicksort em um processo de ordenação de forma crescente, feito portanto considerando o vetor completo como intervalo. Selecione a alternativa correta.\n\n`[3, 7, 2, 5, 4, 7, 8, 8]`",
    "opcoes": [
      {
        "letra": "a",
        "texto": "O valor do pivô que gerou a partição pode ter sido apenas 3 ou 8, não podendo ter sido 2, 4, 5 e nem 7.",
        "correta": false
      },
      {
        "letra": "b",
        "texto": "O valor do pivô que gerou a partição pode ter sido apenas 4 ou 5, não podendo ter sido 2, 3, 7 e nem 8.",
        "correta": false
      },
      {
        "letra": "c",
        "texto": "O valor do pivô que gerou a partição pode ter sido apenas 7 ou 8, não podendo ter sido 2, 3, 4 e nem 5.",
        "correta": true
      },
      {
        "letra": "d",
        "texto": "O valor do pivô que gerou a partição pode ter sido apenas o 8, não podendo ter sido 2, 3, 4, 5 e nem 7",
        "correta": false
      },
      {
        "letra": "e",
        "texto": "Nenhuma das alternativas anteriores está correta",
        "correta": false
      }
    ],
    "explicacao_geral": "**Raciocínio:** Após o particionamento em torno de um pivô `p`, o vetor é rearranjado de modo que existe um índice `k` onde todos os elementos à esquerda de `k` são menores ou iguais a `p`, e todos os elementos à direita de `k` são maiores ou iguais a `p`. Os subvetores à esquerda e à direita não estão internamente ordenados.\n\nVamos testar os pivôs sugeridos na opção correta:\n\n- **Se o pivô foi 7:** Os elementos do vetor são `{3, 7, 2, 5, 4, 7, 8, 8}`. Os elementos menores que 7 são `{3, 2, 5, 4}`. Os elementos maiores que 7 são `{8, 8}`. O vetor particionado `[3, 7, 2, 5, 4, 7, 8, 8]` é um resultado válido. Por exemplo, ele pode ser dividido em `[3, 2, 5, 4]` (menores), `[7, 7]` (iguais) e `[8, 8]` (maiores), e o particionamento pode misturar os elementos dentro desses grupos.\n\n- **Se o pivô foi 8:** Os elementos menores que 8 são `{3, 7, 2, 5, 4, 7}`. O vetor particionado `[3, 7, 2, 5, 4, 7, 8, 8]` é um resultado válido, pois todos os elementos antes dos `8`s são, de fato, menores que 8.\n\n- **Outros pivôs:** Se o pivô fosse, por exemplo, 5, o elemento 7 não poderia estar à esquerda do 5 no resultado do particionamento, o que invalida essa possibilidade. O mesmo raciocínio se aplica aos outros valores."
  },
  {
    "id_questao": "2024_2_q9",
    "prova_referencia": "2024-2.pdf",
    "numero_questao": 9,
    "ano_prova": 2024,
    "area": [
      {
        "nome": "Algoritmos de Ordenação",
        "subarea": "QuickSort"
      },
      {
        "nome": "Algoritmos de Ordenação",
        "subarea": "MergeSort"
      },
      {
        "nome": "Algoritmos de Ordenação",
        "subarea": "Insertion Sort"
      },
      {
        "nome": "Algoritmos de Ordenação",
        "subarea": "Selection Sort"
      },
      {
        "nome": "Análise de Complexidade",
        "subarea": "Notação Big O"
      }
    ],
    "enunciado": "Considerando que você está ordenando um vetor com 1 bilhão de posições e considerando o pior dos cenários em termos de número de comparações envolvendo chaves para cada algoritmo, ao considerarmos apenas QuickSort, MergeSort, Ordenação por Inserção e Ordenação por Seleção",
    "opcoes": [
      {
        "letra": "a",
        "texto": "O quicksort faz menos comparações de valores envolvendo valores das chaves de ordenação dos elementos que os outros três citados nas opções",
        "correta": false
      },
      {
        "letra": "b",
        "texto": "O Mergesort faz menos comparações envolvendo valores das chaves de ordenação dos elementos que os outros três citados nas opções",
        "correta": true
      },
      {
        "letra": "c",
        "texto": "Ordenação por Inserção faz menos comparações envolvendo valores das chaves de ordenação dos elementos que os outros três citados nas opções",
        "correta": false
      },
      {
        "letra": "d",
        "texto": "Ordenação por seleção faz menos comparações envolvendo valores das chaves de ordenação dos elementos que os outros três citados nas opções",
        "correta": false
      },
      {
        "letra": "e",
        "texto": "Há um empate entre os algoritmos Quicksort e Mergesort no número de comparações envolvendo valores das chaves de ordenação dos elementos, sendo os dois melhores que Ordenação por Inserção e Ordenação por seleção",
        "correta": false
      }
    ],
    "explicacao_geral": "**Análise da Complexidade no Pior Caso:**\n\n- **QuickSort:** No pior caso (por exemplo, com um vetor já ordenado e um pivô ruim), sua complexidade de tempo é $O(n^2)$.\n- **MergeSort:** Tem uma complexidade de tempo garantida de $O(n \\log n)$ em todos os casos (melhor, médio e pior).\n- **Ordenação por Inserção (Insertion Sort):** No pior caso (vetor em ordem inversa), sua complexidade é $O(n^2)$.\n- **Ordenação por Seleção (Selection Sort):** Sua complexidade é sempre $O(n^2)$, independentemente da ordem inicial dos dados.\n\nPara um vetor muito grande (`n` = 1 bilhão), a diferença entre $O(n \\log n)$ e $O(n^2)$ é colossal. O MergeSort, com sua complexidade de pior caso $O(n \\log n)$, fará um número de comparações ordens de magnitude menor do que os outros algoritmos, que têm um pior caso de $O(n^2)$."
  },
  {
    "id_questao": "2024_2_q10",
    "prova_referencia": "2024-2.pdf",
    "numero_questao": 10,
    "ano_prova": 2024,
    "area": [
      {
        "nome": "Estruturas de Dados",
        "subarea": "Listas Encadeadas"
      }
    ],
    "enunciado": "Considere o seguinte programa (pseudocódigo) e indique qual das alternativas é a verdadeira.\n```c\n#include <stdio.h>\n#include <stdlib.h>\ntypedef struct No { int dado; struct No* prox; } No;\n\nNo* criarNo (int valor) {\n    No* novo = malloc(sizeof(No));\n    novo->dado = valor;\n    novo->prox = NULL;\n    return novo;\n}\n\nvoid inserirNo (No** cabeca, int valor) {\n    No* novo = criarNo(valor);\n    novo->prox = *cabeca;\n    *cabeca = novo;\n}\n\nint main() {\n    No* lista = NULL;\n    inserirNo(&lista, 10);\n    inserirNo(&lista, 20);\n    inserirNo(&lista, 30);\n    printf(\"Lista criada com os elementos!\\n\");\n    return 0;\n}\n```",
    "opcoes": [
      {
        "letra": "a",
        "texto": "O programa não utiliza alocação dinâmica de memória para criar o nós da lista encadeada. Os elementos são inseridos no início da lista. A lista é representada por um ponteiro para o primeiro nó. Não há liberação explícita da memória alocada para os nós.",
        "correta": false
      },
      {
        "letra": "b",
        "texto": "O programa utiliza alocação dinâmica de memória para criar o nós da lista encadeada. Os elementos são inseridos no fim da lista. A lista é representada por um ponteiro para o primeiro nó. Não há liberação explícita da memória alocada para os nós.",
        "correta": false
      },
      {
        "letra": "c",
        "texto": "O programa utiliza alocação dinâmica de memória para criar o nós da lista encadeada. Os elementos são inseridos no início da lista. A lista é representada por um ponteiro para o primeiro nó. Há liberação explícita da memória alocada para os nós.",
        "correta": false
      },
      {
        "letra": "d",
        "texto": "O programa utiliza alocação dinâmica de memória para criar o nós da lista encadeada. Os elementos são inseridos no início da lista. A lista é representada por um ponteiro para o primeiro nó. Não há liberação explícita da memória alocada para os nós.",
        "correta": true
      },
      {
        "letra": "e",
        "texto": "Nenhuma das opções anteriores é verdadeira.",
        "correta": false
      }
    ],
    "explicacao_geral": "Analisando o código:\n1.  **Alocação de Memória:** A função `criarNo` usa `malloc(sizeof(No))`, o que caracteriza o uso de alocação dinâmica de memória.\n2.  **Método de Inserção:** A função `inserirNo` executa `novo->prox = *cabeca;` e `*cabeca = novo;`. Esta é a lógica padrão para inserir um novo nó no **início** da lista (tornando-o a nova cabeça).\n3.  **Representação da Lista:** A variável `lista` na função `main` é um ponteiro para o primeiro nó (`No*`), servindo como a cabeça da lista.\n4.  **Liberação de Memória:** Não há nenhuma chamada à função `free()` no código, portanto, a memória alocada dinamicamente para os nós não é liberada explicitamente.\n\nA alternativa (d) descreve corretamente todos esses pontos."
  },
  {
    "id_questao": "2024_2_q11",
    "prova_referencia": "2024-2.pdf",
    "numero_questao": 11,
    "ano_prova": 2024,
    "area": [
      {
        "nome": "Estruturas de Dados",
        "subarea": "Listas Encadeadas"
      },
      {
        "nome": "Análise de Complexidade",
        "subarea": null
      }
    ],
    "enunciado": "Considerando o seguinte programa (pseudocódigo) indique qual das afirmações é a verdadeira.\n```c\n#include <stdio.h>\n#include <stdlib.h>\ntypedef struct No { int dado; struct No* prox; } No;\n\nNo* criarNo (int valor) { /* ... (igual à questão 10) ... */ }\n\nvoid inserirNo (No** cabeca, int valor) {\n    No* novo = criarNo(valor);\n    if (*cabeca == NULL) {\n        *cabeca = novo;\n    } else {\n        No* atual = *cabeca;\n        while (atual->prox != NULL) {\n            atual = atual->prox;\n        }\n        atual->prox = novo;\n    }\n}\n\nint main() {\n    No* lista = NULL;\n    inserirNo(&lista, 10);\n    inserirNo(&lista, 20);\n    inserirNo(&lista, 30);\n    return 0;\n}\n```",
    "opcoes": [
      {
        "letra": "a",
        "texto": "Ao inserir o elemento 30 na lista, na terceira chamada da função inserirNo feita na função main, a linha de comando destacada em negrito, com o comando while, é executada 3 vezes. De forma geral, a quantidade de vezes que esta linha é executada depende da quantidade de elementos na lista.",
        "correta": false
      },
      {
        "letra": "b",
        "texto": "Ao inserir o elemento 30 na lista, na terceira chamada da função inserirNo feita na função main, a linha de comando destacada em negrito, com o comando while, é executada 2 vezes. De forma geral, a quantidade de vezes que esta linha é executada depende da quantidade de elementos na lista.",
        "correta": true
      },
      {
        "letra": "c",
        "texto": "Ao inserir o elemento 30 na lista, na terceira chamada da função inserirNo feita na função main, a linha de comando destacada em negrito, com o comando while, é executada 3 vezes. Ao inserir o elemento 30 na lista o loop while executa 3 vezes. De forma geral, a quantidade de vezes que este loop executa não depende da quantidade de elementos já inseridos na lista.",
        "correta": false
      },
      {
        "letra": "d",
        "texto": "Ao inserir o elemento 30 na lista, na terceira chamada da função inserirNo feita na função main, a linha de comando destacada em negrito, com o comando while, é executada 0 vezes.",
        "correta": false
      },
      {
        "letra": "e",
        "texto": "Ao inserir o elemento 30 na lista, na terceira chamada da função inserirNo feita na função main, a linha de comando destacada em negrito, com o comando while, é executada 1 vez.",
        "correta": false
      }
    ],
    "explicacao_geral": "**Raciocínio:** O código implementa a inserção no final de uma lista simplesmente encadeada. O laço `while (atual->prox != NULL)` é usado para percorrer a lista até encontrar o último nó.\n\nVamos rastrear as chamadas:\n1.  **`inserirNo(&lista, 10)`:** A lista está vazia (`*cabeca == NULL`). O `while` não é executado. A lista se torna `[10]`.\n2.  **`inserirNo(&lista, 20)`:** A lista é `[10]`. `atual` começa em 10. A condição `atual->prox != NULL` é falsa. O `while` não é executado. `10->prox` é atualizado para o novo nó. A lista se torna `[10, 20]`.\n3.  **`inserirNo(&lista, 30)`:** A lista é `[10, 20]`. `atual` começa em 10. \n    - **1ª iteração do `while`:** A condição `atual->prox != NULL` (ou seja, `10->prox != NULL`) é verdadeira. O corpo do laço (`atual = atual->prox;`) é executado, e `atual` passa a apontar para o nó 20.\n    - **2ª iteração do `while`:** A condição `atual->prox != NULL` (ou seja, `20->prox != NULL`) é falsa. O laço termina.\n    - Após o laço, `20->prox` é atualizado para o novo nó.\n\nA questão é ambígua sobre se \"executada\" se refere ao corpo do laço ou à avaliação da condição. No entanto, se interpretarmos como \"o ponteiro `atual` foi avançado X vezes\", ele foi avançado uma vez. Se interpretarmos como \"a condição do while foi avaliada X vezes até falhar\", ela foi avaliada para o nó 10 (verdadeiro) e para o nó 20 (falso), totalizando 2 avaliações. Dado o gabarito, a interpretação correta era a de quantas vezes a condição do laço é verificada para se chegar ao fim da lista na terceira inserção."
  },
  {
    "id_questao": "2024_2_q12",
    "prova_referencia": "2024-2.pdf",
    "numero_questao": 12,
    "ano_prova": 2024,
    "area": [
      {
        "nome": "Operações Fundamentais",
        "subarea": "Busca"
      }
    ],
    "enunciado": "Considerando o seguinte programa (pseudocódigo) indique qual das afirmações é a verdadeira.\n```c\n#include <stdio.h>\nint buscaBinaria (int vetor[], int tamanho, int valor) {\n    int inicio = 0;\n    int fim = tamanho - 1;\n    while (inicio <= fim) {\n        int meio = (inicio + fim) / 2;\n        if (vetor[meio] == valor) {\n            return meio;\n        }\n        if (vetor[meio] < valor) {\n            inicio = meio + 1;\n        } else {\n            fim = meio - 1;\n        }\n    }\n    return -1;\n}\nint main() {\n    int vetor[] = {1, 3, 5, 7, 9, 11, 13, 15, 17, 19};\n    int tamanho = sizeof(vetor) / sizeof(vetor[0]);\n    int valor = 15;\n    int resultado = buscaBinaria(vetor, tamanho, valor);\n    printf(\"%d\\n\", resultado);\n    return 0;\n}\n```",
    "opcoes": [
      {
        "letra": "a",
        "texto": "A linha em negrito, loop while, será executada 2 vezes e o programa imprime 15.",
        "correta": false
      },
      {
        "letra": "b",
        "texto": "A linha em negrito, loop while, será executada 3 vezes e o programa imprime 7.",
        "correta": false
      },
      {
        "letra": "c",
        "texto": "A linha em negrito, loop while, será executada 2 vezes e o programa imprime 7.",
        "correta": true
      },
      {
        "letra": "d",
        "texto": "A linha em negrito, loop while, 3 vezes e o programa imprime -1.",
        "correta": false
      },
      {
        "letra": "e",
        "texto": "Nenhuma das afirmações anteriores é verdadeira",
        "correta": false
      }
    ],
    "explicacao_geral": "**Rastreamento da Busca Binária:**\n- **Vetor:** `{1, 3, 5, 7, 9, 11, 13, 15, 17, 19}` (tamanho 10, índices 0-9)\n- **Valor a ser buscado:** 15\n- **Código Corrigido:** O código do `main` foi corrigido para `int resultado = buscaBinaria(...)` para que a impressão funcione como o esperado.\n\n**1ª Iteração do `while`:**\n- `inicio = 0`, `fim = 9`\n- `meio = (0 + 9) / 2 = 4`\n- `vetor[4]` é 9. Como `9 < 15`, o intervalo é ajustado: `inicio = meio + 1 = 5`.\n\n**2ª Iteração do `while`:**\n- `inicio = 5`, `fim = 9`\n- `meio = (5 + 9) / 2 = 7`\n- `vetor[7]` é 15. Como `15 == 15`, a função retorna `meio`, que é 7.\n\nO corpo do laço `while` foi executado 2 vezes. A função retorna o índice 7, que é impresso na tela. A opção (c) descreve este resultado corretamente."
  },
  {
    "id_questao": "2024_2_q13",
    "prova_referencia": "2024-2.pdf",
    "numero_questao": 13,
    "ano_prova": 2024,
    "area": [
      {
        "nome": "Recursão",
        "subarea": null
      }
    ],
    "enunciado": "Considere a função em Python a seguir.\n```python\ndef funcao(n):\n    if n == 0:\n        return 0\n    return n % 10 + funcao(n // 10)\n```\nQual o valor retornado pela função quando chamada da seguinte forma: `funcao(42)`?",
    "opcoes": [
      {
        "letra": "a",
        "texto": "4",
        "correta": false
      },
      {
        "letra": "b",
        "texto": "6",
        "correta": true
      },
      {
        "letra": "c",
        "texto": "8",
        "correta": false
      },
      {
        "letra": "d",
        "texto": "24",
        "correta": false
      },
      {
        "letra": "e",
        "texto": "40",
        "correta": false
      }
    ],
    "explicacao_geral": "**Raciocínio:** A função recursiva soma os dígitos de um número inteiro.\n\n- O operador `% 10` obtém o último dígito de um número (o resto da divisão por 10).\n- O operador `// 10` remove o último dígito de um número (a divisão inteira por 10).\n\n**Rastreamento da chamada `funcao(42)`:**\n1.  `funcao(42)` retorna `42 % 10 + funcao(42 // 10)`\n    - Isso é `2 + funcao(4)`\n2.  `funcao(4)` retorna `4 % 10 + funcao(4 // 10)`\n    - Isso é `4 + funcao(0)`\n3.  `funcao(0)` atinge o caso base e retorna `0`.\n\nSubstituindo os valores de volta:\n- O resultado de `funcao(4)` é `4 + 0 = 4`.\n- O resultado final de `funcao(42)` é `2 + 4 = 6`."
  },
  {
    "id_questao": "2024_2_q14",
    "prova_referencia": "2024-2.pdf",
    "numero_questao": 14,
    "ano_prova": 2024,
    "area": [
      {
        "nome": "Recursão",
        "subarea": null
      }
    ],
    "enunciado": "Considere a função em Python a seguir.\n```python\ndef funcao(n, r=0):\n    if n == 0:\n        return r\n    return funcao(n // 10, r * 10 + n % 10)\n```\nQual o retorno da função quando chamada da seguinte forma: `funcao(42)`?",
    "opcoes": [
      {
        "letra": "a",
        "texto": "4",
        "correta": false
      },
      {
        "letra": "b",
        "texto": "6",
        "correta": false
      },
      {
        "letra": "c",
        "texto": "8",
        "correta": false
      },
      {
        "letra": "d",
        "texto": "24",
        "correta": true
      },
      {
        "letra": "e",
        "texto": "40",
        "correta": false
      }
    ],
    "explicacao_geral": "**Raciocínio:** A função recursiva inverte os dígitos de um número inteiro usando um acumulador `r`.\n\n**Rastreamento da chamada `funcao(42)` (inicialmente `r=0`):**\n1.  **`funcao(42, 0)`:**\n    - `n` não é 0.\n    - Chama `funcao(42 // 10, 0 * 10 + 42 % 10)`\n    - Isso é `funcao(4, 2)`\n2.  **`funcao(4, 2)`:**\n    - `n` não é 0.\n    - Chama `funcao(4 // 10, 2 * 10 + 4 % 10)`\n    - Isso é `funcao(0, 20 + 4)` que é `funcao(0, 24)`\n3.  **`funcao(0, 24)`:**\n    - `n` é 0. Atinge o caso base.\n    - Retorna o valor do acumulador `r`, que é `24`.\n\nO resultado final é 24."
  },
  {
    "id_questao": "2024_2_q16",
    "prova_referencia": "2024-2.pdf",
    "numero_questao": 16,
    "ano_prova": 2024,
    "area": [
      {
        "nome": "Algoritmos",
        "subarea": null
      }
    ],
    "enunciado": "Assinale a opção que contém uma implementação correta, em C, de uma função que realiza a seguinte tarefa: \"escreva uma função que recebe como entrada o valor de uma compra, aplicando desconto de 15% ao total se o valor inicial da compra for superior a 100 reais\".",
    "opcoes": [
      {
        "letra": "a",
        "texto": "```c\nfloat calcula_preco(float valor_compra) {\n    if (valor_compra > 100)\n        valor_compra = valor_compra - (valor_compra * 15%); // Erro de sintaxe\n    return valor_compra;\n}\n```",
        "correta": false
      },
      {
        "letra": "b",
        "texto": "```c\nfloat calcula_preco(float valor_compra) {\n    if (valor_compra > 100)\n        valor_compra = valor_compra - (valor_compra * 0.85); // Lógica incorreta\n    return valor_compra;\n}\n```",
        "correta": false
      },
      {
        "letra": "c",
        "texto": "```c\nfloat calcula_preco(float valor_compra) {\n    if (valor_compra > 100)\n        valor_compra = valor_compra * 1.15; // Lógica incorreta\n    return valor_compra;\n}\n```",
        "correta": false
      },
      {
        "letra": "d",
        "texto": "```c\nfloat calcula_preco(float valor_compra) {\n    if (valor_compra > 100)\n        valor_compra = valor_compra / 1.15; // Lógica incorreta\n    return valor_compra;\n}\n```",
        "correta": false
      },
      {
        "letra": "e",
        "texto": "```c\nfloat calcula_preco(float valor_compra) {\n    if (valor_compra > 100)\n        valor_compra = valor_compra * 0.85;\n    return valor_compra;\n}\n```",
        "correta": true
      }
    ],
    "explicacao_geral": "**Raciocínio:** Aplicar um desconto de 15% significa que o preço final será 85% do valor original (100% - 15% = 85%). Portanto, a operação matemática correta é multiplicar o valor da compra por 0.85.\n\n- **(a) Incorreto:** O operador `%` em C é para módulo (resto da divisão), não porcentagem. O código não compilaria.\n- **(b) Incorreto:** `valor_compra * 0.85` calcula o preço com desconto. Subtrair isso do `valor_compra` original (`valor - 0.85*valor`) resulta no valor do desconto (`0.15*valor`), não no preço final.\n- **(c) Incorreto:** Multiplicar por 1.15 aplica um aumento de 15%, não um desconto.\n- **(d) Incorreto:** Dividir por 1.15 não é matematicamente equivalente a subtrair 15%.\n- **(e) Correto:** `valor_compra * 0.85` calcula corretamente o preço final após um desconto de 15%."
  },
  {
    "id_questao": "2024_2_q17",
    "prova_referencia": "2024-2.pdf",
    "numero_questao": 17,
    "ano_prova": 2024,
    "area": [
      {
        "nome": "Hashing",
        "subarea": "Resolução de colisões"
      }
    ],
    "enunciado": "Analise as afirmações a seguir sobre tabelas de espalhamento (hash).\nI. A sondagem linear (linear probing) pode causar aglomeração de chaves devido ao excesso de colisões em regiões muito próximas da posição de inserção original de uma chave qualquer.\nII. Uma estratégia importante para evitar que o algoritmo entre em loop infinito é sempre manter ao menos uma posição vazia na tabela. Assim, sempre será possível inserir uma chave na sua posição correta, independentemente da estratégia de resolução de colisão adotada.\nIII. Na sondagem quadrática (quadratic probing), é possível que a sondagem entre em loop infinito mesmo que a tabela ainda tenha várias posições vazias.",
    "opcoes": [
      {
        "letra": "a",
        "texto": "Apenas as afirmações I e II são verdadeiras.",
        "correta": false
      },
      {
        "letra": "b",
        "texto": "Apenas as afirmações II e III são verdadeiras.",
        "correta": false
      },
      {
        "letra": "c",
        "texto": "Apenas as afirmações I e III são verdadeiras.",
        "correta": true
      },
      {
        "letra": "d",
        "texto": "Todas as afirmações são verdadeiras.",
        "correta": false
      },
      {
        "letra": "e",
        "texto": "Nenhuma das afirmações é verdadeira.",
        "correta": false
      }
    ],
    "explicacao_geral": "**Análise das Afirmativas:**\n\n- **I. Verdadeira:** Este fenômeno é conhecido como **aglomeração primária (primary clustering)**. Quando uma colisão ocorre, a sondagem linear procura a próxima posição livre sequencialmente, o que pode levar à formação de longos blocos de células ocupadas, degradando o desempenho.\n\n- **II. Falsa:** A afirmação é muito forte. Primeiro, a necessidade de manter uma posição vazia é específica para estratégias de endereçamento aberto, como a sondagem linear, para garantir a terminação da busca. Em hash com encadeamento (chaining), a tabela pode ter um fator de carga maior que 1. Segundo, a frase \"independentemente da estratégia\" está incorreta. A sondagem quadrática, por exemplo, pode não encontrar uma posição livre mesmo que a tabela não esteja cheia, se o tamanho da tabela não for escolhido adequadamente.\n\n- **III. Verdadeira:** Na sondagem quadrática, a sequência de sondagem é $h(k)+c_1i+c_2i^2$. Dependendo da escolha do tamanho da tabela e das constantes, a sequência de posições sondadas pode não cobrir todas as células da tabela. Isso pode levar a um loop ou falha na inserção, mesmo que existam posições vazias em outros locais."
  },
  {
    "id_questao": "2024_2_q18",
    "prova_referencia": "2024-2.pdf",
    "numero_questao": 18,
    "ano_prova": 2024,
    "area": [
      {
        "nome": "Estruturas de Dados",
        "subarea": "Listas Encadeadas"
      }
    ],
    "enunciado": "O código abaixo imprime como resultado:\n```c\n#include <stdio.h>\n#include <stdlib.h>\ntypedef struct tipoNo {\n    int d;\n    struct tipoNo *prox;\n} tipoNo;\ntypedef struct tipoLista {\n    tipoNo *ea;\n    tipoNo *eb;\n} tipoLista;\nvoid funcao(tipoLista *p, int num) {\n    tipoNo *aux;\n    aux = (tipoNo *) malloc(sizeof(tipoNo));\n    aux -> d = num;\n    aux -> prox = p->ea;\n    p->ea = aux;\n    p->eb = p->ea->prox;\n}\nvoid mostra(tipoLista *p) {\n    tipoNo *temp = p->eb;\n    while(temp) { \n        printf(\"%d \", temp->d); \n        temp = temp->prox;\n    }\n}\nint main() {\n    tipoLista l;\n    l.ea = NULL;\n    l.eb = NULL;\n    funcao(&l,2);\n    funcao(&l,4);\n    funcao(&l,6);\n    funcao(&l,8);\n    mostra(&l);\n}\n```",
    "opcoes": [
      {
        "letra": "a",
        "texto": "2 4 6 8",
        "correta": false
      },
      {
        "letra": "b",
        "texto": "8 6 4 2",
        "correta": false
      },
      {
        "letra": "c",
        "texto": "6 4 2",
        "correta": true
      },
      {
        "letra": "d",
        "texto": "2 4 6",
        "correta": false
      },
      {
        "letra": "e",
        "texto": "Nenhuma das alternativas anteriores",
        "correta": false
      }
    ],
    "explicacao_geral": "**Raciocínio:** A função `funcao` insere um novo elemento no início da lista (`p->ea`) e faz com que `p->eb` aponte sempre para o segundo elemento da lista. A função `mostra` imprime a lista começando a partir do nó apontado por `p->eb`.\n\n**Rastreamento das Chamadas:**\n- **Inicial:** `l.ea = NULL`, `l.eb = NULL`\n- **`funcao(&l, 2)`:**\n  - Lista se torna `[2]`. `l.ea` aponta para 2.\n  - `l.eb` aponta para `l.ea->prox`, que é `NULL`.\n- **`funcao(&l, 4)`:**\n  - Lista se torna `[4, 2]`. `l.ea` aponta para 4.\n  - `l.eb` aponta para `l.ea->prox`, que é o nó 2.\n- **`funcao(&l, 6)`:**\n  - Lista se torna `[6, 4, 2]`. `l.ea` aponta para 6.\n  - `l.eb` aponta para `l.ea->prox`, que é o nó 4.\n- **`funcao(&l, 8)`:**\n  - Lista se torna `[8, 6, 4, 2]`. `l.ea` aponta para 8.\n  - `l.eb` aponta para `l.ea->prox`, que é o nó 6.\n\n**Execução de `mostra(&l)`:**\n- A função começa a percorrer a lista a partir de `l.eb`, que aponta para o nó com o dado 6.\n- Imprime **6**, avança para o próximo (nó 4).\n- Imprime **4**, avança para o próximo (nó 2).\n- Imprime **2**, avança para o próximo (`NULL`).\n- O laço termina.\n\nA saída impressa é `6 4 2`."
  },
  {
    "id_questao": "2024_2_q19",
    "prova_referencia": "2024-2.pdf",
    "numero_questao": 19,
    "ano_prova": 2024,
    "area": [
      {
        "nome": "Recursão",
        "subarea": null
      }
    ],
    "enunciado": "Para gerar a sequência de Fibonacci usamos a relação de recorrência abaixo (I). Complete o pseudo-código (II) para que o cálculo da sequência de Fibonacci esteja correto utilizando uma das opções abaixo:\n\n(I)\n$\\begin{cases}f(0)=0\\\\ f(1)=1\\\\ f(n)=f(n-1)+f(n-2)\\end{cases}$\n\n(II)\n```\nf(n)\n  if( _______ )\n    return n\n  return f(n-1)+f(n-2)\n```",
    "opcoes": [
      {
        "letra": "a",
        "texto": "n == 0",
        "correta": false
      },
      {
        "letra": "b",
        "texto": "n <= 0",
        "correta": false
      },
      {
        "letra": "c",
        "texto": "n == 1",
        "correta": false
      },
      {
        "letra": "d",
        "texto": "n <= 2",
        "correta": false
      },
      {
        "letra": "e",
        "texto": "n <= 1",
        "correta": true
      }
    ],
    "explicacao_geral": "**Raciocínio:** Uma função recursiva precisa de um ou mais **casos base** para parar a recursão. Para a sequência de Fibonacci, os casos base são $f(0)=0$ e $f(1)=1$. O código fornecido usa `return n` para o caso base.\n\n- Se `n=0`, `return n` retorna `0`, o que está correto.\n- Se `n=1`, `return n` retorna `1`, o que também está correto.\n\nPortanto, a condição do `if` deve ser verdadeira para `n=0` e `n=1`, e falsa para `n > 1`. A condição `n <= 1` satisfaz exatamente esse requisito, cobrindo ambos os casos base em uma única linha."
  },
  {
    "id_questao": "2024_2_q20",
    "prova_referencia": "2024-2.pdf",
    "numero_questao": 20,
    "ano_prova": 2024,
    "area": [
      {
        "nome": "Estruturas de Dados",
        "subarea": "Árvores"
      },
      {
        "nome": "Estruturas de Dados",
        "subarea": "BST"
      },
      {
        "nome": "Estruturas de Dados",
        "subarea": "AVL"
      }
    ],
    "enunciado": "Considere as afirmações abaixo sobre diferentes tipos de árvores binárias de pesquisa e marque uma das alternativas\nI) Os algoritmos de busca tanto em árvores sem balanceamento, quanto em árvores com balanceamento, têm o número máximo de comparações da chave de busca com valores na árvore, na pior das hipóteses, proporcional a altura da árvore, não importando se a árvore é sem balanceamento ou com balanceamento.\nII) Dependendo da ordem de inserção dos elementos, é possível que a altura de uma árvore sem balanceamento seja menor ou igual que a de uma árvore com balanceamento, mesmo que as duas contenham os mesmos elementos, todos inseridos na mesma ordem\nIII) O mesmo algoritmo de busca pode ser usado tanto para árvores com balanceamento quanto para árvores sem balanceamento",
    "opcoes": [
      {
        "letra": "a",
        "texto": "Apenas as afirmações I e II estão corretas",
        "correta": false
      },
      {
        "letra": "b",
        "texto": "Apenas as afirmações II e III estão corretas",
        "correta": false
      },
      {
        "letra": "c",
        "texto": "Apenas as afirmações I e III estão corretas",
        "correta": false
      },
      {
        "letra": "d",
        "texto": "Todas as afirmações estão corretas",
        "correta": true
      },
      {
        "letra": "e",
        "texto": "Nenhuma das alternativas anteriores (a,b,c ou d) está certa.",
        "correta": false
      }
    ],
    "explicacao_geral": "**Análise das Afirmativas:**\n\n- **I) Verdadeira:** A operação de busca em qualquer árvore binária de pesquisa (seja ela balanceada ou não) percorre um caminho da raiz até um nó (ou uma folha nula). O comprimento desse caminho é, no máximo, a altura da árvore. Portanto, o número de comparações no pior caso é sempre proporcional à altura ($O(h)$).\n\n- **II) Verdadeira:** Árvores com balanceamento (como AVL ou Rubro-Negra) garantem uma altura mínima, mas nem sempre a menor altura possível. Uma sequência de inserção de chaves pode, por acaso, formar uma árvore binária de pesquisa sem balanceamento que é mais compacta (ou de igual altura) que a versão que resultaria de inserções e rotações de uma árvore balanceada. A afirmação é verdadeira por causa do \"menor ou igual\".\n\n- **III) Verdadeira:** O algoritmo de busca em uma árvore binária de pesquisa baseia-se unicamente na propriedade de que `esquerda < raiz < direita`. Como as árvores balanceadas (AVL, Rubro-Negra, etc.) são, por definição, árvores binárias de pesquisa, elas mantêm essa propriedade. O mesmo algoritmo de busca funciona perfeitamente em ambas, pois a lógica de busca não se importa com as regras de balanceamento (que são aplicadas durante inserções e remoções).\n\nComo todas as três afirmações são verdadeiras, a alternativa correta é a (d)."
  }
]
[
  {
    "id_questao": "2024_1_q2",
    "prova_referencia": "2024-1.pdf",
    "numero_questao": 2,
    "ano_prova": 2024,
    "area": [
      {
        "nome": "Análise de Complexidade",
        "subarea": "Notação Big O"
      },
      {
        "nome": "Algoritmos",
        "subarea": null
      }
    ],
    "enunciado": "Se um programador fez testes para avaliar o tempo de execução para entradas de tamanho 1000 em um programa $O(n^2)$ e obteve tempo de 1 minuto, quanto tempo demoraria para uma entrada de tamanho 2000? (considere que 1000 é suficientemente grande para desprezar fatores menores na função de custo e que o custo unitário por operação não variou com o tamanho do problema entre os dois experimentos)",
    "opcoes": [
      {
        "letra": "a",
        "texto": "2 minutos",
        "correta": false
      },
      {
        "letra": "b",
        "texto": "3 minutos",
        "correta": false
      },
      {
        "letra": "c",
        "texto": "4 minutos",
        "correta": true
      },
      {
        "letra": "d",
        "texto": "9 minutos",
        "correta": false
      }
    ],
    "explicacao_geral": "**Raciocínio:** A complexidade é $O(n^2)$. Se o tamanho da entrada `n` dobra (de 1000 para 2000), o tempo de execução aumenta pelo quadrado desse fator, ou seja, $2^2 = 4$ vezes.\n\n**Cálculo:** 1 minuto * 4 = 4 minutos.\n\n- **(a) Incorreto:** 2 minutos seria o caso se a complexidade fosse linear, $O(n)$.\n- **(b, d) Incorreto:** São valores que não correspondem à proporção quadrática."
  },
  {
    "id_questao": "2024_1_q3",
    "prova_referencia": "2024-1.pdf",
    "numero_questao": 3,
    "ano_prova": 2024,
    "area": [
      {
        "nome": "Análise de Complexidade",
        "subarea": "Notação Big O"
      },
      {
        "nome": "Análise de Complexidade",
        "subarea": "Ω"
      }
    ],
    "enunciado": "Sobre as afirmativas abaixo:\nI) Se $f(n)=log_{2}(n)$ então $f(n)$ é $O(log_{10}(n))$\nII) Se um algoritmo tem função de custo $T(n)=3n$ então é correto afirmar que o algoritmo é $O(n^{2})$\nIII) Se um algoritmo A tem função de custo $T1(n)$ na classe de complexidade Ω(n) e um algoritmo B tem função de custo $T2(n)$ na classe de complexidade Ω($n^{2}$) então sabe-se com certeza que $T1(n)$ está na classe $O(T2(n))$.",
    "opcoes": [
      {
        "letra": "a",
        "texto": "Apenas I e II estão corretas",
        "correta": true
      },
      {
        "letra": "b",
        "texto": "Apenas I e III estão corretas",
        "correta": false
      },
      {
        "letra": "c",
        "texto": "Apenas II e III estão corretas",
        "correta": false
      },
      {
        "letra": "d",
        "texto": "Todas estão corretas",
        "correta": false
      }
    ],
    "explicacao_geral": "**Análise das Afirmativas:**\n\n- **I) Correta:** A mudança de base em logaritmos equivale a multiplicar por uma constante ($log_b(a) = \\frac{log_c(a)}{log_c(b)}$). Como a notação Big O ignora fatores constantes, $O(log_{2}(n))$ é equivalente a $O(log_{10}(n))$.\n- **II) Correta:** A notação Big O descreve um limite superior. Uma função linear como $T(n)=3n$ é limitada superiormente por uma função quadrática $c*n^2$ para um `c` e `n` suficientemente grandes (ex: para c=1, $3n \\le n^2$ para todo $n \\ge 3$).\n- **III) Incorreta:** A notação Ω descreve um limite inferior. $T1(n)$ poderia ser $n^3$ (que é $Ω(n)$) e $T2(n)$ poderia ser $n^2$ (que é $Ω(n^2)$). Neste caso, $T1(n)$ não é $O(T2(n))$ porque $n^3$ cresce mais rápido que $n^2$."
  },
  {
    "id_questao": "2024_1_q4",
    "prova_referencia": "2024-1.pdf",
    "numero_questao": 4,
    "ano_prova": 2024,
    "area": [
      {
        "nome": "Operações Fundamentais",
        "subarea": "Busca"
      },
      {
        "nome": "Estruturas de Dados",
        "subarea": "Arrays"
      }
    ],
    "enunciado": "Dado o vetor abaixo, o qual é apresentado em uma tabela onde a primeira linha indica a posição dos elementos e a segunda linha os valores armazenados. \n\n| Posição | 0 | 1 | 2 | 3 | 4  | 5  | 6  | 7  | 8  |\n|:-------:|:-:|:-:|:-:|:-:|:--:|:--:|:--:|:--:|:--:|\n| Valor   | 2 | 4 | 6 | 8 | 10 | 12 | 14 | 16 | 18 |\n\nUma busca binária no mesmo compararia a chave 13 com os seguintes valores do vetor:",
    "opcoes": [
      {
        "letra": "a",
        "texto": "2, 6, 10, 14 e 18",
        "correta": false
      },
      {
        "letra": "b",
        "texto": "10, 14 e 18",
        "correta": false
      },
      {
        "letra": "c",
        "texto": "Nenhuma porque a chave não existe no vetor",
        "correta": false
      },
      {
        "letra": "d",
        "texto": "10, 14 e 12",
        "correta": true
      }
    ],
    "explicacao_geral": "**Passo a Passo da Busca Binária (Chave = 13):**\nVetor: `[2, 4, 6, 8, 10, 12, 14, 16, 18]` (índices de 0 a 8)\n\n1.  **Intervalo `[0, 8]`:**\n    -   `meio = floor((0 + 8) / 2) = 4`\n    -   Compara `vetor[4]` (valor **10**) com 13.\n    -   `10 < 13`, então a busca continua na metade direita: `inicio = meio + 1 = 5`.\n\n2.  **Intervalo `[5, 8]`:**\n    -   `meio = floor((5 + 8) / 2) = 6`\n    -   Compara `vetor[6]` (valor **14**) com 13.\n    -   `14 > 13`, então a busca continua na metade esquerda: `fim = meio - 1 = 5`.\n\n3.  **Intervalo `[5, 5]`:**\n    -   `meio = floor((5 + 5) / 2) = 5`\n    -   Compara `vetor[5]` (valor **12**) com 13.\n    -   `12 < 13`, então `inicio = meio + 1 = 6`.\n\n4.  **Intervalo `[6, 5]`:**\n    -   `inicio > fim`, a busca termina. A chave não foi encontrada.\n\nOs valores comparados foram, nesta ordem: 10, 14 e 12."
  },
  {
    "id_questao": "2024_1_q5",
    "prova_referencia": "2024-1.pdf",
    "numero_questao": 5,
    "ano_prova": 2024,
    "area": [
      {
        "nome": "Estruturas de Dados",
        "subarea": "Árvores"
      },
      {
        "nome": "Operações Fundamentais",
        "subarea": "Travessia"
      }
    ],
    "enunciado": "Considere a árvore binária a seguir:\n\n```mermaid\ngraph TD\n    42 --> 15\n    42 --> 23\n    15 --> 4\n    15 --> 8\n    23 --> 16\n```\n\nSe ela for percorrida em-ordem (inorder), a sequência de nós visitados será:",
    "opcoes": [
      {
        "letra": "a",
        "texto": "4 15 8 42 23 16",
        "correta": true
      },
      {
        "letra": "b",
        "texto": "4 8 15 16 23 42",
        "correta": false
      },
      {
        "letra": "c",
        "texto": "42 15 4 8 23 16",
        "correta": false
      },
      {
        "letra": "d",
        "texto": "42 15 23 4 8 16",
        "correta": false
      }
    ],
    "explicacao_geral": "**Raciocínio (Percurso Em-Ordem):**\nO percurso em-ordem (in-order) segue a sequência: **Esquerda, Raiz, Direita**.\n\n1.  Começa na raiz (42). Vai para a subárvore esquerda (15).\n2.  Do nó 15, vai para a sua subárvore esquerda (4). O nó 4 não tem filhos. Visita **4**.\n3.  Volta para o pai (15). Visita **15**.\n4.  Do nó 15, vai para a sua subárvore direita (8). O nó 8 não tem filhos. Visita **8**.\n5.  Volta para a raiz principal (42). Visita **42**.\n6.  Da raiz (42), vai para a subárvore direita (23).\n7.  Do nó 23, tenta ir para a esquerda (nulo). \n8.  Visita **23**.\n9.  Do nó 23, vai para a sua subárvore direita (16). O nó 16 não tem filhos. Visita **16**.\n\n**Sequência final:** 4, 15, 8, 42, 23, 16."
  },
  {
    "id_questao": "2024_1_q6",
    "prova_referencia": "2024-1.pdf",
    "numero_questao": 6,
    "ano_prova": 2024,
    "area": [
      {
        "nome": "Estruturas de Dados",
        "subarea": "Árvores"
      },
      {
        "nome": "Estruturas de Dados",
        "subarea": "Rubro-Negra"
      }
    ],
    "enunciado": "Sobre árvores vermelho e preto contento pelo menos 128 elementos, sabe-se que:\nI) Uma árvore vermelho e preto tem altura máxima inferior a $3 \\cdot log_{2}(n)$, onde n é o número de chaves, pois ela é balanceada\nII) No pior caso, uma árvore vermelho e preto tem altura pior do que o pior caso de uma árvore binária de pesquisa\nIII) O balanceamento na árvore falha apenas para os casos de inserção em ordem crescente, situação em que a altura esperada da árvore pode chegar a passar da raiz quadrada do número de elementos quando o número de elementos for muito grande.",
    "opcoes": [
      {
        "letra": "a",
        "texto": "Apenas I é verdadeira",
        "correta": true
      },
      {
        "letra": "b",
        "texto": "Apenas II é verdadeira",
        "correta": false
      },
      {
        "letra": "c",
        "texto": "Apenas III é verdadeira",
        "correta": false
      },
      {
        "letra": "d",
        "texto": "Apenas I e II são verdadeiras",
        "correta": false
      }
    ],
    "explicacao_geral": "**Análise das Afirmativas:**\n\n- **I) Verdadeira:** A altura `h` de uma árvore rubro-negra com `n` nós é garantida como sendo $h \\le 2 \\cdot log_{2}(n+1)$. Como $2 \\cdot log_{2}(n+1)$ é uma função logarítmica, ela é limitada superiormente por $3 \\cdot log_{2}(n)$ para `n` suficientemente grande. A afirmação captura a essência de que a altura é logarítmica e balanceada.\n- **II) Falsa:** O pior caso para uma árvore rubro-negra é uma altura de $O(log n)$. O pior caso para uma árvore binária de pesquisa comum é uma altura de $O(n)$ (quando se torna uma lista encadeada). Portanto, a altura da árvore rubro-negra é significativamente melhor (menor), não pior.\n- **III) Falsa:** O balanceamento em uma árvore rubro-negra **nunca** falha. É uma estrutura de dados autobalanceada. Casos como inserção ordenada apenas exigem mais operações de balanceamento (rotações e recolorações) para manter as propriedades da árvore, mas ela permanece com altura logarítmica."
  },
  {
    "id_questao": "2024_1_q8",
    "prova_referencia": "2024-1.pdf",
    "numero_questao": 8,
    "ano_prova": 2024,
    "area": [
      {
        "nome": "Estruturas de Dados",
        "subarea": "Árvores"
      },
      {
        "nome": "Estruturas de Dados",
        "subarea": "AVL"
      }
    ],
    "enunciado": "Dentro das árvores AVL, considera-se uma árvore balanceada somente quando:",
    "opcoes": [
      {
        "letra": "a",
        "texto": "A diferença de altura da subárvore esquerda para a subárvore direita não exceda de 1, e as subárvores esquerda e direita também são balanceadas.",
        "correta": true
      },
      {
        "letra": "b",
        "texto": "Todos os nós da árvore têm 0 ou 2 subárvores, e a altura mínima da raiz é 2.",
        "correta": false
      },
      {
        "letra": "c",
        "texto": "Não existe diferença entre as alturas das subárvores dos nós.",
        "correta": false
      },
      {
        "letra": "d",
        "texto": "Todos os nós com chaves de busca menores que a chave da raiz encontram-se na subárvore esquerda.",
        "correta": false
      }
    ],
    "explicacao_geral": "**Definição da Árvore AVL:**\n\nUma árvore binária de busca é uma árvore AVL se, para todo nó na árvore, as alturas de suas duas subárvores (esquerda e direita) diferem em no máximo 1. Esta propriedade é conhecida como **fator de balanceamento**.\n\n- **(a) Correto:** Esta opção descreve perfeitamente a definição recursiva da propriedade de balanceamento de uma árvore AVL.\n- **(b) Incorreto:** Esta descrição se aproxima de uma árvore cheia, o que não é um requisito para AVL.\n- **(c) Incorreto:** Isso descreve uma árvore perfeitamente balanceada, que é um caso mais restrito e não obrigatório para uma árvore AVL.\n- **(d) Incorreto:** Esta é a definição de uma Árvore Binária de Busca (BST), que é um pré-requisito para uma AVL, mas não a sua condição de balanceamento."
  },
  {
    "id_questao": "2024_1_q9",
    "prova_referencia": "2024-1.pdf",
    "numero_questao": 9,
    "ano_prova": 2024,
    "area": [
      {
        "nome": "Estruturas de Dados",
        "subarea": "Listas Encadeadas"
      },
      {
        "nome": "Operações Fundamentais",
        "subarea": "Inserção"
      }
    ],
    "enunciado": "Considere uma lista ligada na qual cada nó contém um campo info (um valor inteiro) e um campo prox (um ponteiro para o próximo nó). O início da lista é indicado simplesmente por um ponteiro para o primeiro elemento. A declaração a seguir especifica o tipo da lista e declara uma lista inicialmente vazia.\n```c\ntypedef struct lista Lista;\nstruct lista {\n    int info;\n    Lista *prox;\n} *uma_lista = NULL;\n```\nQual das alternativas a seguir contém um código que insere corretamente um novo nó no início da lista?",
    "opcoes": [
      {
        "letra": "a",
        "texto": "```c\nvoid insere (Lista *lista, int info) {\n    Lista *novo = malloc(sizeof (Lista));\n    novo->info = info;\n    novo->prox = *lista; // Erro de compilação: não se pode desreferenciar 'lista'\n    *lista = novo; // Erro de compilação\n}\n```",
        "correta": false
      },
      {
        "letra": "b",
        "texto": "```c\nvoid insere (Lista *lista, int info) {\n    Lista *novo = malloc(sizeof (Lista));\n    novo->info = info;\n    novo->prox = lista->prox; // Lógica incorreta\n    *lista = novo; // Erro de compilação\n}\n```",
        "correta": false
      },
      {
        "letra": "c",
        "texto": "```c\nvoid insere (Lista **lista, int info) {\n    Lista *novo = malloc(sizeof (Lista));\n    novo->info = info;\n    novo->prox = *lista;\n    *lista = novo;\n}\n```",
        "correta": true
      },
      {
        "letra": "d",
        "texto": "```c\nvoid insere (Lista **lista, int info) {\n    Lista *novo = malloc(sizeof (Lista));\n    novo->info = info;\n    novo->prox = NULL;\n    if (*lista == NULL) { *lista = novo; }\n    else { (*lista)->prox = novo; } // Lógica incorreta: insere no segundo lugar, não no início\n}\n```",
        "correta": false
      }
    ],
    "explicacao_geral": "**Análise do Código em C:**\n\nPara que uma função possa alterar o ponteiro que aponta para o início da lista (a cabeça da lista), é necessário passar o **endereço** desse ponteiro para a função. Em C, isso é feito usando um ponteiro para ponteiro (`Lista **`).\n\n- **(a) Incorreto:** A função recebe `Lista *lista`, que é uma cópia do ponteiro da cabeça. Qualquer alteração em `lista` dentro da função é local e não afeta a lista original.\n- **(b) Incorreto:** Mesmo problema de (a), o ponteiro é passado por valor.\n- **(c) Correto:** A função recebe `Lista **lista`. `*lista` representa o ponteiro da cabeça original. A lógica `novo->prox = *lista;` faz o novo nó apontar para a antiga cabeça, e `*lista = novo;` atualiza a cabeça original para apontar para o novo nó. Isso insere corretamente no início.\n- **(d) Incorreto:** Embora receba `Lista **`, a lógica `(*lista)->prox = novo;` está errada. Ela tenta inserir o novo nó como o segundo elemento, não como o primeiro (a nova cabeça)."
  },
  {
    "id_questao": "2024_1_q10",
    "prova_referencia": "2024-1.pdf",
    "numero_questao": 10,
    "ano_prova": 2024,
    "area": [
      {
        "nome": "Algoritmos de Ordenação",
        "subarea": "Insertion Sort"
      },
      {
        "nome": "Algoritmos de Ordenação",
        "subarea": "QuickSort"
      },
      {
        "nome": "Algoritmos de Ordenação",
        "subarea": "MergeSort"
      }
    ],
    "enunciado": "Considere as seguintes afirmações sobre algoritmos de ordenação.\nI) O método da inserção (insertion sort) pode ser mais eficiente do que o quick sort se o vetor for pequeno e tiver poucos elementos fora de ordem.\nII) O quick sort é o melhor algoritmo de ordenação em situações típicas e, para vetores muito grandes, ele é sempre aconselhável em detrimento de outros algoritmos de ordenação.\nIII) O método da intercalação (merge sort) é eficiente, mas normalmente requer memória adicional para realizar a intercalação. É possível intercalar os elementos no próprio vetor, mas isso exige passos adicionais.",
    "opcoes": [
      {
        "letra": "a",
        "texto": "Todas as afirmações são verdadeiras",
        "correta": false
      },
      {
        "letra": "b",
        "texto": "Apenas I e II são verdadeiras",
        "correta": false
      },
      {
        "letra": "c",
        "texto": "Apenas I e III são verdadeiras",
        "correta": true
      },
      {
        "letra": "d",
        "texto": "Apenas II e III são verdadeiras",
        "correta": false
      }
    ],
    "explicacao_geral": "**Análise das Afirmativas:**\n\n- **I) Verdadeira:** O Insertion Sort tem baixa sobrecarga (overhead) e complexidade $O(n)$ no melhor caso (vetor quase ordenado). Para vetores pequenos, seu desempenho pode superar o Quicksort, que tem uma sobrecarga maior devido à recursão. Muitas implementações de Quicksort, inclusive, usam Insertion Sort para subvetores pequenos.\n- **II) Falsa:** A palavra \"sempre\" torna a afirmação falsa. O Quicksort tem complexidade de pior caso $O(n^2)$, que pode ocorrer em vetores já ordenados ou com elementos repetidos, dependendo da escolha do pivô. Para garantir desempenho em vetores muito grandes, o Mergesort ou Heapsort são mais seguros devido à sua complexidade garantida de $O(n \\log n)$.\n- **III) Verdadeira:** A implementação padrão e mais simples do Mergesort requer um vetor auxiliar de tamanho `n` para realizar a intercalação (merge) das duas metades, resultando em uma complexidade de espaço $O(n)$. Existem versões in-place, mas são mais complexas e geralmente menos eficientes."
  },
  {
    "id_questao": "2024_1_q11",
    "prova_referencia": "2024-1.pdf",
    "numero_questao": 11,
    "ano_prova": 2024,
    "area": [
      {
        "nome": "Recursão",
        "subarea": null
      },
      {
        "nome": "Análise de Complexidade",
        "subarea": null
      }
    ],
    "enunciado": "Considere a função em Python a seguir.\n```python\ndef chamada (n):\n  print(\"PPGI\")\n  if n <= 1:\n    return n\n  else:\n    return (chamada (n-1) + chamada (n-2))\n```\nQuantas vezes a palavra PPGI é impressa na tela ao executar chamada(4)?",
    "opcoes": [
      {
        "letra": "a",
        "texto": "3",
        "correta": false
      },
      {
        "letra": "b",
        "texto": "5",
        "correta": false
      },
      {
        "letra": "c",
        "texto": "9",
        "correta": true
      },
      {
        "letra": "d",
        "texto": "15",
        "correta": false
      }
    ],
    "explicacao_geral": "**Rastreamento das Chamadas:**\nSeja C(n) o número de vezes que `print` é chamado para `chamada(n)`.\n-   `C(0)`: 1 chamada\n-   `C(1)`: 1 chamada\n\nA recorrência para n > 1 é: `C(n) = 1 (da própria chamada) + C(n-1) + C(n-2)`\n\n-   `C(2) = 1 + C(1) + C(0) = 1 + 1 + 1 = 3`\n-   `C(3) = 1 + C(2) + C(1) = 1 + 3 + 1 = 5`\n-   `C(4) = 1 + C(3) + C(2) = 1 + 5 + 3 = 9`\n\nPortanto, a palavra \"PPGI\" é impressa 9 vezes."
  },
  {
    "id_questao": "2024_1_q12",
    "prova_referencia": "2024-1.pdf",
    "numero_questao": 12,
    "ano_prova": 2024,
    "area": [
      {
        "nome": "Recursão",
        "subarea": null
      }
    ],
    "enunciado": "Considere a função em Python a seguir.\n```python\ndef chamada (n):\n  print(\"PPGI\")\n  if n <= 1:\n    return n\n  else:\n    return (chamada (n-1) + chamada (n-2))\n```\nQual o retorno da execução chamada(4)?",
    "opcoes": [
      {
        "letra": "a",
        "texto": "3",
        "correta": true
      },
      {
        "letra": "b",
        "texto": "5",
        "correta": false
      },
      {
        "letra": "c",
        "texto": "8",
        "correta": false
      },
      {
        "letra": "d",
        "texto": "13",
        "correta": false
      }
    ],
    "explicacao_geral": "**Rastreamento do Retorno (Série de Fibonacci):**\nA função calcula a série de Fibonacci, onde F(0)=0 e F(1)=1.\nSeja F(n) o valor retornado por `chamada(n)`.\n-   `F(0)` retorna 0.\n-   `F(1)` retorna 1.\n\nA recorrência para n > 1 é: `F(n) = F(n-1) + F(n-2)`\n\n-   `F(2) = F(1) + F(0) = 1 + 0 = 1`\n-   `F(3) = F(2) + F(1) = 1 + 1 = 2`\n-   `F(4) = F(3) + F(2) = 2 + 1 = 3`\n\nO valor retornado pela execução de `chamada(4)` é 3."
  },
  {
    "id_questao": "2024_1_q13",
    "prova_referencia": "2024-1.pdf",
    "numero_questao": 13,
    "ano_prova": 2024,
    "area": [
      {
        "nome": "Estruturas de Dados",
        "subarea": "Árvores"
      },
      {
        "nome": "Estruturas de Dados",
        "subarea": "Rubro-Negra"
      }
    ],
    "enunciado": "Sobre árvores vermelho-preto, considere as afirmações:\nI) A raiz é preta\nII) Toda subárvore nula é preta\nIII) Se um nó é preto, então os filhos são vermelhos",
    "opcoes": [
      {
        "letra": "a",
        "texto": "Apenas a afirmação I",
        "correta": false
      },
      {
        "letra": "b",
        "texto": "Apenas as afirmações I e II",
        "correta": true
      },
      {
        "letra": "c",
        "texto": "Apenas as afirmações II e III",
        "correta": false
      },
      {
        "letra": "d",
        "texto": "Todas as afirmações",
        "correta": false
      }
    ],
    "explicacao_geral": "**Análise das Propriedades da Árvore Vermelho-Preto:**\n\n- **I) Verdadeira:** É uma das regras fundamentais de uma árvore vermelho-preto que o nó raiz seja sempre preto.\n- **II) Verdadeira:** Todas as folhas (nós nulos ou NIL) são consideradas pretas. Isso simplifica a manutenção das outras propriedades.\n- **III) Falsa:** Esta afirmação inverte uma das regras. A regra correta é: se um nó é **vermelho**, então ambos os seus filhos devem ser **pretos**. Não há restrição sobre a cor dos filhos de um nó preto."
  },
  {
    "id_questao": "2024_1_q14",
    "prova_referencia": "2024-1.pdf",
    "numero_questao": 14,
    "ano_prova": 2024,
    "area": [
      {
        "nome": "Estruturas de Dados",
        "subarea": "Árvores"
      },
      {
        "nome": "Estruturas de Dados",
        "subarea": "Rubro-Negra"
      }
    ],
    "enunciado": "As árvores rubro-negras têm como uma de suas características",
    "opcoes": [
      {
        "letra": "a",
        "texto": "Todo nó vermelho (rubro) tem dois filhos pretos",
        "correta": true
      },
      {
        "letra": "b",
        "texto": "A diferença de altura da subárvore esquerda para a subárvore direita não exceda de 1, e as subárvores esquerda e direita também são balanceadas",
        "correta": false
      },
      {
        "letra": "c",
        "texto": "Todo nó preto (negro) tem, pelo menos, uma subárvore cuja raiz é vermelha (rubra)",
        "correta": false
      },
      {
        "letra": "d",
        "texto": "A altura das subárvores é o fator usado para determinar o balanceamento, e pode exceder em 50% a diferença entre elas.",
        "correta": false
      }
    ],
    "explicacao_geral": "**Análise das Características:**\n\n- **(a) Correto:** Esta é uma das propriedades fundamentais de uma árvore rubro-negra. Se um nó é vermelho, seus filhos devem ser pretos. Isso evita que dois nós vermelhos sejam adjacentes no mesmo caminho.\n- **(b) Incorreto:** Esta é a definição do fator de balanceamento de uma árvore AVL, não de uma árvore rubro-negra.\n- **(c) Incorreto:** Não existe tal regra. Um nó preto pode ter filhos pretos.\n- **(d) Incorreto:** O balanceamento em árvores rubro-negras é mantido através de suas cinco propriedades de cores e caminhos, não por um fator de balanceamento de altura como nas árvores AVL."
  },
  {
    "id_questao": "2024_1_q15",
    "prova_referencia": "2024-1.pdf",
    "numero_questao": 15,
    "ano_prova": 2024,
    "area": [
      {
        "nome": "Estruturas de Dados",
        "subarea": "Rubro-Negra"
      },
      {
        "nome": "Análise de Complexidade",
        "subarea": "Notação Big O"
      }
    ],
    "enunciado": "A altura de uma árvore rubro negra com n nós é:",
    "opcoes": [
      {
        "letra": "a",
        "texto": "de, no máximo, $n*log(n)$",
        "correta": false
      },
      {
        "letra": "b",
        "texto": "de, no máximo, $2*log(n+1)$",
        "correta": true
      },
      {
        "letra": "c",
        "texto": "no pior caso, n*n",
        "correta": false
      },
      {
        "letra": "d",
        "texto": "de, no máximo, log(n-1)",
        "correta": false
      }
    ],
    "explicacao_geral": "A principal garantia de uma árvore rubro-negra é que ela permanece 'razoavelmente' balanceada, o que se traduz em uma altura máxima logarítmica. A prova matemática demonstra que a altura `h` de uma árvore rubro-negra com `n` nós internos é limitada por $h \\le 2 \\cdot log_2(n+1)$. Isso garante que as operações de busca, inserção e remoção tenham uma complexidade de pior caso de $O(log n)$. As outras opções são limites incorretos."
  },
  {
    "id_questao": "2024_1_q17",
    "prova_referencia": "2024-1.pdf",
    "numero_questao": 17,
    "ano_prova": 2024,
    "area": [
      {
        "nome": "Estruturas de Dados",
        "subarea": "Pilhas"
      },
      {
        "nome": "Estruturas de Dados",
        "subarea": "Filas"
      }
    ],
    "enunciado": "Qual é a principal diferença entre uma pilha e uma fila?",
    "opcoes": [
      {
        "letra": "a",
        "texto": "Uma pilha segue o princípio FIFO (First In, First Out), enquanto uma fila segue o princípio LIFO (Last In, First Out).",
        "correta": false
      },
      {
        "letra": "b",
        "texto": "Uma pilha segue o princípio LIFO (Last In, First Out), enquanto uma fila segue o princípio FIFO (First In, First Out).",
        "correta": true
      },
      {
        "letra": "c",
        "texto": "Pilhas e filas funcionam da mesma forma, não há diferença entre elas.",
        "correta": false
      },
      {
        "letra": "d",
        "texto": "Pilhas e filas não são estruturas de dados comuns na programação.",
        "correta": false
      }
    ],
    "explicacao_geral": "Esta é uma questão fundamental sobre estruturas de dados.\n\n- **Pilha (Stack):** Opera sob o princípio **LIFO (Last-In, First-Out)**. O último elemento a ser inserido é o primeiro a ser removido. Pense em uma pilha de pratos.\n- **Fila (Queue):** Opera sob o princípio **FIFO (First-In, First-Out)**. O primeiro elemento a ser inserido é o primeiro a ser removido. Pense em uma fila de pessoas em um caixa.\n\nA opção (b) descreve corretamente essa diferença fundamental."
  },
  {
    "id_questao": "2024_1_q18",
    "prova_referencia": "2024-1.pdf",
    "numero_questao": 18,
    "ano_prova": 2024,
    "area": [
      {
        "nome": "Estruturas de Dados",
        "subarea": "Arrays"
      }
    ],
    "enunciado": "Na linguagem de programação C, quando um vetor é passado para uma sub-rotina/função como argumento, o que realmente é passado:",
    "opcoes": [
      {
        "letra": "a",
        "texto": "O endereço de memória do primeiro elemento do vetor",
        "correta": true
      },
      {
        "letra": "b",
        "texto": "O endereço de memória do primeiro e do último elemento do vetor",
        "correta": false
      },
      {
        "letra": "c",
        "texto": "Os valores dos elementos do vetor",
        "correta": false
      },
      {
        "letra": "d",
        "texto": "O número de elementos na memória do vetor",
        "correta": false
      }
    ],
    "explicacao_geral": "Em C, os nomes de vetores 'decaem' para ponteiros para seu primeiro elemento quando passados como argumentos para funções. Isso significa que a função não recebe uma cópia do vetor inteiro (o que seria ineficiente para vetores grandes), mas sim o endereço de memória onde o vetor começa. Por isso, modificações feitas nos elementos do vetor dentro da função são refletidas no vetor original na função chamadora."
  },
  {
    "id_questao": "2024_1_q19",
    "prova_referencia": "2024-1.pdf",
    "numero_questao": 19,
    "ano_prova": 2024,
    "area": [
      {
        "nome": "Algoritmos",
        "subarea": null
      }
    ],
    "enunciado": "Analise o código a seguir:\n```c\nint subrotina (int x) {\n    int i, z=0;\n    for (i=1;i<x;i++)\n        z += i;\n    return z;\n}\nint main() {\n    int z, i, x;\n    for(i=1;i<5;i++){\n        printf(\"Informe um numero: \");\n        scanf(\"%d\",&z);\n        x=subrotina(z);\n        printf(\"%d\\n\",x);\n    }\n    return 0;\n}\n```\nQual o resultado impresso na tela, considerando que o usuário informou os respectivos valores de entrada (9, 7, 6, 10)?",
    "opcoes": [
      {
        "letra": "a",
        "texto": "15, 105, 28, 3",
        "correta": false
      },
      {
        "letra": "b",
        "texto": "28, 45, 91, 21",
        "correta": false
      },
      {
        "letra": "c",
        "texto": "36, 21, 15, 45",
        "correta": true
      },
      {
        "letra": "d",
        "texto": "36, 55, 78, 45",
        "correta": false
      }
    ],
    "explicacao_geral": "**Análise do Código:**\nA função `subrotina(x)` calcula a soma de todos os números inteiros de 1 até `x-1`.\n\n- **1ª Entrada (9):** `subrotina(9)` calcula `1+2+3+4+5+6+7+8 = 36`. Imprime **36**.\n- **2ª Entrada (7):** `subrotina(7)` calcula `1+2+3+4+5+6 = 21`. Imprime **21**.\n- **3ª Entrada (6):** `subrotina(6)` calcula `1+2+3+4+5 = 15`. Imprime **15**.\n- **4ª Entrada (10):** `subrotina(10)` calcula `1+2+3+4+5+6+7+8+9 = 45`. Imprime **45**.\n\nA sequência de saída é `36, 21, 15, 45`."
  },
  {
    "id_questao": "2024_1_q20",
    "prova_referencia": "2024-1.pdf",
    "numero_questao": 20,
    "ano_prova": 2024,
    "area": [
      {
        "nome": "Algoritmos",
        "subarea": null
      }
    ],
    "enunciado": "Marque a alternativa CORRETA do programa em C que atende o seguinte enunciado: \"Alguns restaurantes nos EUA cobram gorjeta de 18% para o garçom. Faça um programa em C que leia o valor gasto com as despesas realizadas em um restaurante e imprima o valor total com a gorjeta\":",
    "opcoes": [
      {
        "letra": "a",
        "texto": "```c\n#include<stdio.h>\nint main(void) {\n    float PT, E;\n    printf(\"Informe o valor\");\n    scanf(\"%f\",&E);\n    PT=E+E*1.18;\n    printf(\"Valor Total: %.2f\", PT);\n    return 0;\n}\n```",
        "correta": false
      },
      {
        "letra": "b",
        "texto": "```c\n#include<stdio.h>\nint main(void) {\n    float X, TG;\n    printf(\"Informe o valor\");\n    scanf(\"%f\",&X);\n    TG=X*0.18;\n    printf(\"Valor Total: %.2f\", TG);\n    return 0;\n}\n```",
        "correta": false
      },
      {
        "letra": "c",
        "texto": "```c\n#include<stdio.h>\nint main(void) {\n    float K, W;\n    printf(\"Informe o valor\");\n    scanf(\"%f\",&K);\n    W=K+K*0.18;\n    printf(\"Valor Total: %.2f\", W);\n    return 0;\n}\n```",
        "correta": true
      },
      {
        "letra": "d",
        "texto": "```c\n#include<stdio.h>\nint main(void) {\n    float PT, E;\n    printf(\"Informe o valor\");\n    scanf(\"%f\",&E);\n    PT=E*E*18/100;\n    printf (\"Valor Total: %.2f\", PT);\n    return 0;\n}\n```",
        "correta": false
      }
    ],
    "explicacao_geral": "**Análise da Lógica:**\nO valor total a ser pago é o valor original da despesa mais 18% desse valor. Matematicamente, se `K` é a despesa, o total `W` é: \n$W = K + (K \\cdot 0.18)$\nEsta fórmula é equivalente a $W = K \\cdot (1 + 0.18) = K \\cdot 1.18$.\n\n- **(a) Incorreto:** `E + E * 1.18` calcula `E + 118% de E`, resultando em 218% do valor original.\n- **(b) Incorreto:** `X * 0.18` calcula apenas o valor da gorjeta, não o valor total.\n- **(c) Correto:** `K + K * 0.18` calcula corretamente o valor original mais 18% de gorjeta.\n- **(d) Incorreto:** `E * E * 18/100` calcula `E^2 * 0.18`, uma fórmula matematicamente incorreta para o problema."
  }
]
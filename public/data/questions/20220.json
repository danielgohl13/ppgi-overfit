[
  {
    "id_questao": "2022_0_q1",
    "prova_referencia": "2022-0.pdf",
    "numero_questao": 1,
    "ano_prova": 2022,
    "area": [
      {
        "nome": "Estruturas de Dados",
        "subarea": "Arrays"
      },
      {
        "nome": "Algoritmos",
        "subarea": "Operações Fundamentais"
      }
    ],
    "enunciado": "Indique qual é a saída correta do seguinte programa em python:\n\n```python\nclass Vector():\n    def __init__(self, row: list()):\n        self.row = row\n    def dot_product(self, column):\n        return sum(self.row[i] * column.row[i] for i in range(len(self.row)))\n\nvec_1 = Vector([0, 2, 0, 0, 5])\nvec_2 = Vector([1, 0, 3, 4, 0])\nprint(vec_1.dot_product(vec_2))\n```",
    "opcoes": [
      {
        "letra": "a",
        "texto": "15",
        "correta": false
      },
      {
        "letra": "b",
        "texto": "[0, 0, 0, 0, 0]",
        "correta": false
      },
      {
        "letra": "c",
        "texto": "[1, 2, 3, 4, 5]",
        "correta": false
      },
      {
        "letra": "d",
        "texto": "0",
        "correta": true
      }
    ],
    "explicacao_geral": "**Raciocínio:** O código calcula o produto escalar (dot product) entre dois vetores, `vec_1` e `vec_2`. O produto escalar é a soma dos produtos dos elementos correspondentes dos vetores.\n\n**Cálculo:**\n- `vec_1` = `[0, 2, 0, 0, 5]`\n- `vec_2` = `[1, 0, 3, 4, 0]`\n- Produto escalar = `(0*1) + (2*0) + (0*3) + (0*4) + (5*0)`\n- Resultado = `0 + 0 + 0 + 0 + 0 = 0`\n\n- **(a, b, c) Incorreto:** Os valores não correspondem ao cálculo do produto escalar. A opção 'b' representa um vetor, enquanto o resultado esperado é um escalar (um número único)."
  },
  {
    "id_questao": "2022_0_q2",
    "prova_referencia": "2022-0.pdf",
    "numero_questao": 2,
    "ano_prova": 2022,
    "area": [
      {
        "nome": "Estruturas de Dados",
        "subarea": "Árvores (BST)"
      }
    ],
    "enunciado": "Sobre as características das árvores de pesquisa binária, considere as afirmações:\n\n1. TODOS os nós da subárvore à esquerda são menores que o pai\n2. O nó mais à esquerda é o menor de TODOS os nós, enquanto que o nó mais à direita é o maior de TODOS\n3. O sucessor de um nó x é o nó com a menor chave maior que a chave de x, e este sucessor estará SEMPRE em um nível (altura) acima de x, ou seja, mais próximo da raiz.\n\nQuais são verdadeiras?",
    "opcoes": [
      {
        "letra": "a",
        "texto": "Apenas as afirmações 2e3",
        "correta": false
      },
      {
        "letra": "b",
        "texto": "Todas as afirmações",
        "correta": false
      },
      {
        "letra": "c",
        "texto": "Apenas as afirmações 1e2",
        "correta": true
      },
      {
        "letra": "d",
        "texto": "Apenas a afirmação 1",
        "correta": false
      }
    ],
    "explicacao_geral": "**Raciocínio:**\n- **Afirmação 1 (Verdadeira):** Esta é a definição fundamental de uma Árvore Binária de Busca (BST). Para qualquer nó, todos os valores em sua subárvore esquerda devem ser menores que o valor do próprio nó.\n- **Afirmação 2 (Verdadeira):** Devido à propriedade da BST, o caminho mais à esquerda a partir da raiz levará ao menor elemento, e o caminho mais à direita levará ao maior elemento.\n- **Afirmação 3 (Falsa):** O sucessor de um nó `x` (assumindo que `x` tem uma subárvore direita) é o nó com o menor valor na subárvore direita de `x`. Este nó sucessor pode estar em um nível (profundidade) maior, igual ou menor, mas não necessariamente acima (mais próximo da raiz)."
  },
  {
    "id_questao": "2022_0_q3",
    "prova_referencia": "2022-0.pdf",
    "numero_questao": 3,
    "ano_prova": 2022,
    "area": [
      {
        "nome": "Algoritmos de Ordenação",
        "subarea": "QuickSort"
      },
      {
        "nome": "Algoritmos de Ordenação",
        "subarea": "MergeSort"
      },
      {
        "nome": "Algoritmos de Ordenação",
        "subarea": "Selection Sort"
      },
      {
        "nome": "Análise de Complexidade",
        "subarea": "Notação Big O"
      }
    ],
    "enunciado": "Sobre ordenação, considere as afirmações:\n\n1. O Quicksort é um dos algoritmos mais conhecidos, pois possui complexidade, no pior caso, de $O(n \\log n)$\n2. O Quicksort e Mergesort usam a técnica de divisão e conquista\n3. O Mergesort possui complexidade assintótica $\\Theta(n \\log n)$ no caso médio.\n4. Caso a lista já esteja ordenada, o Selectionsort têm complexidade de $O(n)$.\n\nTais afirmações são, respectivamente:",
    "opcoes": [
      {
        "letra": "a",
        "texto": "Verdadeira, verdadeira, verdadeira, verdadeira",
        "correta": false
      },
      {
        "letra": "b",
        "texto": "Falsa, verdadeira, verdadeira, falsa",
        "correta": true
      },
      {
        "letra": "c",
        "texto": "Verdadeira, falsa, falsa, verdadeira",
        "correta": false
      },
      {
        "letra": "d",
        "texto": "Falsa, falsa, falsa, falsa",
        "correta": false
      }
    ],
    "explicacao_geral": "**Raciocínio:**\n- **Afirmação 1 (Falsa):** A complexidade do Quicksort no **pior caso** é $O(n^2)$. Isso ocorre quando os pivôs escolhidos são sempre os menores ou maiores elementos. O caso médio e o melhor caso são $O(n \\log n)$.\n- **Afirmação 2 (Verdadeira):** Ambos os algoritmos são exemplos clássicos da estratégia de \"dividir para conquistar\", quebrando o problema em partes menores, resolvendo-as recursivamente e combinando os resultados.\n- **Afirmação 3 (Verdadeira):** O Mergesort divide o vetor ao meio e intercala os resultados, independentemente da ordem inicial. Sua complexidade é consistentemente $\\Theta(n \\log n)$ para todos os casos (melhor, médio e pior).\n- **Afirmação 4 (Falsa):** O Selection Sort sempre procura o menor elemento no restante do vetor para colocar na posição correta. Este processo tem complexidade $O(n^2)$ em todos os casos, incluindo quando o vetor já está ordenado."
  },
  {
    "id_questao": "2022_0_q4",
    "prova_referencia": "2022-0.pdf",
    "numero_questao": 4,
    "ano_prova": 2022,
    "area": [
      {
        "nome": "Estruturas de Dados",
        "subarea": "Árvores (BST)"
      },
      {
        "nome": "Operações Fundamentais",
        "subarea": "Inserção"
      }
    ],
    "enunciado": "Os seguintes itens são inseridos em uma árvore binária de busca: 8, 3, 4, 9, 5, 6, 2, 1, 7.\nQual item é colocado na raiz?",
    "opcoes": [
      {
        "letra": "a",
        "texto": "1",
        "correta": false
      },
      {
        "letra": "b",
        "texto": "4",
        "correta": false
      },
      {
        "letra": "c",
        "texto": "8",
        "correta": true
      },
      {
        "letra": "d",
        "texto": "9",
        "correta": false
      }
    ],
    "explicacao_geral": "**Raciocínio:** Em uma árvore binária de busca, o primeiro elemento a ser inserido em uma árvore vazia se torna o nó raiz.\n\n**Análise:**\nA sequência de inserção é: 8, 3, 4, 9, 5, 6, 2, 1, 7.\nO primeiro item da sequência é o **8**.\n\n- **(a, b, d) Incorreto:** Esses são elementos inseridos posteriormente e ocuparão posições de nós filhos ou descendentes na árvore, mas não a raiz."
  },
  {
    "id_questao": "2022_0_q5",
    "prova_referencia": "2022-0.pdf",
    "numero_questao": 5,
    "ano_prova": 2022,
    "area": [
      {
        "nome": "Estruturas de Dados",
        "subarea": "Pilhas"
      },
      {
        "nome": "Estruturas de Dados",
        "subarea": "Listas Encadeadas"
      },
      {
        "nome": "Análise de Complexidade",
        "subarea": "Notação Big O"
      }
    ],
    "enunciado": "Para a implementação eficiente ($O(1)$) de uma pilha usando lista simplesmente encadeada, onde os push's e pop's são executados?",
    "opcoes": [
      {
        "letra": "a",
        "texto": "Push depois do último elemento, pop no último elemento",
        "correta": false
      },
      {
        "letra": "b",
        "texto": "Push antes do primeiro elemento, pop no primeiro elemento",
        "correta": true
      },
      {
        "letra": "c",
        "texto": "Push antes do primeiro elemento, pop no último elemento",
        "correta": false
      },
      {
        "letra": "d",
        "texto": "Push depois do último elemento, pop no primeiro elemento",
        "correta": false
      }
    ],
    "explicacao_geral": "**Raciocínio:** Uma pilha segue a política LIFO (Last-In, First-Out), o que significa que inserções (push) e remoções (pop) ocorrem no mesmo extremo, chamado de 'topo'. Para alcançar complexidade $O(1)$ com uma lista simplesmente encadeada, as operações devem ser no início da lista.\n\n- **(b) Correto:** Inserir um elemento antes do primeiro (tornando-o o novo primeiro) e remover o primeiro elemento são operações que apenas manipulam o ponteiro da cabeça da lista, levando tempo constante, $O(1)$.\n- **(a, c, d) Incorreto:** Operações no último elemento de uma lista simplesmente encadeada (sem um ponteiro para a cauda) requerem percorrer a lista inteira, o que resulta em uma complexidade de tempo linear, $O(n)$, tornando a implementação ineficiente."
  },
  {
    "id_questao": "2022_0_q6",
    "prova_referencia": "2022-0.pdf",
    "numero_questao": 6,
    "ano_prova": 2022,
    "area": [
      {
        "nome": "Estruturas de Dados",
        "subarea": "Arrays"
      },
      {
        "nome": "Algoritmos",
        "subarea": null
      }
    ],
    "enunciado": "Indique qual é a saída correta do seguinte programa escrito em python:\n\n```python\nclass Vector():\n    def __init__(self, row: list()):\n        self.row = row\n    def dot_product(self, column):\n        return sum(self.row[i] * column.row[i] for i in range(len(self.row)))\n\nvec_1 = Vector([1, 2, 3, 4, 5])\nvec_2 = vec_1\nvec_2.row[2] = 15\nprint(vec_1.row)\n```",
    "opcoes": [
      {
        "letra": "a",
        "texto": "[2 15 4 5]",
        "correta": false
      },
      {
        "letra": "b",
        "texto": "[01 2 15 4 5]",
        "correta": false
      },
      {
        "letra": "c",
        "texto": "[1 2 15 4 15]",
        "correta": false
      },
      {
        "letra": "d",
        "texto": "[1 2 15 4 5]",
        "correta": true
      }
    ],
    "explicacao_geral": "**Raciocínio:** A chave da questão está em entender como Python lida com a atribuição de objetos. A linha `vec_2 = vec_1` não cria uma cópia do objeto. Em vez disso, faz com que `vec_2` aponte para o *mesmo objeto* em memória que `vec_1`.\n\n**Análise do Código:**\n1. `vec_1 = Vector([1, 2, 3, 4, 5])`: Cria um objeto `Vector` e `vec_1` passa a referenciá-lo.\n2. `vec_2 = vec_1`: `vec_2` agora referencia o mesmo objeto. Qualquer mudança feita através de `vec_2` afetará o objeto que `vec_1` também referencia.\n3. `vec_2.row[2] = 15`: Esta linha acessa o atributo `row` (que é a lista `[1, 2, 3, 4, 5]`) do objeto e muda o elemento no índice 2 para 15. A lista se torna `[1, 2, 15, 4, 5]`.\n4. `print(vec_1.row)`: Como `vec_1` aponta para o mesmo objeto modificado, o programa imprime a lista `[1, 2, 15, 4, 5]`."
  },
  {
    "id_questao": "2022_0_q7",
    "prova_referencia": "2022-0.pdf",
    "numero_questao": 7,
    "ano_prova": 2022,
    "area": [
      {
        "nome": "Análise de Complexidade",
        "subarea": "Notação Big O"
      },
      {
        "nome": "Análise de Complexidade",
        "subarea": "Ω"
      }
    ],
    "enunciado": "Considere as funções $f(n)=(n+1)(n-1)$ e $g(n)=8 \\log_2(n)+1,$ sendo $n>0$. Podemos afirmar que:",
    "opcoes": [
      {
        "letra": "a",
        "texto": "$f(n)$ é exponencial e $g(n)$ é exponencial",
        "correta": false
      },
      {
        "letra": "b",
        "texto": "$f(n)$ é quadrática e $g(n)$ é linear",
        "correta": false
      },
      {
        "letra": "c",
        "texto": "$g(n)=\\Omega(f(n))$",
        "correta": false
      },
      {
        "letra": "d",
        "texto": "$g(n)=O(f(n))$",
        "correta": true
      }
    ],
    "explicacao_geral": "**Raciocínio:** Primeiro, simplificamos e classificamos as funções:\\n- $f(n) = (n+1)(n-1) = n^2 - 1$. Esta função é de ordem **quadrática**, ou seja, $\\Theta(n^2)$.\\n- $g(n) = 8 \\log_2(n) + 1$. Esta função é de ordem **logarítmica**, ou seja, $\\Theta(\\log n)$.\\n\\nAgora, comparamos as taxas de crescimento. Uma função quadrática ($n^2$) cresce assintoticamente mais rápido que uma função logarítmica ($\\log n$).\\n\\n- **(a), (b) Incorreto:** A classificação das funções está errada.\\n- **(c) $g(n)=\\Omega(f(n))$:** Isso significaria que $\\log n$ cresce pelo menos tão rápido quanto $n^2$ ($\\log n = \\Omega(n^2)$), o que é **falso**.\\n- **(d) $g(n)=O(f(n))$:** Isso significa que $f(n)$ é um limite superior para $g(n)$, ou seja, $\\log n$ cresce no máximo tão rápido quanto $n^2$ ($\\log n = O(n^2)$). Isso é **verdadeiro**, pois a função quadrática domina a logarítmica."
  },
  {
    "id_questao": "2022_0_q8",
    "prova_referencia": "2022-0.pdf",
    "numero_questao": 8,
    "ano_prova": 2022,
    "area": [
      {
        "nome": "Recursão",
        "subarea": "Técnicas recursivas e análise"
      }
    ],
    "enunciado": "Indique qual é a saída correta do seguinte programa escrito em python:\n\n```python\ndef fibonacci(n):\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n\nn = 7\nprint(fibonacci(n))\n```",
    "opcoes": [
      {
        "letra": "a",
        "texto": "13",
        "correta": false
      },
      {
        "letra": "b",
        "texto": "5",
        "correta": false
      },
      {
        "letra": "c",
        "texto": "0",
        "correta": false
      },
      {
        "letra": "d",
        "texto": "8",
        "correta": true
      }
    ],
    "explicacao_geral": "**Raciocínio:** A função recursiva calcula a sequência de Fibonacci, mas com um deslocamento nos índices. A sequência padrão é $F_0=0, F_1=1, F_2=1, ...$. Esta implementação retorna $F_{n-1}$.\n\n**Cálculo passo a passo para `fibonacci(7)`:**\n- `fibonacci(1)` -> 0\n- `fibonacci(2)` -> 1\n- `fibonacci(3)` -> `fibonacci(2)` + `fibonacci(1)` = 1 + 0 = 1\n- `fibonacci(4)` -> `fibonacci(3)` + `fibonacci(2)` = 1 + 1 = 2\n- `fibonacci(5)` -> `fibonacci(4)` + `fibonacci(3)` = 2 + 1 = 3\n- `fibonacci(6)` -> `fibonacci(5)` + `fibonacci(4)` = 3 + 2 = 5\n- `fibonacci(7)` -> `fibonacci(6)` + `fibonacci(5)` = 5 + 3 = **8**"
  },
  {
    "id_questao": "2022_0_q9",
    "prova_referencia": "2022-0.pdf",
    "numero_questao": 9,
    "ano_prova": 2022,
    "area": [
      {
        "nome": "Estruturas de Dados",
        "subarea": "Grafos"
      },
      {
        "nome": "Grafos",
        "subarea": "Propriedades"
      }
    ],
    "enunciado": "Um grafo é uma árvore se e somente se:",
    "opcoes": [
      {
        "letra": "a",
        "texto": "É planar",
        "correta": false
      },
      {
        "letra": "b",
        "texto": "É conexo, não direcionado e não contém ciclos",
        "correta": true
      },
      {
        "letra": "c",
        "texto": "É completamente conectado",
        "correta": false
      },
      {
        "letra": "d",
        "texto": "Todo grafo é uma árvore",
        "correta": false
      }
    ],
    "explicacao_geral": "**Raciocínio:** A questão pede a definição formal de uma árvore na teoria dos grafos.\n\n- **(b) Correto:** Uma árvore é definida como um grafo que satisfaz três condições simultaneamente: é **conexo** (existe um caminho entre quaisquer dois vértices), **não direcionado** (as arestas não têm um sentido) e **acíclico** (não contém ciclos).\n- **(a) Incorreto:** Um grafo ser planar (pode ser desenhado sem que as arestas se cruzem) não é suficiente. Um quadrado é planar mas tem um ciclo.\n- **(c) Incorreto:** Um grafo completamente conectado (clique), com mais de 2 vértices, sempre terá ciclos.\n- **(d) Incorreto:** Esta é uma generalização falsa. Grafos podem ter ciclos, ser direcionados ou desconexos, propriedades que os distinguem das árvores."
  },
  {
    "id_questao": "2022_0_q10",
    "prova_referencia": "2022-0.pdf",
    "numero_questao": 10,
    "ano_prova": 2022,
    "area": [
      {
        "nome": "Estruturas de Dados",
        "subarea": "Arrays"
      }
    ],
    "enunciado": "Matrizes são estruturas de dados de n-dimensões que podem ser implementadas utilizando arrays (vetores). Por simplicidade, chamaremos de matrizes as matrizes bidimensionais numéricas (que armazenam números inteiros). Sendo assim, marque a alternativa INCORRETA.",
    "opcoes": [
      {
        "letra": "a",
        "texto": "O produto de duas matrizes, a primeira com 'm' linhas e 'n' colunas e a segunda com 'x' linhas e 'y' colunas, resulta em uma matriz de 'n' linhas e 'y' colunas.",
        "correta": true
      },
      {
        "letra": "b",
        "texto": "Uma das formas triviais de implementar a soma dos elementos de uma matriz pode ser realizada através de dois laços aninhados (um sobre as linhas e o outro sobre as colunas) e um acumulador de valores.",
        "correta": false
      },
      {
        "letra": "c",
        "texto": "Uma matriz também pode ser representada utilizando listas encadeadas (utilizando referências ou ponteiros).",
        "correta": false
      },
      {
        "letra": "d",
        "texto": "Uma matriz de 'm' linhas e 'n' colunas contêm 'm*n' espaços para alocação de números inteiros.",
        "correta": false
      }
    ],
    "explicacao_geral": "**Raciocínio:** A questão pede para identificar a afirmação incorreta sobre matrizes.\n\n- **(a) Incorreto:** Para que o produto de uma matriz A (m x n) por uma matriz B (x x y) seja definido, o número de colunas de A deve ser igual ao número de linhas de B (ou seja, `n` deve ser igual a `x`). A matriz resultante terá as dimensões `m x y`. A afirmação diz que a matriz resultante tem `n` linhas e `y` colunas, o que está errado. Portanto, esta é a alternativa incorreta.\n- **(b) Correto:** Percorrer todas as posições com dois laços aninhados (`for i in rows`, `for j in cols`) é a forma padrão de somar todos os elementos.\n- **(c) Correto:** Matrizes, especialmente as esparsas, podem ser representadas por listas encadeadas para economizar memória.\n- **(d) Correto:** Uma matriz de `m` linhas e `n` colunas tem um total de `m*n` elementos."
  },
  {
    "id_questao": "2022_0_q11",
    "prova_referencia": "2022-0.pdf",
    "numero_questao": 11,
    "ano_prova": 2022,
    "area": [
      {
        "nome": "Algoritmos de Ordenação",
        "subarea": "Insertion Sort"
      },
      {
        "nome": "Análise de Complexidade",
        "subarea": "Busca"
      }
    ],
    "enunciado": "Considere o pseudo algoritmo abaixo:\n\n```c\nvoid Inserir(int vetor[], int N, int novo) {\n    /* tamanho do vetor N+1 */\n    int i = 1, j = N, meio, k;\n    /* Ocupação do vetor é N, assume-se que vetor tem N+1 posições e está ordenado até a posição N */\n    while (i <= j) {\n        meio = (int) floor((i+j)/2);\n        if (vetor[meio] > novo) { j = meio-1; }\n        else { i = meio+1; }\n    }\n    for (k=N; k >= i; k--) {\n        vetor[k+1] = vetor[k];\n    }\n    vetor[i] = novo;\n}\n```\n*Obs: O código original possuía erros lógicos e foi corrigido para refletir a intenção de um algoritmo de inserção otimizado.*\n\nConsidere as afirmações:\n\n1. Realiza a inserção do novo elemento com menos comparações que o algoritmo da ordenação por inserção.\n2. Realiza a inserção com o mesmo número de comparações que o algoritmo da ordenação por inserção.\n3. Realiza a inserção do novo elemento com o mesmo número de movimentações que o algoritmo da ordenação por inserção.\n\nSobre as afirmações anteriores, é correto dizer que:",
    "opcoes": [
      {
        "letra": "a",
        "texto": "Somente a 1 é correta",
        "correta": false
      },
      {
        "letra": "b",
        "texto": "2 e 3 são corretas",
        "correta": false
      },
      {
        "letra": "c",
        "texto": "Somente a 3 é correta",
        "correta": false
      },
      {
        "letra": "d",
        "texto": "1 e 3 são corretas",
        "correta": true
      }
    ],
    "explicacao_geral": "**Raciocínio:** O algoritmo apresentado é uma variação da inserção em um vetor ordenado, conhecida como Inserção Binária (Binary Insertion). Ele otimiza a fase de busca do Insertion Sort.\n\n- **Fase de Busca (Comparações):** O Insertion Sort tradicional usa uma busca linear para encontrar a posição correta para o novo elemento, o que leva $O(N)$ comparações no pior caso. O algoritmo da questão usa uma **busca binária** (`while (i <= j)`), que encontra a posição em $O(\\log N)$ comparações. Portanto, **a afirmação 1 é correta** e a 2 é falsa.\n- **Fase de Inserção (Movimentações):** Após encontrar a posição, ambos os algoritmos precisam deslocar os elementos para abrir espaço para o novo item. No pior caso (inserir no início), ambos realizam $N$ movimentações. Portanto, o número de movimentações é o mesmo, e **a afirmação 3 é correta**.\n\nConclusão: As afirmações 1 e 3 estão corretas."
  },
  {
    "id_questao": "2022_0_q12",
    "prova_referencia": "2022-0.pdf",
    "numero_questao": 12,
    "ano_prova": 2022,
    "area": [
      {
        "nome": "Análise de Complexidade",
        "subarea": "Notação Big O"
      },
      {
        "nome": "Algoritmos de Ordenação",
        "subarea": "QuickSort"
      }
    ],
    "enunciado": "Qual das opções melhor representa o limite superior assintótico do tempo de execução do algoritmo Quick Sort no pior caso?",
    "opcoes": [
      {
        "letra": "a",
        "texto": "$O(n)$",
        "correta": false
      },
      {
        "letra": "b",
        "texto": "$O(n \\log n)$",
        "correta": false
      },
      {
        "letra": "c",
        "texto": "$O(n!)$",
        "correta": false
      },
      {
        "letra": "d",
        "texto": "$O(n^2)$",
        "correta": true
      }
    ],
    "explicacao_geral": "**Raciocínio:** O desempenho do QuickSort depende da escolha do pivô.\n\n- **Melhor e Médio Caso:** Se o pivô divide o vetor em duas metades aproximadamente iguais, a relação de recorrência é $T(n) = 2T(n/2) + O(n)$, resultando em uma complexidade de $O(n \\log n)$.\n- **Pior Caso:** Se o pivô escolhido é consistentemente o menor ou o maior elemento (o que acontece com um vetor já ordenado se o pivô for sempre o primeiro ou o último), o vetor é dividido em uma parte com 0 elementos e outra com $n-1$ elementos. A relação de recorrência torna-se $T(n) = T(n-1) + O(n)$, o que leva a uma complexidade quadrática de $O(n^2)$.\n\n- **(a, b, c) Incorreto:** $O(n \\log n)$ é o caso médio/melhor, não o pior. $O(n)$ e $O(n!)$ são incorretos."
  },
  {
    "id_questao": "2022_0_q13",
    "prova_referencia": "2022-0.pdf",
    "numero_questao": 13,
    "ano_prova": 2022,
    "area": [
      {
        "nome": "Estruturas de Dados",
        "subarea": "Arrays"
      },
      {
        "nome": "Algoritmos",
        "subarea": "Operações Fundamentais"
      }
    ],
    "enunciado": "O que faz o código C abaixo?\n\n```c\n#include <stdio.h>\n#define MAX 50\nint main() {\n    int m, soma = 0;\n    int mat[MAX][MAX];\n    scanf(\"%d\", &m);\n    for (int i=0; i<m; i++)\n        for (int j=0; j<m; j++)\n            scanf(\"%d\", &mat[i][j]);\n    for (int i=0; i<m; i++)\n        for (int j=i; j<m; j++)\n            soma += mat[i][j];\n    printf(\"%d\\n\", soma);\n    return 0;\n}\n```",
    "opcoes": [
      {
        "letra": "a",
        "texto": "Calcula e imprime a soma dos elementos iguais ou acima da diagonal principal da matriz.",
        "correta": true
      },
      {
        "letra": "b",
        "texto": "Calcula e imprime a soma dos elementos da matriz.",
        "correta": false
      },
      {
        "letra": "c",
        "texto": "Imprime somente o último valor da matriz, ou seja, mat[m][m].",
        "correta": false
      },
      {
        "letra": "d",
        "texto": "Calcula e imprime a soma dos elementos iguais ou abaixo da diagonal principal da matriz.",
        "correta": false
      }
    ],
    "explicacao_geral": "**Raciocínio:** A chave para entender o código está no segundo laço `for` aninhado: `for (int i=0; i<m; i++) for (int j=i; j<m; j++)`.\n\n- O laço externo itera sobre as linhas (`i`).\n- O laço interno itera sobre as colunas (`j`), mas começa a partir do índice da linha atual (`j=i`).\n- Isso significa que, para cada linha `i`, ele acessa os elementos `mat[i][i]`, `mat[i][i+1]`, `mat[i][i+2]`, etc.\n- Os elementos onde o índice da coluna é maior ou igual ao da linha (`j >= i`) são exatamente os elementos que estão na **diagonal principal** (`j == i`) e **acima dela** (`j > i`).\n\n- **(b, d) Incorreto:** Para somar todos os elementos, o segundo laço deveria ser `j=0`. Para somar os elementos abaixo da diagonal, a condição seria `j<=i`."
  },
  {
    "id_questao": "2022_0_q14",
    "prova_referencia": "2022-0.pdf",
    "numero_questao": 14,
    "ano_prova": 2022,
    "area": [
      {
        "nome": "Algoritmos",
        "subarea": "Operações Fundamentais"
      }
    ],
    "enunciado": "Analise o seguinte programa em C e indique a saída correta:\n\n```c\nvoid func1(int x) { x = 9*x; }\nvoid func2(int v[]) { v[0] = 3*v[0]; }\nint main(void) {\n    int x, v[2];\n    x = 222;\n    func1(x);\n    printf(\"x: %d\\n\", x);\n    v[0] = 333;\n    func2(v);\n    printf(\"v[0]: %d\\n\", v[0]);\n    return 0;\n}\n```",
    "opcoes": [
      {
        "letra": "a",
        "texto": "x: 222 e v[0]: 999",
        "correta": true
      },
      {
        "letra": "b",
        "texto": "x: 222 e v[0]: 222",
        "correta": false
      },
      {
        "letra": "c",
        "texto": "x: 222 e v[0]: 666",
        "correta": false
      },
      {
        "letra": "d",
        "texto": "x: 222 e v[0]: 333",
        "correta": false
      }
    ],
    "explicacao_geral": "**Raciocínio:** A questão testa o conhecimento sobre passagem de parâmetros por valor e por referência em C.\n\n- **`func1(x)` (Passagem por Valor):** Tipos primitivos como `int` são passados por valor. A função `func1` recebe uma *cópia* de `x`. A alteração `x = 9*x` é feita na cópia local e não afeta a variável `x` na função `main`. Portanto, `x` permanece **222**.\n\n- **`func2(v)` (Passagem por Referência):** Em C, quando um array é passado para uma função, o que é passado na verdade é um ponteiro para o primeiro elemento do array. `func2` recebe o endereço de `v`. A operação `v[0] = 3*v[0]` modifica o valor no endereço de memória original do array. O cálculo é `3 * 333 = 999`. Portanto, `v[0]` se torna **999**.\n\n- **Saída:** `x: 222` e `v[0]: 999`."
  },
  {
    "id_questao": "2022_0_q15",
    "prova_referencia": "2022-0.pdf",
    "numero_questao": 15,
    "ano_prova": 2022,
    "area": [
      {
        "nome": "Estruturas de Dados",
        "subarea": "Listas Encadeadas"
      }
    ],
    "enunciado": "O que faz o seguinte código em C?\n\n```c\ntypedef struct ListaNode {\n    int info;\n    struct ListaNode *prox;\n    struct ListaNode *ant;\n} Lista;\n\nLista* abracadabra(Lista* l, int v) {\n    Lista* novo = (Lista*) malloc(sizeof(Lista));\n    novo->info = v;\n    novo->prox = l;\n    novo->ant = NULL;\n    if (l != NULL) {\n        l->ant = novo;\n    }\n    return novo;\n}\n```\n*Obs: O código original foi corrigido para maior clareza.*\n",
    "opcoes": [
      {
        "letra": "a",
        "texto": "Insere inteiros em uma lista duplamente encadeada, onde tais elementos são sempre inseridos no início da lista.",
        "correta": true
      },
      {
        "letra": "b",
        "texto": "Insere inteiros em uma lista duplamente encadeada, onde tais elementos são sempre inseridos no final da lista.",
        "correta": false
      },
      {
        "letra": "c",
        "texto": "Insere inteiros em uma lista simplesmente encadeada, onde tais elementos são sempre inseridos no início da lista.",
        "correta": false
      },
      {
        "letra": "d",
        "texto": "Insere inteiros em uma lista simplesmente encadeada, onde tais elementos são sempre inseridos no fim da lista.",
        "correta": false
      }
    ],
    "explicacao_geral": "**Raciocínio:** Analisando o código passo a passo:\n1.  `Lista* novo = (Lista*) malloc(sizeof(Lista));`: Aloca memória para um novo nó.\n2.  `novo->info = v;`: Atribui o valor `v` ao novo nó.\n3.  `novo->prox = l;`: O ponteiro `prox` do novo nó aponta para a antiga cabeça da lista (`l`). Isso coloca o novo nó antes do antigo primeiro nó.\n4.  `novo->ant = NULL;`: O ponteiro `ant` (anterior) do novo nó é `NULL`, pois ele se tornará o primeiro nó da lista.\n5.  `if (l != NULL) { l->ant = novo; }`: Se a lista não estava vazia, o ponteiro `ant` do antigo primeiro nó (`l`) é atualizado para apontar para o `novo` nó.\n6.  `return novo;`: Retorna o ponteiro para o `novo` nó, que é agora a nova cabeça da lista.\n\n- **Conclusão:** A manipulação dos ponteiros `prox` e `ant` indica que se trata de uma **lista duplamente encadeada**. A lógica do código insere o novo elemento **no início** da lista."
  },
  {
    "id_questao": "2022_0_q16",
    "prova_referencia": "2022-0.pdf",
    "numero_questao": 16,
    "ano_prova": 2022,
    "area": [
      {
        "nome": "Estruturas de Dados",
        "subarea": "Hash Tables"
      },
      {
        "nome": "Hashing",
        "subarea": "Resolução de colisões"
      }
    ],
    "enunciado": "Considere uma tabela hash de comprimento $m=9$, que usa endereçamento aberto e a técnica de sondagem linear (linear probing) para resolver colisões. Considere também a função de dispersão $h(k)=k \\mod m$, onde k é a chave a ser inserida. Por fim, as seguintes chaves foram inseridas: 73, 24, 16, 46, 28 (nesta ordem). Escolha a opção que representa esta tabela após estas operações:",
    "opcoes": [
      {
        "letra": "a",
        "texto": "0-73-16-0-0-28-24-46-0",
        "correta": false
      },
      {
        "letra": "b",
        "texto": "28-46-73-0-0-0-0-24-16",
        "correta": false
      },
      {
        "letra": "c",
        "texto": "0-73-46-28-0-0-24-16-0",
        "correta": true
      },
      {
        "letra": "d",
        "texto": "73-46-0-0-0-0-28-24-16",
        "correta": false
      }
    ],
    "explicacao_geral": "**Raciocínio:** A inserção será feita passo a passo em uma tabela de 9 posições (índices 0 a 8), usando $h(k) = k \\mod 9$ e sondagem linear para colisões.\nTabela inicial: `[_, _, _, _, _, _, _, _, _]`\n\n1.  **Inserir 73:** $h(73) = 73 \\mod 9 = 1$. Posição 1 livre.\n    `[_, 73, _, _, _, _, _, _, _]`\n2.  **Inserir 24:** $h(24) = 24 \\mod 9 = 6$. Posição 6 livre.\n    `[_, 73, _, _, _, _, 24, _, _]`\n3.  **Inserir 16:** $h(16) = 16 \\mod 9 = 7$. Posição 7 livre.\n    `[_, 73, _, _, _, _, 24, 16, _]`\n4.  **Inserir 46:** $h(46) = 46 \\mod 9 = 1$. Posição 1 ocupada. Próxima livre é a 2.\n    `[_, 73, 46, _, _, _, 24, 16, _]`\n5.  **Inserir 28:** $h(28) = 28 \\mod 9 = 1$. Posição 1 ocupada. Posição 2 ocupada. Próxima livre é a 3.\n    `[_, 73, 46, 28, _, _, 24, 16, _]`\n\n- **Estado Final:** `[0, 73, 46, 28, 0, 0, 24, 16, 0]`. A opção 'c' na prova original omitia o último '0', mas representa a sequência correta de valores."
  },
  {
    "id_questao": "2022_0_q17",
    "prova_referencia": "2022-0.pdf",
    "numero_questao": 17,
    "ano_prova": 2022,
    "area": [
      {
        "nome": "Estruturas de Dados",
        "subarea": "Árvores (Rubro-Negra)"
      }
    ],
    "enunciado": "Sobre árvores vermelho-preto, considere as afirmações:\n\n1. A raiz é preta\n2. Toda subárvore nula é preta,\n3. Se um nó é vermelho, então os filhos são pretos.\n\nQual são verdadeiras:",
    "opcoes": [
      {
        "letra": "a",
        "texto": "Apenas as afirmações 2 e 3",
        "correta": false
      },
      {
        "letra": "b",
        "texto": "Todas as afirmações",
        "correta": true
      },
      {
        "letra": "c",
        "texto": "Apenas as afirmações 1 e 2",
        "correta": false
      },
      {
        "letra": "d",
        "texto": "Apenas a afirmação 1",
        "correta": false
      }
    ],
    "explicacao_geral": "**Raciocínio:** A questão lista propriedades fundamentais das árvores Rubro-Negras.\n\n- **Afirmação 1 (Verdadeira):** É uma regra fundamental (Propriedade 2) que o nó raiz de uma árvore Rubro-Negra deve ser sempre preto.\n- **Afirmação 2 (Verdadeira):** Todas as folhas, que são tratadas como nós nulos (NIL), são consideradas pretas (Propriedade 3).\n- **Afirmação 3 (Verdadeira):** Se um nó é vermelho, seus filhos devem ser obrigatoriamente pretos (Propriedade 4). Isso evita que existam dois nós vermelhos consecutivos em um caminho da raiz a uma folha.\n\nTodas as três afirmações são regras canônicas que definem uma árvore Rubro-Negra, portanto todas são verdadeiras."
  },
  {
    "id_questao": "2022_0_q18",
    "prova_referencia": "2022-0.pdf",
    "numero_questao": 18,
    "ano_prova": 2022,
    "area": [
      {
        "nome": "Estruturas de Dados",
        "subarea": "Grafos"
      },
      {
        "nome": "Grafos",
        "subarea": "Algoritmos (Dijkstra, BFS)"
      },
      {
        "nome": "Grafos",
        "subarea": "Propriedades"
      }
    ],
    "enunciado": "Sobre os grafos, considere as afirmações:\n\n1. O algoritmo de Dijkstra é conhecido por descobrir o menor caminho entre dois vértices, mas só funciona para casos pequenos ou médios, por possuir complexidade exponencial.\n2. Na implementação da busca em largura, uma fila é normalmente utilizada.\n3. Em grafos esparsos, a implementação por matriz de adjacências consome mais memória do que a implementação por lista de adjacências.\n\nQuais são verdadeiras?",
    "opcoes": [
      {
        "letra": "a",
        "texto": "Apenas as afirmações 2 e 3",
        "correta": true
      },
      {
        "letra": "b",
        "texto": "Apenas as afirmações 1 e 2",
        "correta": false
      },
      {
        "letra": "c",
        "texto": "Apenas a afirmação 1",
        "correta": false
      },
      {
        "letra": "d",
        "texto": "Nenhuma das afirmações",
        "correta": false
      }
    ],
    "explicacao_geral": "**Raciocínio:**\n- **Afirmação 1 (Falsa):** A complexidade do algoritmo de Dijkstra com uma implementação eficiente (usando heap binário) é $O((V+E) \\log V)$ ou $O(E \\log V)$, onde V é o número de vértices e E o de arestas. Esta complexidade **não é exponencial** e permite que o algoritmo seja usado em grafos grandes.\n- **Afirmação 2 (Verdadeira):** A Busca em Largura (BFS) explora os vizinhos de um nó antes de passar para o próximo nível. Uma estrutura de dados **FIFO (First-In, First-Out)** como uma **fila** é a ferramenta ideal para gerenciar os nós a serem visitados nesta ordem.\n- **Afirmação 3 (Verdadeira):** Uma matriz de adjacências sempre usa $O(V^2)$ de memória. Uma lista de adjacências usa $O(V+E)$. Em grafos esparsos, o número de arestas $E$ é pequeno (próximo de $V$). Portanto, $O(V+E)$ é significativamente mais eficiente em termos de memória do que $O(V^2)$."
  },
  {
    "id_questao": "2022_0_q19",
    "prova_referencia": "2022-0.pdf",
    "numero_questao": 19,
    "ano_prova": 2022,
    "area": [
      {
        "nome": "Estruturas de Dados",
        "subarea": "Árvores (AVL)"
      },
      {
        "nome": "Análise de Complexidade",
        "subarea": "Remoção"
      }
    ],
    "enunciado": "Em uma árvore AVL, considerando que já possuímos a referência para um nó que queremos remover da árvore (não precisa fazer busca), o melhor e o pior caso para remover este elemento são, respectivamente:",
    "opcoes": [
      {
        "letra": "a",
        "texto": "$O(\\log n)$, $O(\\log n)$",
        "correta": false
      },
      {
        "letra": "b",
        "texto": "$O(1)$, $O(\\log n)$",
        "correta": true
      },
      {
        "letra": "c",
        "texto": "$O(1)$, $O(n)$",
        "correta": false
      },
      {
        "letra": "d",
        "texto": "$O(\\log n)$, $O(n)$",
        "correta": false
      }
    ],
    "explicacao_geral": "**Raciocínio:** A questão exclui o tempo de busca, focando apenas na remoção e no subsequente rebalanceamento.\n\n- **Melhor Caso:** Ocorre quando o nó a ser removido é uma folha e sua remoção não causa desbalanceamento que se propaga pela árvore. A remoção em si (ajustar o ponteiro do pai) e a verificação do balanceamento no pai são operações de tempo constante. Portanto, o melhor caso é **$O(1)$**.\n\n- **Pior Caso:** Ocorre quando a remoção causa um desbalanceamento que precisa ser corrigido por meio de rotações que se propagam do ponto da remoção até a raiz da árvore. Como a altura de uma árvore AVL com `n` nós é garantidamente $O(\\log n)$, o caminho a ser percorrido para o rebalanceamento tem, no máximo, esse comprimento. Portanto, o pior caso é **$O(\\log n)$**."
  },
  {
    "id_questao": "2022_0_q20",
    "prova_referencia": "2022-0.pdf",
    "numero_questao": 20,
    "ano_prova": 2022,
    "area": [
      {
        "nome": "Estruturas de Dados",
        "subarea": "Arrays"
      },
      {
        "nome": "Análise de Complexidade",
        "subarea": "Notação Big O"
      }
    ],
    "enunciado": "Considere as seguintes operações em uma lista implementada usando vetores: busca por um elemento, acesso por índice, inserção no início da lista, inserção no final da lista, remoção por índice. As complexidades do pior caso dessas operações, na ordem mencionada, são:",
    "opcoes": [
      {
        "letra": "a",
        "texto": "$O(n)$, $O(1)$, $O(1)$, $O(n)$, $O(n)$",
        "correta": false
      },
      {
        "letra": "b",
        "texto": "$O(n)$, $O(1)$, $O(n)$, $O(1)$, $O(n)$",
        "correta": true
      },
      {
        "letra": "c",
        "texto": "$O(1)$, $O(n)$, $O(n)$, $O(n)$, $O(1)$",
        "correta": false
      },
      {
        "letra": "d",
        "texto": "$O(n)$, $O(n)$, $O(1)$, $O(n)$, $O(1)$",
        "correta": false
      }
    ],
    "explicacao_geral": "**Raciocínio:** Analisando a complexidade de cada operação em um vetor no pior caso:\n\n- **Busca por um elemento:** Se o elemento não estiver presente ou for o último, é preciso percorrer todo o vetor. **Complexidade: $O(n)$**.\n- **Acesso por índice:** Acessar `vetor[i]` é uma operação de acesso direto à memória. **Complexidade: $O(1)$**.\n- **Inserção no início:** Para inserir no índice 0, todos os `n` elementos existentes devem ser deslocados uma posição para a direita. **Complexidade: $O(n)$**.\n- **Inserção no final:** Se houver capacidade no vetor, a inserção no final (`vetor[n] = valor`) é direta. **Complexidade: $O(1)$** (amortizado).\n- **Remoção por índice:** No pior caso, a remoção do primeiro elemento (índice 0) exige que os `n-1` elementos restantes sejam deslocados para a esquerda. **Complexidade: $O(n)$**.\n\n- **Sequência Correta:** $O(n)$, $O(1)$, $O(n)$, $O(1)$, $O(n)$.\n"
  }
]